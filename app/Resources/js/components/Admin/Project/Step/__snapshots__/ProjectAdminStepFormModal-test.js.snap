// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ProjectAdminStepFormModal /> renders correctly 1`] = `
<Modal
  animation={false}
  aria-labelledby="contained-modal-title-lg"
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  bsSize="large"
  dialogComponentClass={[Function]}
  enforceFocus={true}
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onHide={[MockFunction]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  show={true}
>
  <ModalHeader
    bsClass="modal-header"
    closeButton={true}
    closeLabel="Close"
  >
    <ModalTitle
      bsClass="modal-title"
      componentClass="h4"
      id="contained-modal-title-lg"
    >
      <FormattedMessage
        id="admin.label.project_abstractstep"
        values={Object {}}
      />
    </ModalTitle>
  </ModalHeader>
  <ModalBody
    bsClass="modal-body"
    componentClass="div"
  >
    <Connect(injectIntl(ReduxForm))
      formName="ProjectAdminStepForm"
      handleClose={[MockFunction]}
      step={null}
    />
  </ModalBody>
  <ModalFooter
    bsClass="modal-footer"
    componentClass="div"
  >
    <Button
      active={false}
      block={false}
      bsClass="btn"
      bsStyle="default"
      disabled={false}
      onClick={[MockFunction]}
    >
      <FormattedMessage
        id="global.cancel"
        values={Object {}}
      />
    </Button>
    <Button
      active={false}
      block={false}
      bsClass="btn"
      bsStyle="primary"
      disabled={false}
      id="step-modal-submit"
      onClick={[Function]}
    >
      <FormattedMessage
        id="group.create.button"
        values={Object {}}
      />
    </Button>
  </ModalFooter>
</Modal>
`;

exports[`<ProjectAdminStepFormModal /> renders correctly hided 1`] = `
<Modal
  animation={false}
  aria-labelledby="contained-modal-title-lg"
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  bsSize="large"
  dialogComponentClass={[Function]}
  enforceFocus={true}
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onHide={[MockFunction]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  show={false}
>
  <ModalHeader
    bsClass="modal-header"
    closeButton={true}
    closeLabel="Close"
  >
    <ModalTitle
      bsClass="modal-title"
      componentClass="h4"
      id="contained-modal-title-lg"
    >
      <FormattedMessage
        id="admin.label.project_abstractstep"
        values={Object {}}
      />
    </ModalTitle>
  </ModalHeader>
  <ModalBody
    bsClass="modal-body"
    componentClass="div"
  >
    <Connect(injectIntl(ReduxForm))
      formName="ProjectAdminStepForm"
      handleClose={[MockFunction]}
      step={null}
    />
  </ModalBody>
  <ModalFooter
    bsClass="modal-footer"
    componentClass="div"
  >
    <Button
      active={false}
      block={false}
      bsClass="btn"
      bsStyle="default"
      disabled={false}
      onClick={[MockFunction]}
    >
      <FormattedMessage
        id="global.cancel"
        values={Object {}}
      />
    </Button>
    <Button
      active={false}
      block={false}
      bsClass="btn"
      bsStyle="primary"
      disabled={false}
      id="step-modal-submit"
      onClick={[Function]}
    >
      <FormattedMessage
        id="group.create.button"
        values={Object {}}
      />
    </Button>
  </ModalFooter>
</Modal>
`;

exports[`<ProjectAdminStepFormModal /> renders correctly submitting 1`] = `
<Modal
  animation={false}
  aria-labelledby="contained-modal-title-lg"
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  bsSize="large"
  dialogComponentClass={[Function]}
  enforceFocus={true}
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onHide={[MockFunction]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  show={true}
>
  <ModalHeader
    bsClass="modal-header"
    closeButton={true}
    closeLabel="Close"
  >
    <ModalTitle
      bsClass="modal-title"
      componentClass="h4"
      id="contained-modal-title-lg"
    >
      <FormattedMessage
        id="admin.label.project_abstractstep"
        values={Object {}}
      />
    </ModalTitle>
  </ModalHeader>
  <ModalBody
    bsClass="modal-body"
    componentClass="div"
  >
    <Connect(injectIntl(ReduxForm))
      formName="ProjectAdminStepForm"
      handleClose={[MockFunction]}
      step={null}
    />
  </ModalBody>
  <ModalFooter
    bsClass="modal-footer"
    componentClass="div"
  >
    <Button
      active={false}
      block={false}
      bsClass="btn"
      bsStyle="default"
      disabled={false}
      onClick={[MockFunction]}
    >
      <FormattedMessage
        id="global.cancel"
        values={Object {}}
      />
    </Button>
    <Button
      active={false}
      block={false}
      bsClass="btn"
      bsStyle="primary"
      disabled={true}
      id="step-modal-submit"
      onClick={[Function]}
    >
      <FormattedMessage
        id="global.loading"
        values={Object {}}
      />
    </Button>
  </ModalFooter>
</Modal>
`;

exports[`<ProjectAdminStepFormModal /> renders correctly with step 1`] = `
<Modal
  animation={false}
  aria-labelledby="contained-modal-title-lg"
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  bsSize="large"
  dialogComponentClass={[Function]}
  enforceFocus={true}
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onHide={[MockFunction]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  show={true}
>
  <ModalHeader
    bsClass="modal-header"
    closeButton={true}
    closeLabel="Close"
  >
    <ModalTitle
      bsClass="modal-title"
      componentClass="h4"
      id="contained-modal-title-lg"
    >
      <FormattedMessage
        id="admin.label.project_abstractstep"
        values={Object {}}
      />
    </ModalTitle>
  </ModalHeader>
  <ModalBody
    bsClass="modal-body"
    componentClass="div"
  >
    <Connect(injectIntl(ReduxForm))
      formName="ProjectAdminStepForm"
      handleClose={[MockFunction]}
      step={
        Object {
          "title": "test",
        }
      }
    />
  </ModalBody>
  <ModalFooter
    bsClass="modal-footer"
    componentClass="div"
  >
    <Button
      active={false}
      block={false}
      bsClass="btn"
      bsStyle="default"
      disabled={false}
      onClick={[MockFunction]}
    >
      <FormattedMessage
        id="global.cancel"
        values={Object {}}
      />
    </Button>
    <Button
      active={false}
      block={false}
      bsClass="btn"
      bsStyle="primary"
      disabled={false}
      id="step-modal-submit"
      onClick={[Function]}
    >
      <FormattedMessage
        id="global.edit"
        values={Object {}}
      />
    </Button>
  </ModalFooter>
</Modal>
`;
