// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<RegistrationAdminPage /> renders correctly 1`] = `
<div
  className="box-content box-content__content-form"
>
  <div
    className="d-flex align-items-center mb-15"
  >
    <Toggle
      checked={false}
      icons={true}
      onChange={[Function]}
    />
    <FormattedMessage
      id="allow-registration"
      values={Object {}}
    />
  </div>
  <h4>
    <FormattedMessage
      id="social-medias"
      values={Object {}}
    />
  </h4>
  <p>
    <FormattedMessage
      id="allow-registration-with"
      values={Object {}}
    />
  </p>
  <div
    className="d-flex align-items-center mb-15 mt-15"
  >
    <Toggle
      checked={false}
      icons={true}
      onChange={[Function]}
    />
    Facebook
  </div>
  <div
    className="d-flex align-items-center mb-15 mt-15"
  >
    <Toggle
      checked={false}
      icons={true}
      onChange={[Function]}
    />
    Google
  </div>
  <h4>
    <FormattedMessage
      id="allow"
      values={Object {}}
    />
  </h4>
  <div
    className="d-flex align-items-center mb-15 mt-15"
  >
    <Toggle
      checked={false}
      icons={true}
      onChange={[Function]}
    />
    <FormattedMessage
      id="limit-registration-to-some-domains"
      values={Object {}}
    />
  </div>
  <h4>
    <FormattedMessage
      id="received-data"
      values={Object {}}
    />
  </h4>
  <div
    className="d-flex align-items-center mb-15 mt-15"
  >
    <Toggle
      checked={true}
      disabled={true}
      icons={true}
    />
    <FormattedMessage
      id="user.register.username.username"
      values={Object {}}
    />
  </div>
  <div
    className="d-flex align-items-center mb-15 mt-15"
  >
    <Toggle
      checked={true}
      disabled={true}
      icons={true}
    />
    <FormattedMessage
      id="form.new_password"
      values={Object {}}
    />
  </div>
  <div
    className="d-flex align-items-center mb-15 mt-15"
  >
    <Toggle
      checked={false}
      icons={true}
      onChange={[Function]}
    />
    <FormattedMessage
      id="user.register.zipcode"
      values={Object {}}
    />
  </div>
  <div
    className="d-flex align-items-center mb-15"
  >
    <Toggle
      checked={false}
      icons={true}
      onChange={[Function]}
    />
    <FormattedMessage
      id="registration.type"
      values={Object {}}
    />
  </div>
  <Well
    bsClass="div"
  >
    <p
      style={
        Object {
          "marginTop": 10,
        }
      }
    >
      <strong>
        <FormattedMessage
          id="more-fields"
          values={Object {}}
        />
      </strong>
    </p>
    <ReactRelayQueryRenderer
      environment={
        RelayModernEnvironment {
          "__setNet": [Function],
          "_deferrableSelections": Array [],
          "_network": Object {
            "execute": [Function],
            "executeWithEvents": [Function],
          },
          "_publishQueue": RelayPublishQueue {
            "_appliedOptimisticUpdates": Array [],
            "_backup": Object {},
            "_handlerProvider": [Function],
            "_pendingBackupRebase": false,
            "_pendingData": Array [],
            "_pendingOptimisticUpdates": Array [],
            "_pendingUpdaters": Array [],
            "_store": RelayMarkSweepStore {
              "_gcEnabled": true,
              "_hasScheduledGC": false,
              "_index": 0,
              "_recordSource": Object {},
              "_roots": Array [],
              "_subscriptions": Array [],
              "_updatedRecordIDs": Object {},
            },
          },
          "_store": RelayMarkSweepStore {
            "_gcEnabled": true,
            "_hasScheduledGC": false,
            "_index": 0,
            "_recordSource": Object {},
            "_roots": Array [],
            "_subscriptions": Array [],
            "_updatedRecordIDs": Object {},
          },
          "configName": undefined,
          "unstable_internal": Object {
            "areEqualSelectors": [Function],
            "createFragmentSpecResolver": [Function],
            "createOperationSelector": [Function],
            "getDataIDsFromObject": [Function],
            "getFragment": [Function],
            "getRequest": [Function],
            "getSelector": [Function],
            "getSelectorList": [Function],
            "getSelectorsFromObject": [Function],
            "getVariablesFromObject": [Function],
          },
        }
      }
      query={[Function]}
      render={[Function]}
      variables={Object {}}
    />
  </Well>
  <div
    className="d-flex align-items-center mb-15 mt-15"
  >
    <Toggle
      checked={false}
      icons={true}
      onChange={[Function]}
    />
    <span>
      <strong>
        <FormattedMessage
          id="request-consent-to-receive-information-related-to-the-platform"
          values={Object {}}
        />
      </strong>
    </span>
  </div>
  <div
    className="d-flex align-items-center mb-15 mt-15"
  >
    <Toggle
      checked={false}
      icons={true}
      onChange={[Function]}
    />
    <span>
      <strong>
        <FormattedMessage
          id="registration.enable_consent_external_communication.title"
          values={Object {}}
        />
      </strong>
      <br />
      <FormattedMessage
        id="registration.enable_consent_external_communication.subtitle"
        values={
          Object {
            "link": <a
              className="external-link"
              href="http://localhost/admin/settings/settings.global/list"
            >
              <FormattedMessage
                id="proposal.admin.general"
                values={Object {}}
              />
            </a>,
          }
        }
      />
    </span>
  </div>
  <div
    className="d-flex align-items-center mb-15 mt-15"
  >
    <Toggle
      checked={false}
      disabled={false}
      icons={true}
      onChange={[Function]}
    />
    <FormattedMessage
      id="i-am-not-a-bot"
      values={Object {}}
    />
  </div>
  <h3>
    <FormattedMessage
      id="communication"
      values={Object {}}
    />
  </h3>
  <Connect(ReduxForm) />
</div>
`;

exports[`<RegistrationAdminPage /> renders correctly when not super admin 1`] = `
<div
  className="box-content box-content__content-form"
>
  <div
    className="d-flex align-items-center mb-15"
  >
    <Toggle
      checked={false}
      icons={true}
      onChange={[Function]}
    />
    <FormattedMessage
      id="allow-registration"
      values={Object {}}
    />
  </div>
  <h4>
    <FormattedMessage
      id="social-medias"
      values={Object {}}
    />
  </h4>
  <p>
    <FormattedMessage
      id="allow-registration-with"
      values={Object {}}
    />
  </p>
  <div
    className="d-flex align-items-center mb-15 mt-15"
  >
    <Toggle
      checked={false}
      icons={true}
      onChange={[Function]}
    />
    Facebook
  </div>
  <div
    className="d-flex align-items-center mb-15 mt-15"
  >
    <Toggle
      checked={false}
      icons={true}
      onChange={[Function]}
    />
    Google
  </div>
  <h4>
    <FormattedMessage
      id="allow"
      values={Object {}}
    />
  </h4>
  <div
    className="d-flex align-items-center mb-15 mt-15"
  >
    <Toggle
      checked={false}
      icons={true}
      onChange={[Function]}
    />
    <FormattedMessage
      id="limit-registration-to-some-domains"
      values={Object {}}
    />
  </div>
  <h4>
    <FormattedMessage
      id="received-data"
      values={Object {}}
    />
  </h4>
  <div
    className="d-flex align-items-center mb-15 mt-15"
  >
    <Toggle
      checked={true}
      disabled={true}
      icons={true}
    />
    <FormattedMessage
      id="user.register.username.username"
      values={Object {}}
    />
  </div>
  <div
    className="d-flex align-items-center mb-15 mt-15"
  >
    <Toggle
      checked={true}
      disabled={true}
      icons={true}
    />
    <FormattedMessage
      id="form.new_password"
      values={Object {}}
    />
  </div>
  <div
    className="d-flex align-items-center mb-15 mt-15"
  >
    <Toggle
      checked={false}
      icons={true}
      onChange={[Function]}
    />
    <FormattedMessage
      id="user.register.zipcode"
      values={Object {}}
    />
  </div>
  <div
    className="d-flex align-items-center mb-15"
  >
    <Toggle
      checked={false}
      icons={true}
      onChange={[Function]}
    />
    <FormattedMessage
      id="registration.type"
      values={Object {}}
    />
  </div>
  <Well
    bsClass="well"
  >
    <p
      style={
        Object {
          "marginTop": 10,
        }
      }
    >
      <Alert
        bsClass="alert"
        bsStyle="info"
        closeLabel="Close alert"
      >
        Cette section est modifiable uniquement par votre administrateur cap-collectif.
      </Alert>
      <strong>
        <FormattedMessage
          id="more-fields"
          values={Object {}}
        />
      </strong>
    </p>
    <ReactRelayQueryRenderer
      environment={
        RelayModernEnvironment {
          "__setNet": [Function],
          "_deferrableSelections": Array [],
          "_network": Object {
            "execute": [Function],
            "executeWithEvents": [Function],
          },
          "_publishQueue": RelayPublishQueue {
            "_appliedOptimisticUpdates": Array [],
            "_backup": Object {},
            "_handlerProvider": [Function],
            "_pendingBackupRebase": false,
            "_pendingData": Array [],
            "_pendingOptimisticUpdates": Array [],
            "_pendingUpdaters": Array [],
            "_store": RelayMarkSweepStore {
              "_gcEnabled": true,
              "_hasScheduledGC": false,
              "_index": 0,
              "_recordSource": Object {},
              "_roots": Array [],
              "_subscriptions": Array [],
              "_updatedRecordIDs": Object {},
            },
          },
          "_store": RelayMarkSweepStore {
            "_gcEnabled": true,
            "_hasScheduledGC": false,
            "_index": 0,
            "_recordSource": Object {},
            "_roots": Array [],
            "_subscriptions": Array [],
            "_updatedRecordIDs": Object {},
          },
          "configName": undefined,
          "unstable_internal": Object {
            "areEqualSelectors": [Function],
            "createFragmentSpecResolver": [Function],
            "createOperationSelector": [Function],
            "getDataIDsFromObject": [Function],
            "getFragment": [Function],
            "getRequest": [Function],
            "getSelector": [Function],
            "getSelectorList": [Function],
            "getSelectorsFromObject": [Function],
            "getVariablesFromObject": [Function],
          },
        }
      }
      query={[Function]}
      render={[Function]}
      variables={Object {}}
    />
  </Well>
  <div
    className="d-flex align-items-center mb-15 mt-15"
  >
    <Toggle
      checked={false}
      icons={true}
      onChange={[Function]}
    />
    <span>
      <strong>
        <FormattedMessage
          id="request-consent-to-receive-information-related-to-the-platform"
          values={Object {}}
        />
      </strong>
    </span>
  </div>
  <div
    className="d-flex align-items-center mb-15 mt-15"
  >
    <Toggle
      checked={false}
      icons={true}
      onChange={[Function]}
    />
    <span>
      <strong>
        <FormattedMessage
          id="registration.enable_consent_external_communication.title"
          values={Object {}}
        />
      </strong>
      <br />
      <FormattedMessage
        id="registration.enable_consent_external_communication.subtitle"
        values={
          Object {
            "link": <a
              className="external-link"
              href="http://localhost/admin/settings/settings.global/list"
            >
              <FormattedMessage
                id="proposal.admin.general"
                values={Object {}}
              />
            </a>,
          }
        }
      />
    </span>
  </div>
  <div
    className="d-flex align-items-center mb-15 mt-15"
  >
    <Toggle
      checked={false}
      disabled={true}
      icons={true}
      onChange={[Function]}
    />
    <FormattedMessage
      id="i-am-not-a-bot"
      values={Object {}}
    />
  </div>
  <h3>
    <FormattedMessage
      id="communication"
      values={Object {}}
    />
  </h3>
  <Connect(ReduxForm) />
</div>
`;
