// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ArgumentVoteButton /> renders viewer has not voted 1`] = `
<div>
  <ForwardRef(Relay(Connect(RequirementsModal)))
    handleClose={[Function]}
    show={false}
    step={
      Object {
        "$fragmentRefs": null,
        "requirements": Object {
          "viewerMeetsTheRequirements": true,
        },
      }
    }
  />
  <Connect(LoginOverlay)>
    <Button
      active={false}
      block={false}
      bsClass="btn"
      bsSize="xsmall"
      bsStyle="success"
      className="argument__btn--vote btn--outline"
      disabled={false}
      onClick={[Function]}
    >
      <span>
        <i
          className="cap cap-hand-like-2"
        />
         
        <FormattedMessage
          id="global.ok"
          values={Object {}}
        />
      </span>
      <ForwardRef(Relay(UnpublishedTooltip))
        publishable={null}
        target={[Function]}
      />
    </Button>
  </Connect(LoginOverlay)>
</div>
`;

exports[`<ArgumentVoteButton /> renders viewer has voted 1`] = `
<div>
  <ForwardRef(Relay(Connect(RequirementsModal)))
    handleClose={[Function]}
    show={false}
    step={
      Object {
        "$fragmentRefs": null,
        "requirements": Object {
          "viewerMeetsTheRequirements": true,
        },
      }
    }
  />
  <Connect(LoginOverlay)>
    <Button
      active={false}
      block={false}
      bsClass="btn"
      bsSize="xsmall"
      bsStyle="danger"
      className="argument__btn--vote"
      disabled={false}
      onClick={[Function]}
    >
      <span>
        <FormattedMessage
          id="global.cancel"
          values={Object {}}
        />
      </span>
      <ForwardRef(Relay(UnpublishedTooltip))
        publishable={
          Object {
            "$fragmentRefs": null,
            "id": "vote1",
          }
        }
        target={[Function]}
      />
    </Button>
  </Connect(LoginOverlay)>
</div>
`;

exports[`<ArgumentVoteButton /> renders when viewer is author 1`] = `
<div>
  <ForwardRef(Relay(Connect(RequirementsModal)))
    handleClose={[Function]}
    show={false}
    step={
      Object {
        "$fragmentRefs": null,
        "requirements": Object {
          "viewerMeetsTheRequirements": true,
        },
      }
    }
  />
  <Connect(LoginOverlay)>
    <Button
      active={false}
      block={false}
      bsClass="btn"
      bsSize="xsmall"
      bsStyle="success"
      className="argument__btn--vote btn--outline"
      disabled={true}
      onClick={[Function]}
    >
      <span>
        <i
          className="cap cap-hand-like-2"
        />
         
        <FormattedMessage
          id="global.ok"
          values={Object {}}
        />
      </span>
      <ForwardRef(Relay(UnpublishedTooltip))
        publishable={null}
        target={[Function]}
      />
    </Button>
  </Connect(LoginOverlay)>
</div>
`;
