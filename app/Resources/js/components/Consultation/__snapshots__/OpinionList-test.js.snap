// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<OpinionList /> renders correcty with pagination disabled 1`] = `
<Card
  className="anchor-offset"
  id="opinions--test17slug"
  style={
    Object {
      "border": 0,
    }
  }
>
  <Header
    bgColor="red"
    style={
      Object {
        "border": "1px solid #e3e3e3",
        "borderBottom": 0,
      }
    }
  >
    <div
      className="opinion d-flex align-items-center justify-content-between"
    >
      <span
        className="excerpt_dark"
      >
        <FormattedMessage
          id="global.opinionsCount"
          values={
            Object {
              "num": 10,
            }
          }
        />
      </span>
      <form
        className="form-inline"
      >
        <select
          aria-label="global.filter"
          className="form-control"
          defaultValue="positions"
          onBlur={[Function]}
          onChange={[Function]}
        >
          <option
            value="positions"
          >
            opinion.sort.positions
          </option>
          <option
            value="random"
          >
            opinion.sort.random
          </option>
          <option
            value="last"
          >
            opinion.sort.last
          </option>
          <option
            value="old"
          >
            opinion.sort.old
          </option>
          <option
            value="favorable"
          >
            opinion.sort.favorable
          </option>
          <option
            value="votes"
          >
            opinion.sort.votes
          </option>
          <option
            value="comments"
          >
            opinion.sort.comments
          </option>
        </select>
      </form>
      <ForwardRef(Relay(Connect(NewOpinionButton)))
        consultation={
          Object {
            "$fragmentRefs": null,
            "$refType": null,
            "id": "consultation1",
            "opinionCountShownBySection": 5,
          }
        }
        label="opinion.create.button"
        section={
          Object {
            "$fragmentRefs": null,
            "$refType": null,
            "color": "red",
            "contribuable": true,
            "contributionsCount": 10,
            "defaultOrderBy": "positions",
            "id": "id",
            "slug": "slug",
            "url": "https://capco.dev",
          }
        }
        style={
          Object {
            "margin": 0,
          }
        }
      />
    </div>
  </Header>
  <ListGroup
    style={
      Object {
        "margin": 0,
      }
    }
  >
    <ReactRelayQueryRenderer
      environment={"RelayModernEnvironment()"}
      query={[Function]}
      render={[Function]}
      variables={
        Object {
          "count": 5,
          "cursor": null,
          "orderBy": Object {
            "direction": "ASC",
            "field": "POSITIONS",
          },
          "sectionId": "id",
        }
      }
    />
    <ListGroupItem
      bsClass="list-group-item"
      className="text-center"
      listItem={false}
    >
      <a
        href="https://capco.dev"
        style={
          Object {
            "backgroundColor": "#fff",
            "display": "block",
          }
        }
      >
        <FormattedMessage
          id="opinion.show.all"
          values={Object {}}
        />
      </a>
    </ListGroupItem>
  </ListGroup>
</Card>
`;

exports[`<OpinionList /> renders correcty with pagination enabled 1`] = `
<Card
  className="anchor-offset"
  id="opinions--test17slug"
  style={
    Object {
      "border": 0,
    }
  }
>
  <Header
    bgColor="red"
    style={
      Object {
        "border": "1px solid #e3e3e3",
        "borderBottom": 0,
      }
    }
  >
    <div
      className="opinion d-flex align-items-center justify-content-between"
    >
      <span
        className="excerpt_dark"
      >
        <FormattedMessage
          id="global.opinionsCount"
          values={
            Object {
              "num": 10,
            }
          }
        />
      </span>
      <form
        className="form-inline"
      >
        <select
          aria-label="global.filter"
          className="form-control"
          defaultValue="positions"
          onBlur={[Function]}
          onChange={[Function]}
        >
          <option
            value="positions"
          >
            opinion.sort.positions
          </option>
          <option
            value="random"
          >
            opinion.sort.random
          </option>
          <option
            value="last"
          >
            opinion.sort.last
          </option>
          <option
            value="old"
          >
            opinion.sort.old
          </option>
          <option
            value="favorable"
          >
            opinion.sort.favorable
          </option>
          <option
            value="votes"
          >
            opinion.sort.votes
          </option>
          <option
            value="comments"
          >
            opinion.sort.comments
          </option>
        </select>
      </form>
      <ForwardRef(Relay(Connect(NewOpinionButton)))
        consultation={
          Object {
            "$fragmentRefs": null,
            "$refType": null,
            "id": "consultation1",
            "opinionCountShownBySection": 5,
          }
        }
        label="opinion.create.button"
        section={
          Object {
            "$fragmentRefs": null,
            "$refType": null,
            "color": "red",
            "contribuable": true,
            "contributionsCount": 10,
            "defaultOrderBy": "positions",
            "id": "id",
            "slug": "slug",
            "url": "https://capco.dev",
          }
        }
        style={
          Object {
            "margin": 0,
          }
        }
      />
    </div>
  </Header>
  <ListGroup
    style={
      Object {
        "margin": 0,
      }
    }
  >
    <ReactRelayQueryRenderer
      environment={"RelayModernEnvironment()"}
      query={[Function]}
      render={[Function]}
      variables={
        Object {
          "count": 5,
          "cursor": null,
          "orderBy": Object {
            "direction": "ASC",
            "field": "POSITIONS",
          },
          "sectionId": "id",
        }
      }
    />
  </ListGroup>
</Card>
`;

exports[`<OpinionList /> renders correcty with pagination enabled 2`] = `
<Card
  className="anchor-offset"
  id="opinions--test17slug"
  style={
    Object {
      "border": 0,
    }
  }
>
  <Header
    bgColor="red"
    style={
      Object {
        "border": "1px solid #e3e3e3",
        "borderBottom": 0,
      }
    }
  >
    <div
      className="opinion d-flex align-items-center justify-content-between"
    >
      <span
        className="excerpt_dark"
      >
        <FormattedMessage
          id="global.opinionsCount"
          values={
            Object {
              "num": 10,
            }
          }
        />
      </span>
      <form
        className="form-inline"
      >
        <select
          aria-label="global.filter"
          className="form-control"
          defaultValue="positions"
          onBlur={[Function]}
          onChange={[Function]}
        >
          <option
            value="positions"
          >
            opinion.sort.positions
          </option>
          <option
            value="random"
          >
            opinion.sort.random
          </option>
          <option
            value="last"
          >
            opinion.sort.last
          </option>
          <option
            value="old"
          >
            opinion.sort.old
          </option>
          <option
            value="favorable"
          >
            opinion.sort.favorable
          </option>
          <option
            value="votes"
          >
            opinion.sort.votes
          </option>
          <option
            value="comments"
          >
            opinion.sort.comments
          </option>
        </select>
      </form>
      <ForwardRef(Relay(Connect(NewOpinionButton)))
        consultation={
          Object {
            "$fragmentRefs": null,
            "$refType": null,
            "id": "consultation1",
            "opinionCountShownBySection": 5,
          }
        }
        label="opinion.create.button"
        section={
          Object {
            "$fragmentRefs": null,
            "$refType": null,
            "color": "red",
            "contribuable": true,
            "contributionsCount": 10,
            "defaultOrderBy": "positions",
            "id": "id",
            "slug": "slug",
            "url": "https://capco.dev",
          }
        }
        style={
          Object {
            "margin": 0,
          }
        }
      />
    </div>
  </Header>
  <ListGroup
    style={
      Object {
        "margin": 0,
      }
    }
  >
    <ReactRelayQueryRenderer
      environment={"RelayModernEnvironment()"}
      query={[Function]}
      render={[Function]}
      variables={
        Object {
          "count": 5,
          "cursor": null,
          "orderBy": Object {
            "direction": "ASC",
            "field": "RANDOM",
          },
          "sectionId": "id",
        }
      }
    />
  </ListGroup>
</Card>
`;

exports[`<OpinionList /> renders correcty with pagination enabled 3`] = `
<Card
  className="anchor-offset"
  id="opinions--test17slug"
  style={
    Object {
      "border": 0,
    }
  }
>
  <Header
    bgColor="red"
    style={
      Object {
        "border": "1px solid #e3e3e3",
        "borderBottom": 0,
      }
    }
  >
    <div
      className="opinion d-flex align-items-center justify-content-between"
    >
      <span
        className="excerpt_dark"
      >
        <FormattedMessage
          id="global.opinionsCount"
          values={
            Object {
              "num": 10,
            }
          }
        />
      </span>
      <form
        className="form-inline"
      >
        <select
          aria-label="global.filter"
          className="form-control"
          defaultValue="positions"
          onBlur={[Function]}
          onChange={[Function]}
        >
          <option
            value="positions"
          >
            opinion.sort.positions
          </option>
          <option
            value="random"
          >
            opinion.sort.random
          </option>
          <option
            value="last"
          >
            opinion.sort.last
          </option>
          <option
            value="old"
          >
            opinion.sort.old
          </option>
          <option
            value="favorable"
          >
            opinion.sort.favorable
          </option>
          <option
            value="votes"
          >
            opinion.sort.votes
          </option>
          <option
            value="comments"
          >
            opinion.sort.comments
          </option>
        </select>
      </form>
      <ForwardRef(Relay(Connect(NewOpinionButton)))
        consultation={
          Object {
            "$fragmentRefs": null,
            "$refType": null,
            "id": "consultation1",
            "opinionCountShownBySection": 5,
          }
        }
        label="opinion.create.button"
        section={
          Object {
            "$fragmentRefs": null,
            "$refType": null,
            "color": "red",
            "contribuable": true,
            "contributionsCount": 10,
            "defaultOrderBy": "positions",
            "id": "id",
            "slug": "slug",
            "url": "https://capco.dev",
          }
        }
        style={
          Object {
            "margin": 0,
          }
        }
      />
    </div>
  </Header>
  <ListGroup
    style={
      Object {
        "margin": 0,
      }
    }
  >
    <ReactRelayQueryRenderer
      environment={"RelayModernEnvironment()"}
      query={[Function]}
      render={[Function]}
      variables={
        Object {
          "count": 5,
          "cursor": null,
          "orderBy": Object {
            "direction": "DESC",
            "field": "PUBLISHED_AT",
          },
          "sectionId": "id",
        }
      }
    />
  </ListGroup>
</Card>
`;

exports[`<OpinionList /> renders correcty with pagination enabled 4`] = `
<Card
  className="anchor-offset"
  id="opinions--test17slug"
  style={
    Object {
      "border": 0,
    }
  }
>
  <Header
    bgColor="red"
    style={
      Object {
        "border": "1px solid #e3e3e3",
        "borderBottom": 0,
      }
    }
  >
    <div
      className="opinion d-flex align-items-center justify-content-between"
    >
      <span
        className="excerpt_dark"
      >
        <FormattedMessage
          id="global.opinionsCount"
          values={
            Object {
              "num": 10,
            }
          }
        />
      </span>
      <form
        className="form-inline"
      >
        <select
          aria-label="global.filter"
          className="form-control"
          defaultValue="positions"
          onBlur={[Function]}
          onChange={[Function]}
        >
          <option
            value="positions"
          >
            opinion.sort.positions
          </option>
          <option
            value="random"
          >
            opinion.sort.random
          </option>
          <option
            value="last"
          >
            opinion.sort.last
          </option>
          <option
            value="old"
          >
            opinion.sort.old
          </option>
          <option
            value="favorable"
          >
            opinion.sort.favorable
          </option>
          <option
            value="votes"
          >
            opinion.sort.votes
          </option>
          <option
            value="comments"
          >
            opinion.sort.comments
          </option>
        </select>
      </form>
      <ForwardRef(Relay(Connect(NewOpinionButton)))
        consultation={
          Object {
            "$fragmentRefs": null,
            "$refType": null,
            "id": "consultation1",
            "opinionCountShownBySection": 5,
          }
        }
        label="opinion.create.button"
        section={
          Object {
            "$fragmentRefs": null,
            "$refType": null,
            "color": "red",
            "contribuable": true,
            "contributionsCount": 10,
            "defaultOrderBy": "positions",
            "id": "id",
            "slug": "slug",
            "url": "https://capco.dev",
          }
        }
        style={
          Object {
            "margin": 0,
          }
        }
      />
    </div>
  </Header>
  <ListGroup
    style={
      Object {
        "margin": 0,
      }
    }
  >
    <ReactRelayQueryRenderer
      environment={"RelayModernEnvironment()"}
      query={[Function]}
      render={[Function]}
      variables={
        Object {
          "count": 5,
          "cursor": null,
          "orderBy": Object {
            "direction": "ASC",
            "field": "PUBLISHED_AT",
          },
          "sectionId": "id",
        }
      }
    />
  </ListGroup>
</Card>
`;

exports[`<OpinionList /> renders correcty with pagination enabled 5`] = `
<Card
  className="anchor-offset"
  id="opinions--test17slug"
  style={
    Object {
      "border": 0,
    }
  }
>
  <Header
    bgColor="red"
    style={
      Object {
        "border": "1px solid #e3e3e3",
        "borderBottom": 0,
      }
    }
  >
    <div
      className="opinion d-flex align-items-center justify-content-between"
    >
      <span
        className="excerpt_dark"
      >
        <FormattedMessage
          id="global.opinionsCount"
          values={
            Object {
              "num": 10,
            }
          }
        />
      </span>
      <form
        className="form-inline"
      >
        <select
          aria-label="global.filter"
          className="form-control"
          defaultValue="positions"
          onBlur={[Function]}
          onChange={[Function]}
        >
          <option
            value="positions"
          >
            opinion.sort.positions
          </option>
          <option
            value="random"
          >
            opinion.sort.random
          </option>
          <option
            value="last"
          >
            opinion.sort.last
          </option>
          <option
            value="old"
          >
            opinion.sort.old
          </option>
          <option
            value="favorable"
          >
            opinion.sort.favorable
          </option>
          <option
            value="votes"
          >
            opinion.sort.votes
          </option>
          <option
            value="comments"
          >
            opinion.sort.comments
          </option>
        </select>
      </form>
      <ForwardRef(Relay(Connect(NewOpinionButton)))
        consultation={
          Object {
            "$fragmentRefs": null,
            "$refType": null,
            "id": "consultation1",
            "opinionCountShownBySection": 5,
          }
        }
        label="opinion.create.button"
        section={
          Object {
            "$fragmentRefs": null,
            "$refType": null,
            "color": "red",
            "contribuable": true,
            "contributionsCount": 10,
            "defaultOrderBy": "positions",
            "id": "id",
            "slug": "slug",
            "url": "https://capco.dev",
          }
        }
        style={
          Object {
            "margin": 0,
          }
        }
      />
    </div>
  </Header>
  <ListGroup
    style={
      Object {
        "margin": 0,
      }
    }
  >
    <ReactRelayQueryRenderer
      environment={"RelayModernEnvironment()"}
      query={[Function]}
      render={[Function]}
      variables={
        Object {
          "count": 5,
          "cursor": null,
          "orderBy": Object {
            "direction": "DESC",
            "field": "VOTES_OK",
          },
          "sectionId": "id",
        }
      }
    />
  </ListGroup>
</Card>
`;

exports[`<OpinionList /> renders correcty with pagination enabled 6`] = `
<Card
  className="anchor-offset"
  id="opinions--test17slug"
  style={
    Object {
      "border": 0,
    }
  }
>
  <Header
    bgColor="red"
    style={
      Object {
        "border": "1px solid #e3e3e3",
        "borderBottom": 0,
      }
    }
  >
    <div
      className="opinion d-flex align-items-center justify-content-between"
    >
      <span
        className="excerpt_dark"
      >
        <FormattedMessage
          id="global.opinionsCount"
          values={
            Object {
              "num": 10,
            }
          }
        />
      </span>
      <form
        className="form-inline"
      >
        <select
          aria-label="global.filter"
          className="form-control"
          defaultValue="positions"
          onBlur={[Function]}
          onChange={[Function]}
        >
          <option
            value="positions"
          >
            opinion.sort.positions
          </option>
          <option
            value="random"
          >
            opinion.sort.random
          </option>
          <option
            value="last"
          >
            opinion.sort.last
          </option>
          <option
            value="old"
          >
            opinion.sort.old
          </option>
          <option
            value="favorable"
          >
            opinion.sort.favorable
          </option>
          <option
            value="votes"
          >
            opinion.sort.votes
          </option>
          <option
            value="comments"
          >
            opinion.sort.comments
          </option>
        </select>
      </form>
      <ForwardRef(Relay(Connect(NewOpinionButton)))
        consultation={
          Object {
            "$fragmentRefs": null,
            "$refType": null,
            "id": "consultation1",
            "opinionCountShownBySection": 5,
          }
        }
        label="opinion.create.button"
        section={
          Object {
            "$fragmentRefs": null,
            "$refType": null,
            "color": "red",
            "contribuable": true,
            "contributionsCount": 10,
            "defaultOrderBy": "positions",
            "id": "id",
            "slug": "slug",
            "url": "https://capco.dev",
          }
        }
        style={
          Object {
            "margin": 0,
          }
        }
      />
    </div>
  </Header>
  <ListGroup
    style={
      Object {
        "margin": 0,
      }
    }
  >
    <ReactRelayQueryRenderer
      environment={"RelayModernEnvironment()"}
      query={[Function]}
      render={[Function]}
      variables={
        Object {
          "count": 5,
          "cursor": null,
          "orderBy": Object {
            "direction": "DESC",
            "field": "VOTES",
          },
          "sectionId": "id",
        }
      }
    />
  </ListGroup>
</Card>
`;

exports[`<OpinionList /> renders correcty with pagination enabled 7`] = `
<Card
  className="anchor-offset"
  id="opinions--test17slug"
  style={
    Object {
      "border": 0,
    }
  }
>
  <Header
    bgColor="red"
    style={
      Object {
        "border": "1px solid #e3e3e3",
        "borderBottom": 0,
      }
    }
  >
    <div
      className="opinion d-flex align-items-center justify-content-between"
    >
      <span
        className="excerpt_dark"
      >
        <FormattedMessage
          id="global.opinionsCount"
          values={
            Object {
              "num": 10,
            }
          }
        />
      </span>
      <form
        className="form-inline"
      >
        <select
          aria-label="global.filter"
          className="form-control"
          defaultValue="positions"
          onBlur={[Function]}
          onChange={[Function]}
        >
          <option
            value="positions"
          >
            opinion.sort.positions
          </option>
          <option
            value="random"
          >
            opinion.sort.random
          </option>
          <option
            value="last"
          >
            opinion.sort.last
          </option>
          <option
            value="old"
          >
            opinion.sort.old
          </option>
          <option
            value="favorable"
          >
            opinion.sort.favorable
          </option>
          <option
            value="votes"
          >
            opinion.sort.votes
          </option>
          <option
            value="comments"
          >
            opinion.sort.comments
          </option>
        </select>
      </form>
      <ForwardRef(Relay(Connect(NewOpinionButton)))
        consultation={
          Object {
            "$fragmentRefs": null,
            "$refType": null,
            "id": "consultation1",
            "opinionCountShownBySection": 5,
          }
        }
        label="opinion.create.button"
        section={
          Object {
            "$fragmentRefs": null,
            "$refType": null,
            "color": "red",
            "contribuable": true,
            "contributionsCount": 10,
            "defaultOrderBy": "positions",
            "id": "id",
            "slug": "slug",
            "url": "https://capco.dev",
          }
        }
        style={
          Object {
            "margin": 0,
          }
        }
      />
    </div>
  </Header>
  <ListGroup
    style={
      Object {
        "margin": 0,
      }
    }
  >
    <ReactRelayQueryRenderer
      environment={"RelayModernEnvironment()"}
      query={[Function]}
      render={[Function]}
      variables={
        Object {
          "count": 5,
          "cursor": null,
          "orderBy": Object {
            "direction": "DESC",
            "field": "COMMENTS",
          },
          "sectionId": "id",
        }
      }
    />
  </ListGroup>
</Card>
`;
