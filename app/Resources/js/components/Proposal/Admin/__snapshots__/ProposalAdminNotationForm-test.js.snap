// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ProposalAdminNotationForm /> render correctly 1`] = `
<div
  className="box box-primary container"
>
  <div
    className="box-content box-content__notation-form"
  >
    <form
      onSubmit={[Function]}
    >
      <div>
        <div
          className="mb-40"
        >
          <div
            className="box-header"
          >
            <h3
              className="box-title"
            >
              <FormattedMessage
                id="Analystes"
                values={Object {}}
              />
            </h3>
            <a
              className="pull-right link"
              href="https://aide.cap-collectif.com/article/86-editer-une-proposition-dune-etape-de-depot#contenu"
              rel="noopener noreferrer"
              target="_blank"
            >
              <i
                className="fa fa-info-circle"
              />
               Aide
            </a>
          </div>
          <Field
            clearable={false}
            component={[Function]}
            id="evaluers"
            inputClassName="fake-inputClassName"
            label="Groupes"
            labelClassName="control-label"
            loadOptions={[Function]}
            multi={true}
            name="evaluers"
            placeholder="Aucun analyste"
          />
          <div
            className="box-header"
          >
            <h3
              className="box-title"
            >
              <FormattedMessage
                id="Questionnaire"
                values={Object {}}
              />
            </h3>
          </div>
          <Field
            addonAfter={
              <Glyphicon
                bsClass="glyphicon"
                glyph="euro"
              />
            }
            component={[Function]}
            id="proposal_estimation"
            label={
              <FormattedMessage
                id="proposal.estimation"
                values={Object {}}
              />
            }
            name="estimation"
            normalize={[Function]}
            type="number"
          />
          <Field
            clearable={false}
            component={[Function]}
            id="likers"
            inputClassName="fake-inputClassName"
            label="Coup(s) de coeur"
            labelClassName="control-label"
            loadOptions={[Function]}
            multi={true}
            name="likers"
            placeholder="SÃ©lectionnez un coup de coeur"
          />
        </div>
        <FieldArray
          change={[Function]}
          component={[Function]}
          evaluationForm={null}
          intl={
            Object {
              "formatDate": [Function],
              "formatHTMLMessage": [Function],
              "formatMessage": [Function],
              "formatNumber": [Function],
              "formatPlural": [Function],
              "formatRelative": [Function],
              "formatTime": [Function],
              "now": [Function],
            }
          }
          name="responses"
          responses={Array []}
        />
        <ButtonToolbar
          bsClass="btn-toolbar"
          className="box-content__toolbar"
          style={
            Object {
              "marginBottom": 10,
            }
          }
        >
          <Button
            active={false}
            block={false}
            bsClass="btn"
            bsStyle="primary"
            disabled={false}
            type="submit"
          >
            <FormattedMessage
              id="global.save"
              values={Object {}}
            />
          </Button>
          <AlertAdminForm
            invalid={false}
            submitFailed={false}
            submitSucceeded={false}
            submitting={false}
            valid={false}
          />
        </ButtonToolbar>
      </div>
    </form>
  </div>
</div>
`;
