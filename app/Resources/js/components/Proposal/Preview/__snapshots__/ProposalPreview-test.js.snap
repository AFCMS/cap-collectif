// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ProposalPreview /> should render a proposal preview votable 1`] = `
<Col
  bsClass="col"
  componentClass="li"
  lg={3}
  md={4}
  sm={6}
  xs={12}
>
  <CardContainer
    className="bg-vip proposal-preview"
    id="proposal-undefined"
  >
    <ProposalPreviewHeader
      proposal={
        Object {
          "author": Object {
            "vip": true,
          },
          "category": Object {},
          "commentsCount": 5,
          "referer": "http://capco.test",
          "selections": Array [],
          "viewerCanSeeEvaluation": true,
          "votableStepId": "step2",
          "votesByStepId": Object {
            "collectstep1": Array [],
            "selectionstep1": Array [],
          },
          "votesCountByStepId": Object {
            "2": 0,
          },
        }
      }
    />
    <Connect(ProposalPreviewBody)
      proposal={
        Object {
          "author": Object {
            "vip": true,
          },
          "category": Object {},
          "commentsCount": 5,
          "referer": "http://capco.test",
          "selections": Array [],
          "viewerCanSeeEvaluation": true,
          "votableStepId": "step2",
          "votesByStepId": Object {
            "collectstep1": Array [],
            "selectionstep1": Array [],
          },
          "votesCountByStepId": Object {
            "2": 0,
          },
        }
        showNullEstimation={true}
        showThemes={true}
      />
      <div
        className="proposal__buttons"
      >
        <ProposalPreviewVote
          proposal={
            Object {
              "author": Object {
                "vip": true,
              },
              "category": Object {},
              "commentsCount": 5,
              "referer": "http://capco.test",
              "selections": Array [],
              "viewerCanSeeEvaluation": true,
              "votableStepId": "step2",
              "votesByStepId": Object {
                "collectstep1": Array [],
                "selectionstep1": Array [],
              },
              "votesCountByStepId": Object {
                "2": 0,
              },
            }
          }
        />
        <ReactRelayQueryRenderer
          environment={
            RelayModernEnvironment {
              "__setNet": [Function],
              "_deferrableSelections": Array [],
              "_network": Object {
                "execute": [Function],
              },
              "_publishQueue": RelayPublishQueue {
                "_appliedOptimisticUpdates": Array [],
                "_backup": Object {},
                "_handlerProvider": [Function],
                "_pendingBackupRebase": false,
                "_pendingData": Array [],
                "_pendingOptimisticUpdates": Array [],
                "_pendingUpdaters": Array [],
                "_store": RelayMarkSweepStore {
                  "_gcEnabled": true,
                  "_hasScheduledGC": false,
                  "_index": 0,
                  "_recordSource": Object {},
                  "_roots": Array [],
                  "_subscriptions": Array [],
                  "_updatedRecordIDs": Object {},
                },
              },
              "_store": RelayMarkSweepStore {
                "_gcEnabled": true,
                "_hasScheduledGC": false,
                "_index": 0,
                "_recordSource": Object {},
                "_roots": Array [],
                "_subscriptions": Array [],
                "_updatedRecordIDs": Object {},
              },
              "configName": undefined,
              "unstable_internal": Object {
                "areEqualSelectors": [Function],
                "createFragmentSpecResolver": [Function],
                "createOperationSelector": [Function],
                "getDataIDsFromObject": [Function],
                "getFragment": [Function],
                "getRequest": [Function],
                "getSelector": [Function],
                "getSelectorList": [Function],
                "getSelectorsFromObject": [Function],
                "getVariablesFromObject": [Function],
              },
            }
          }
          query={[Function]}
          render={[Function]}
          variables={
            Object {
              "isAuthenticated": true,
              "proposalId": undefined,
            }
          }
        />
      </div>
    </div>
    <ProposalPreviewFooter
      proposal={
        Object {
          "author": Object {
            "vip": true,
          },
          "category": Object {},
          "commentsCount": 5,
          "referer": "http://capco.test",
          "selections": Array [],
          "viewerCanSeeEvaluation": true,
          "votableStepId": "step2",
          "votesByStepId": Object {
            "collectstep1": Array [],
            "selectionstep1": Array [],
          },
          "votesCountByStepId": Object {
            "2": 0,
          },
        }
      }
      showComments={true}
      showVotes={true}
      stepId="step2"
    />
    <ProposalStatus
      proposal={
        Object {
          "author": Object {
            "vip": true,
          },
          "category": Object {},
          "commentsCount": 5,
          "referer": "http://capco.test",
          "selections": Array [],
          "viewerCanSeeEvaluation": true,
          "votableStepId": "step2",
          "votesByStepId": Object {
            "collectstep1": Array [],
            "selectionstep1": Array [],
          },
          "votesCountByStepId": Object {
            "2": 0,
          },
        }
      }
      stepId="step2"
    />
  </CardContainer>
</Col>
`;

exports[`<ProposalPreview /> should render a proposal preview with different step id and vip false 1`] = `
<Col
  bsClass="col"
  componentClass="li"
  lg={3}
  md={4}
  sm={6}
  xs={12}
>
  <CardContainer
    className="proposal-preview"
    id="proposal-undefined"
  >
    <ProposalPreviewHeader
      proposal={
        Object {
          "author": Object {
            "vip": false,
          },
          "category": Object {},
          "commentsCount": 5,
          "referer": "http://capco.test",
          "selections": Array [],
          "viewerCanSeeEvaluation": true,
          "votableStepId": "step3",
          "votesByStepId": Object {
            "collectstep1": Array [],
            "selectionstep1": Array [],
          },
          "votesCountByStepId": Object {
            "2": 0,
          },
        }
      }
    />
    <Connect(ProposalPreviewBody)
      proposal={
        Object {
          "author": Object {
            "vip": false,
          },
          "category": Object {},
          "commentsCount": 5,
          "referer": "http://capco.test",
          "selections": Array [],
          "viewerCanSeeEvaluation": true,
          "votableStepId": "step3",
          "votesByStepId": Object {
            "collectstep1": Array [],
            "selectionstep1": Array [],
          },
          "votesCountByStepId": Object {
            "2": 0,
          },
        }
        showNullEstimation={true}
        showThemes={true}
      />
      <div
        className="proposal__buttons"
      >
        <ProposalPreviewVote
          proposal={
            Object {
              "author": Object {
                "vip": false,
              },
              "category": Object {},
              "commentsCount": 5,
              "referer": "http://capco.test",
              "selections": Array [],
              "viewerCanSeeEvaluation": true,
              "votableStepId": "step3",
              "votesByStepId": Object {
                "collectstep1": Array [],
                "selectionstep1": Array [],
              },
              "votesCountByStepId": Object {
                "2": 0,
              },
            }
          }
        />
        <ReactRelayQueryRenderer
          environment={
            RelayModernEnvironment {
              "__setNet": [Function],
              "_deferrableSelections": Array [],
              "_network": Object {
                "execute": [Function],
              },
              "_publishQueue": RelayPublishQueue {
                "_appliedOptimisticUpdates": Array [],
                "_backup": Object {},
                "_handlerProvider": [Function],
                "_pendingBackupRebase": false,
                "_pendingData": Array [],
                "_pendingOptimisticUpdates": Array [],
                "_pendingUpdaters": Array [],
                "_store": RelayMarkSweepStore {
                  "_gcEnabled": true,
                  "_hasScheduledGC": false,
                  "_index": 0,
                  "_recordSource": Object {},
                  "_roots": Array [],
                  "_subscriptions": Array [],
                  "_updatedRecordIDs": Object {},
                },
              },
              "_store": RelayMarkSweepStore {
                "_gcEnabled": true,
                "_hasScheduledGC": false,
                "_index": 0,
                "_recordSource": Object {},
                "_roots": Array [],
                "_subscriptions": Array [],
                "_updatedRecordIDs": Object {},
              },
              "configName": undefined,
              "unstable_internal": Object {
                "areEqualSelectors": [Function],
                "createFragmentSpecResolver": [Function],
                "createOperationSelector": [Function],
                "getDataIDsFromObject": [Function],
                "getFragment": [Function],
                "getRequest": [Function],
                "getSelector": [Function],
                "getSelectorList": [Function],
                "getSelectorsFromObject": [Function],
                "getVariablesFromObject": [Function],
              },
            }
          }
          query={[Function]}
          render={[Function]}
          variables={
            Object {
              "isAuthenticated": true,
              "proposalId": undefined,
            }
          }
        />
      </div>
    </div>
    <ProposalPreviewFooter
      proposal={
        Object {
          "author": Object {
            "vip": false,
          },
          "category": Object {},
          "commentsCount": 5,
          "referer": "http://capco.test",
          "selections": Array [],
          "viewerCanSeeEvaluation": true,
          "votableStepId": "step3",
          "votesByStepId": Object {
            "collectstep1": Array [],
            "selectionstep1": Array [],
          },
          "votesCountByStepId": Object {
            "2": 0,
          },
        }
      }
      showComments={true}
      showVotes={true}
      stepId="step3"
    />
    <ProposalStatus
      proposal={
        Object {
          "author": Object {
            "vip": false,
          },
          "category": Object {},
          "commentsCount": 5,
          "referer": "http://capco.test",
          "selections": Array [],
          "viewerCanSeeEvaluation": true,
          "votableStepId": "step3",
          "votesByStepId": Object {
            "collectstep1": Array [],
            "selectionstep1": Array [],
          },
          "votesCountByStepId": Object {
            "2": 0,
          },
        }
      }
      stepId="step3"
    />
  </CardContainer>
</Col>
`;
