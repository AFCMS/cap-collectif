// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ProposalVoteModal /> should render correctly 1`] = `
<Modal
  animation={false}
  aria-labelledby="contained-modal-title-lg"
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  bsSize="large"
  dialogComponentClass={[Function]}
  enforceFocus={false}
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onHide={[Function]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  role="dialog"
  show={true}
>
  <ModalHeader
    bsClass="modal-header"
    closeButton={true}
    closeLabel="Close"
  >
    <ModalTitle
      bsClass="modal-title"
      componentClass="h4"
      id="contained-modal-title-lg"
    >
      <FormattedMessage
        id="proposal.vote.modal.title"
        values={Object {}}
      />
    </ModalTitle>
  </ModalHeader>
  <ModalBody
    bsClass="modal-body"
    componentClass="div"
  >
    <Uncontrolled(Panel)
      bsStyle="primary"
      id="required-conditions"
    >
      <PanelHeading
        bsClass="panel"
        componentClass="div"
      >
        <FormattedMessage
          id="requirements"
          values={Object {}}
        />
         
      </PanelHeading>
      <PanelBody
        bsClass="panel"
        collapsible={false}
      >
        <p>
          We need to collect
        </p>
        <ForwardRef(Relay(Connect(ReduxForm)))
          step={
            Object {
              "$fragmentRefs": null,
              "$refType": null,
              "form": Object {
                "isProposalForm": true,
              },
              "id": "step1",
              "requirements": Object {
                "reason": "We need to collect",
                "totalCount": 3,
                "viewerMeetsTheRequirements": false,
              },
              "viewerVotes": Object {
                "$fragmentRefs": null,
                "edges": Array [],
                "totalCount": 0,
              },
              "votesHelpText": "Help",
              "votesRanking": false,
            }
          }
        />
      </PanelBody>
    </Uncontrolled(Panel)>
    <h3
      className="d-ib mr-10 mb-10"
    >
      <FormattedMessage
        id="proposal.vote.modal.title"
        values={Object {}}
      />
    </h3>
    <h4
      className="excerpt d-ib mt-15"
    >
      <FormattedMessage
        id="project.votes.nb"
        values={
          Object {
            "num": 0,
          }
        }
      />
    </h4>
    <ForwardRef(Relay(Connect(InjectIntl(ReduxForm))))
      activeKeyboard={[Function]}
      disabledKeyboard={[Function]}
      onSubmit={[Function]}
      step={
        Object {
          "$fragmentRefs": null,
          "$refType": null,
          "form": Object {
            "isProposalForm": true,
          },
          "id": "step1",
          "requirements": Object {
            "reason": "We need to collect",
            "totalCount": 3,
            "viewerMeetsTheRequirements": false,
          },
          "viewerVotes": Object {
            "$fragmentRefs": null,
            "edges": Array [],
            "totalCount": 0,
          },
          "votesHelpText": "Help",
          "votesRanking": false,
        }
      }
      votes={
        Object {
          "$fragmentRefs": null,
          "edges": Array [],
          "totalCount": 0,
        }
      }
    />
    <div
      className="well mb-0 mt-15"
    >
      <p>
        <b>
          <FormattedMessage
            id="admin.fields.step.votesHelpText"
            values={Object {}}
          />
        </b>
      </p>
      <WYSIWYGRender
        value="Help"
      />
    </div>
  </ModalBody>
  <ModalFooter
    bsClass="modal-footer"
    componentClass="div"
  >
    <CloseButton
      className="pull-right"
      label="global.cancel"
      onClose={[Function]}
    />
    <Connect(SubmitButton)
      bsStyle="success"
      disabled={false}
      id="confirm-proposal-vote"
      isSubmitting={false}
      label="global.validate"
      onSubmit={[Function]}
      style={
        Object {
          "marginLeft": "10px",
        }
      }
    />
  </ModalFooter>
</Modal>
`;

exports[`<ProposalVoteModal /> should render correctly as Question 1`] = `
<Modal
  animation={false}
  aria-labelledby="contained-modal-title-lg"
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  bsSize="large"
  dialogComponentClass={[Function]}
  enforceFocus={false}
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onHide={[Function]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  role="dialog"
  show={true}
>
  <ModalHeader
    bsClass="modal-header"
    closeButton={true}
    closeLabel="Close"
  >
    <ModalTitle
      bsClass="modal-title"
      componentClass="h4"
      id="contained-modal-title-lg"
    >
      <FormattedMessage
        id="proposal.vote.modal.title"
        values={Object {}}
      />
    </ModalTitle>
  </ModalHeader>
  <ModalBody
    bsClass="modal-body"
    componentClass="div"
  >
    <Uncontrolled(Panel)
      bsStyle="primary"
      id="required-conditions"
    >
      <PanelHeading
        bsClass="panel"
        componentClass="div"
      >
        <FormattedMessage
          id="requirements"
          values={Object {}}
        />
         
      </PanelHeading>
      <PanelBody
        bsClass="panel"
        collapsible={false}
      >
        <p>
          We need to collect
        </p>
        <ForwardRef(Relay(Connect(ReduxForm)))
          step={
            Object {
              "$fragmentRefs": null,
              "$refType": null,
              "form": Object {
                "isProposalForm": false,
              },
              "id": "step1",
              "requirements": Object {
                "reason": "We need to collect",
                "totalCount": 3,
                "viewerMeetsTheRequirements": false,
              },
              "viewerVotes": Object {
                "$fragmentRefs": null,
                "edges": Array [],
                "totalCount": 0,
              },
              "votesHelpText": "Help",
              "votesRanking": false,
            }
          }
        />
      </PanelBody>
    </Uncontrolled(Panel)>
    <h3
      className="d-ib mr-10 mb-10"
    >
      <FormattedMessage
        id="proposal.vote.modal.title"
        values={Object {}}
      />
    </h3>
    <h4
      className="excerpt d-ib mt-15"
    >
      <FormattedMessage
        id="count-questions"
        values={
          Object {
            "num": 0,
          }
        }
      />
    </h4>
    <ForwardRef(Relay(Connect(InjectIntl(ReduxForm))))
      activeKeyboard={[Function]}
      disabledKeyboard={[Function]}
      onSubmit={[Function]}
      step={
        Object {
          "$fragmentRefs": null,
          "$refType": null,
          "form": Object {
            "isProposalForm": false,
          },
          "id": "step1",
          "requirements": Object {
            "reason": "We need to collect",
            "totalCount": 3,
            "viewerMeetsTheRequirements": false,
          },
          "viewerVotes": Object {
            "$fragmentRefs": null,
            "edges": Array [],
            "totalCount": 0,
          },
          "votesHelpText": "Help",
          "votesRanking": false,
        }
      }
      votes={
        Object {
          "$fragmentRefs": null,
          "edges": Array [],
          "totalCount": 0,
        }
      }
    />
    <div
      className="well mb-0 mt-15"
    >
      <p>
        <b>
          <FormattedMessage
            id="admin.fields.step.votesHelpText"
            values={Object {}}
          />
        </b>
      </p>
      <WYSIWYGRender
        value="Help"
      />
    </div>
  </ModalBody>
  <ModalFooter
    bsClass="modal-footer"
    componentClass="div"
  >
    <CloseButton
      className="pull-right"
      label="global.cancel"
      onClose={[Function]}
    />
    <Connect(SubmitButton)
      bsStyle="success"
      disabled={false}
      id="confirm-proposal-vote"
      isSubmitting={false}
      label="global.validate"
      onSubmit={[Function]}
      style={
        Object {
          "marginLeft": "10px",
        }
      }
    />
  </ModalFooter>
</Modal>
`;
