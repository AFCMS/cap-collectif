// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ProposalFormAdminEvaluationForm /> render correctly 1`] = `
<div
  className="box box-primary container"
>
  <div
    className="box-header"
  >
    <h3
      className="box-title"
      style={
        Object {
          "fontSize": 22,
          "padding": 0,
          "paddingBottom": 30,
          "paddingTop": 10,
        }
      }
    >
      <FormattedMessage
        id="proposal_form.evaluation"
        values={Object {}}
      />
    </h3>
    <a
      className="pull-right link"
      href="https://aide.cap-collectif.com/article/51-creer-un-formulaire-de-depot"
      rel="noopener noreferrer"
    >
      <i
        className="fa fa-info-circle"
      />
       Aide
    </a>
  </div>
  <form
    onSubmit={[Function]}
  >
    <ReactRelayQueryRenderer
      environment={
        RelayModernEnvironment {
          "_network": Object {
            "fetch": [Function],
            "request": [Function],
            "requestStream": [Function],
          },
          "_publishQueue": RelayPublishQueue {
            "_appliedOptimisticUpdates": Array [],
            "_backup": Object {},
            "_handlerProvider": [Function],
            "_pendingBackupRebase": false,
            "_pendingOptimisticUpdates": Array [],
            "_pendingPayloads": Array [],
            "_pendingUpdaters": Array [],
            "_store": RelayMarkSweepStore {
              "_hasScheduledGC": false,
              "_index": 0,
              "_recordSource": Object {},
              "_roots": Array [],
              "_subscriptions": Array [],
              "_updatedRecordIDs": Object {},
            },
          },
          "_store": RelayMarkSweepStore {
            "_hasScheduledGC": false,
            "_index": 0,
            "_recordSource": Object {},
            "_roots": Array [],
            "_subscriptions": Array [],
            "_updatedRecordIDs": Object {},
          },
          "setNet": [Function],
          "unstable_internal": Object {
            "areEqualSelectors": [Function],
            "createFragmentSpecResolver": [Function],
            "createOperationSelector": [Function],
            "getDataIDsFromObject": [Function],
            "getFragment": [Function],
            "getOperation": [Function],
            "getSelector": [Function],
            "getSelectorList": [Function],
            "getSelectorsFromObject": [Function],
            "getVariablesFromObject": [Function],
          },
        }
      }
      query={[Function]}
      render={[Function]}
    />
    <ButtonToolbar
      bsClass="btn-toolbar"
      style={
        Object {
          "marginBottom": 10,
        }
      }
    >
      <Button
        active={false}
        block={false}
        bsClass="btn"
        bsStyle="primary"
        disabled={false}
        type="submit"
      >
        <FormattedMessage
          id="global.save"
          values={Object {}}
        />
      </Button>
      <Button
        active={false}
        block={false}
        bsClass="btn"
        bsStyle="danger"
        disabled={true}
      >
        <FormattedMessage
          id="global.delete"
          values={Object {}}
        />
      </Button>
    </ButtonToolbar>
  </form>
</div>
`;
