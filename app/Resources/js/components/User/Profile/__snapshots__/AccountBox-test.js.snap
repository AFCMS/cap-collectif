// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<AccountBox /> should render a disabled button when the form is invalid 1`] = `
<Panel
  bsClass="panel"
  bsStyle="default"
  defaultExpanded={false}
>
  <h2
    className="page-header"
  >
    <FormattedMessage
      id="profile.account.title"
      values={Object {}}
    />
  </h2>
  <Connect(ReduxForm) />
  <Connect(ConfirmPasswordModal) />
  <div
    style={
      Object {
        "paddingLeft": 15,
      }
    }
  >
    <Button
      active={false}
      block={false}
      bsClass="btn"
      bsStyle="primary"
      className="col-sm-offset-5"
      disabled={true}
      id="edit-account-profile-button"
      onClick={[Function]}
    >
      <FormattedMessage
        id="global.save_modifications"
        values={Object {}}
      />
    </Button>
    <Button
      active={false}
      block={false}
      bsClass="btn"
      bsStyle="danger"
      disabled={false}
      id="delete-account-profile-button"
      onClick={[Function]}
      style={
        Object {
          "marginLeft": 15,
        }
      }
    >
      <FormattedMessage
        id="delete-account"
        values={Object {}}
      />
    </Button>
  </div>
  <ReactRelayQueryRenderer
    environment={
      RelayModernEnvironment {
        "__setNet": [Function],
        "_deferrableSelections": Array [],
        "_network": Object {
          "execute": [Function],
        },
        "_publishQueue": RelayPublishQueue {
          "_appliedOptimisticUpdates": Array [],
          "_backup": Object {},
          "_handlerProvider": [Function],
          "_pendingBackupRebase": false,
          "_pendingData": Array [],
          "_pendingOptimisticUpdates": Array [],
          "_pendingUpdaters": Array [],
          "_store": RelayMarkSweepStore {
            "_gcEnabled": true,
            "_hasScheduledGC": false,
            "_index": 0,
            "_recordSource": Object {},
            "_roots": Array [],
            "_subscriptions": Array [],
            "_updatedRecordIDs": Object {},
          },
        },
        "_store": RelayMarkSweepStore {
          "_gcEnabled": true,
          "_hasScheduledGC": false,
          "_index": 0,
          "_recordSource": Object {},
          "_roots": Array [],
          "_subscriptions": Array [],
          "_updatedRecordIDs": Object {},
        },
        "configName": undefined,
        "unstable_internal": Object {
          "areEqualSelectors": [Function],
          "createFragmentSpecResolver": [Function],
          "createOperationSelector": [Function],
          "getDataIDsFromObject": [Function],
          "getFragment": [Function],
          "getRequest": [Function],
          "getSelector": [Function],
          "getSelectorList": [Function],
          "getSelectorsFromObject": [Function],
          "getVariablesFromObject": [Function],
        },
      }
    }
    query={[Function]}
    render={[Function]}
    variables={Object {}}
  />
</Panel>
`;

exports[`<AccountBox /> should render a disabled button when the form is submitting 1`] = `
<Panel
  bsClass="panel"
  bsStyle="default"
  defaultExpanded={false}
>
  <h2
    className="page-header"
  >
    <FormattedMessage
      id="profile.account.title"
      values={Object {}}
    />
  </h2>
  <Connect(ReduxForm) />
  <Connect(ConfirmPasswordModal) />
  <div
    style={
      Object {
        "paddingLeft": 15,
      }
    }
  >
    <Button
      active={false}
      block={false}
      bsClass="btn"
      bsStyle="primary"
      className="col-sm-offset-5"
      disabled={true}
      id="edit-account-profile-button"
      onClick={[Function]}
    >
      <FormattedMessage
        id="global.loading"
        values={Object {}}
      />
    </Button>
    <Button
      active={false}
      block={false}
      bsClass="btn"
      bsStyle="danger"
      disabled={false}
      id="delete-account-profile-button"
      onClick={[Function]}
      style={
        Object {
          "marginLeft": 15,
        }
      }
    >
      <FormattedMessage
        id="delete-account"
        values={Object {}}
      />
    </Button>
  </div>
  <ReactRelayQueryRenderer
    environment={
      RelayModernEnvironment {
        "__setNet": [Function],
        "_deferrableSelections": Array [],
        "_network": Object {
          "execute": [Function],
        },
        "_publishQueue": RelayPublishQueue {
          "_appliedOptimisticUpdates": Array [],
          "_backup": Object {},
          "_handlerProvider": [Function],
          "_pendingBackupRebase": false,
          "_pendingData": Array [],
          "_pendingOptimisticUpdates": Array [],
          "_pendingUpdaters": Array [],
          "_store": RelayMarkSweepStore {
            "_gcEnabled": true,
            "_hasScheduledGC": false,
            "_index": 0,
            "_recordSource": Object {},
            "_roots": Array [],
            "_subscriptions": Array [],
            "_updatedRecordIDs": Object {},
          },
        },
        "_store": RelayMarkSweepStore {
          "_gcEnabled": true,
          "_hasScheduledGC": false,
          "_index": 0,
          "_recordSource": Object {},
          "_roots": Array [],
          "_subscriptions": Array [],
          "_updatedRecordIDs": Object {},
        },
        "configName": undefined,
        "unstable_internal": Object {
          "areEqualSelectors": [Function],
          "createFragmentSpecResolver": [Function],
          "createOperationSelector": [Function],
          "getDataIDsFromObject": [Function],
          "getFragment": [Function],
          "getRequest": [Function],
          "getSelector": [Function],
          "getSelectorList": [Function],
          "getSelectorsFromObject": [Function],
          "getVariablesFromObject": [Function],
        },
      }
    }
    query={[Function]}
    render={[Function]}
    variables={Object {}}
  />
</Panel>
`;

exports[`<AccountBox /> should render and enabled button when the form is valid 1`] = `
<Panel
  bsClass="panel"
  bsStyle="default"
  defaultExpanded={false}
>
  <h2
    className="page-header"
  >
    <FormattedMessage
      id="profile.account.title"
      values={Object {}}
    />
  </h2>
  <Connect(ReduxForm) />
  <Connect(ConfirmPasswordModal) />
  <div
    style={
      Object {
        "paddingLeft": 15,
      }
    }
  >
    <Button
      active={false}
      block={false}
      bsClass="btn"
      bsStyle="primary"
      className="col-sm-offset-5"
      disabled={false}
      id="edit-account-profile-button"
      onClick={[Function]}
    >
      <FormattedMessage
        id="global.save_modifications"
        values={Object {}}
      />
    </Button>
    <Button
      active={false}
      block={false}
      bsClass="btn"
      bsStyle="danger"
      disabled={false}
      id="delete-account-profile-button"
      onClick={[Function]}
      style={
        Object {
          "marginLeft": 15,
        }
      }
    >
      <FormattedMessage
        id="delete-account"
        values={Object {}}
      />
    </Button>
  </div>
  <ReactRelayQueryRenderer
    environment={
      RelayModernEnvironment {
        "__setNet": [Function],
        "_deferrableSelections": Array [],
        "_network": Object {
          "execute": [Function],
        },
        "_publishQueue": RelayPublishQueue {
          "_appliedOptimisticUpdates": Array [],
          "_backup": Object {},
          "_handlerProvider": [Function],
          "_pendingBackupRebase": false,
          "_pendingData": Array [],
          "_pendingOptimisticUpdates": Array [],
          "_pendingUpdaters": Array [],
          "_store": RelayMarkSweepStore {
            "_gcEnabled": true,
            "_hasScheduledGC": false,
            "_index": 0,
            "_recordSource": Object {},
            "_roots": Array [],
            "_subscriptions": Array [],
            "_updatedRecordIDs": Object {},
          },
        },
        "_store": RelayMarkSweepStore {
          "_gcEnabled": true,
          "_hasScheduledGC": false,
          "_index": 0,
          "_recordSource": Object {},
          "_roots": Array [],
          "_subscriptions": Array [],
          "_updatedRecordIDs": Object {},
        },
        "configName": undefined,
        "unstable_internal": Object {
          "areEqualSelectors": [Function],
          "createFragmentSpecResolver": [Function],
          "createOperationSelector": [Function],
          "getDataIDsFromObject": [Function],
          "getFragment": [Function],
          "getRequest": [Function],
          "getSelector": [Function],
          "getSelectorList": [Function],
          "getSelectorsFromObject": [Function],
          "getVariablesFromObject": [Function],
        },
      }
    }
    query={[Function]}
    render={[Function]}
    variables={Object {}}
  />
</Panel>
`;
