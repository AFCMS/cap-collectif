// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<AccountBox /> should render a disabled button when the form is invalid 1`] = `
<Fragment>
  <Uncontrolled(Panel)>
    <PanelHeading
      bsClass="panel"
      componentClass="div"
    >
      <PanelTitle
        bsClass="panel"
        componentClass="div"
      >
        <div
          className="panel-heading profile-header"
        >
          <h1>
            <FormattedMessage
              id="profile.account.title"
              values={Object {}}
            />
          </h1>
        </div>
      </PanelTitle>
    </PanelHeading>
    <PanelBody
      bsClass="panel"
      collapsible={false}
    >
      <h2
        className="page-header"
      >
        <FormattedMessage
          id="profile.account.title"
          values={Object {}}
        />
      </h2>
      <Connect(ReduxForm) />
      <Connect(ConfirmPasswordModal) />
    </PanelBody>
    <PanelFooter
      bsClass="panel"
    >
      <div
        className="pl-15"
      >
        <Button
          active={false}
          block={false}
          bsClass="btn"
          bsStyle="primary"
          className="col-sm-offset-5"
          disabled={true}
          id="edit-account-profile-button"
          onClick={[Function]}
        >
          <FormattedMessage
            id="global.save_modifications"
            values={Object {}}
          />
        </Button>
        <Button
          active={false}
          block={false}
          bsClass="btn"
          bsStyle="danger"
          disabled={false}
          id="delete-account-profile-button"
          onClick={[Function]}
          style={
            Object {
              "marginLeft": 15,
            }
          }
        >
          <FormattedMessage
            id="delete-account"
            values={Object {}}
          />
        </Button>
      </div>
    </PanelFooter>
  </Uncontrolled(Panel)>
  <ForwardRef(Relay(DeleteAccountModal))
    handleClose={[Function]}
    show={false}
    viewer={
      Object {
        "$fragmentRefs": null,
        "$refType": null,
      }
    }
  />
</Fragment>
`;

exports[`<AccountBox /> should render a disabled button when the form is submitting 1`] = `
<Fragment>
  <Uncontrolled(Panel)>
    <PanelHeading
      bsClass="panel"
      componentClass="div"
    >
      <PanelTitle
        bsClass="panel"
        componentClass="div"
      >
        <div
          className="panel-heading profile-header"
        >
          <h1>
            <FormattedMessage
              id="profile.account.title"
              values={Object {}}
            />
          </h1>
        </div>
      </PanelTitle>
    </PanelHeading>
    <PanelBody
      bsClass="panel"
      collapsible={false}
    >
      <h2
        className="page-header"
      >
        <FormattedMessage
          id="profile.account.title"
          values={Object {}}
        />
      </h2>
      <Connect(ReduxForm) />
      <Connect(ConfirmPasswordModal) />
    </PanelBody>
    <PanelFooter
      bsClass="panel"
    >
      <div
        className="pl-15"
      >
        <Button
          active={false}
          block={false}
          bsClass="btn"
          bsStyle="primary"
          className="col-sm-offset-5"
          disabled={true}
          id="edit-account-profile-button"
          onClick={[Function]}
        >
          <FormattedMessage
            id="global.loading"
            values={Object {}}
          />
        </Button>
        <Button
          active={false}
          block={false}
          bsClass="btn"
          bsStyle="danger"
          disabled={false}
          id="delete-account-profile-button"
          onClick={[Function]}
          style={
            Object {
              "marginLeft": 15,
            }
          }
        >
          <FormattedMessage
            id="delete-account"
            values={Object {}}
          />
        </Button>
      </div>
    </PanelFooter>
  </Uncontrolled(Panel)>
  <ForwardRef(Relay(DeleteAccountModal))
    handleClose={[Function]}
    show={false}
    viewer={
      Object {
        "$fragmentRefs": null,
        "$refType": null,
      }
    }
  />
</Fragment>
`;

exports[`<AccountBox /> should render and enabled button when the form is valid 1`] = `
<Fragment>
  <Uncontrolled(Panel)>
    <PanelHeading
      bsClass="panel"
      componentClass="div"
    >
      <PanelTitle
        bsClass="panel"
        componentClass="div"
      >
        <div
          className="panel-heading profile-header"
        >
          <h1>
            <FormattedMessage
              id="profile.account.title"
              values={Object {}}
            />
          </h1>
        </div>
      </PanelTitle>
    </PanelHeading>
    <PanelBody
      bsClass="panel"
      collapsible={false}
    >
      <h2
        className="page-header"
      >
        <FormattedMessage
          id="profile.account.title"
          values={Object {}}
        />
      </h2>
      <Connect(ReduxForm) />
      <Connect(ConfirmPasswordModal) />
    </PanelBody>
    <PanelFooter
      bsClass="panel"
    >
      <div
        className="pl-15"
      >
        <Button
          active={false}
          block={false}
          bsClass="btn"
          bsStyle="primary"
          className="col-sm-offset-5"
          disabled={false}
          id="edit-account-profile-button"
          onClick={[Function]}
        >
          <FormattedMessage
            id="global.save_modifications"
            values={Object {}}
          />
        </Button>
        <Button
          active={false}
          block={false}
          bsClass="btn"
          bsStyle="danger"
          disabled={false}
          id="delete-account-profile-button"
          onClick={[Function]}
          style={
            Object {
              "marginLeft": 15,
            }
          }
        >
          <FormattedMessage
            id="delete-account"
            values={Object {}}
          />
        </Button>
      </div>
    </PanelFooter>
  </Uncontrolled(Panel)>
  <ForwardRef(Relay(DeleteAccountModal))
    handleClose={[Function]}
    show={false}
    viewer={
      Object {
        "$fragmentRefs": null,
        "$refType": null,
      }
    }
  />
</Fragment>
`;
