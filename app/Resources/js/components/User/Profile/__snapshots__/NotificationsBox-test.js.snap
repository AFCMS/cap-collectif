// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<NotificationsBox /> should render a disabled button when the form is invalid 1`] = `
<Panel
  bsClass="panel"
  bsStyle="default"
  defaultExpanded={false}
  header={
    <FormattedMessage
      id="profile.account.notifications.title"
      values={Object {}}
    />
  }
>
  <ReactRelayQueryRenderer
    environment={
      RelayModernEnvironment {
        "__setNet": [Function],
        "_debugger": EnvironmentDebugger {
          "_envIsDirty": false,
          "_environment": [Circular],
          "_id": "RelayModernEnvironment1",
          "_isRecordingMutationEvents": false,
          "_recordedMutationEvents": Array [],
        },
        "_network": Object {
          "execute": [Function],
        },
        "_publishQueue": RelayPublishQueue {
          "_appliedOptimisticUpdates": Array [],
          "_backup": Object {},
          "_handlerProvider": [Function],
          "_pendingBackupRebase": false,
          "_pendingData": Array [],
          "_pendingOptimisticUpdates": Array [],
          "_pendingUpdaters": Array [],
          "_store": RelayMarkSweepStore {
            "_hasScheduledGC": false,
            "_index": 0,
            "_recordSource": Object {},
            "_roots": Array [],
            "_subscriptions": Array [],
            "_updatedRecordIDs": Object {},
          },
        },
        "_store": RelayMarkSweepStore {
          "_hasScheduledGC": false,
          "_index": 0,
          "_recordSource": Object {},
          "_roots": Array [],
          "_subscriptions": Array [],
          "_updatedRecordIDs": Object {},
        },
        "configName": undefined,
        "unstable_internal": Object {
          "areEqualSelectors": [Function],
          "createFragmentSpecResolver": [Function],
          "createOperationSelector": [Function],
          "getDataIDsFromObject": [Function],
          "getFragment": [Function],
          "getOperation": [Function],
          "getSelector": [Function],
          "getSelectorList": [Function],
          "getSelectorsFromObject": [Function],
          "getVariablesFromObject": [Function],
        },
      }
    }
    query={[Function]}
    render={[Function]}
  />
</Panel>
`;

exports[`<NotificationsBox /> should render a disabled button when the form is submitting 1`] = `
<Panel
  bsClass="panel"
  bsStyle="default"
  defaultExpanded={false}
  header={
    <FormattedMessage
      id="profile.account.notifications.title"
      values={Object {}}
    />
  }
>
  <ReactRelayQueryRenderer
    environment={
      RelayModernEnvironment {
        "__setNet": [Function],
        "_debugger": EnvironmentDebugger {
          "_envIsDirty": false,
          "_environment": [Circular],
          "_id": "RelayModernEnvironment1",
          "_isRecordingMutationEvents": false,
          "_recordedMutationEvents": Array [],
        },
        "_network": Object {
          "execute": [Function],
        },
        "_publishQueue": RelayPublishQueue {
          "_appliedOptimisticUpdates": Array [],
          "_backup": Object {},
          "_handlerProvider": [Function],
          "_pendingBackupRebase": false,
          "_pendingData": Array [],
          "_pendingOptimisticUpdates": Array [],
          "_pendingUpdaters": Array [],
          "_store": RelayMarkSweepStore {
            "_hasScheduledGC": false,
            "_index": 0,
            "_recordSource": Object {},
            "_roots": Array [],
            "_subscriptions": Array [],
            "_updatedRecordIDs": Object {},
          },
        },
        "_store": RelayMarkSweepStore {
          "_hasScheduledGC": false,
          "_index": 0,
          "_recordSource": Object {},
          "_roots": Array [],
          "_subscriptions": Array [],
          "_updatedRecordIDs": Object {},
        },
        "configName": undefined,
        "unstable_internal": Object {
          "areEqualSelectors": [Function],
          "createFragmentSpecResolver": [Function],
          "createOperationSelector": [Function],
          "getDataIDsFromObject": [Function],
          "getFragment": [Function],
          "getOperation": [Function],
          "getSelector": [Function],
          "getSelectorList": [Function],
          "getSelectorsFromObject": [Function],
          "getVariablesFromObject": [Function],
        },
      }
    }
    query={[Function]}
    render={[Function]}
  />
</Panel>
`;

exports[`<NotificationsBox /> should render and enabled button when the form is valid 1`] = `
<Panel
  bsClass="panel"
  bsStyle="default"
  defaultExpanded={false}
  header={
    <FormattedMessage
      id="profile.account.notifications.title"
      values={Object {}}
    />
  }
>
  <ReactRelayQueryRenderer
    environment={
      RelayModernEnvironment {
        "__setNet": [Function],
        "_debugger": EnvironmentDebugger {
          "_envIsDirty": false,
          "_environment": [Circular],
          "_id": "RelayModernEnvironment1",
          "_isRecordingMutationEvents": false,
          "_recordedMutationEvents": Array [],
        },
        "_network": Object {
          "execute": [Function],
        },
        "_publishQueue": RelayPublishQueue {
          "_appliedOptimisticUpdates": Array [],
          "_backup": Object {},
          "_handlerProvider": [Function],
          "_pendingBackupRebase": false,
          "_pendingData": Array [],
          "_pendingOptimisticUpdates": Array [],
          "_pendingUpdaters": Array [],
          "_store": RelayMarkSweepStore {
            "_hasScheduledGC": false,
            "_index": 0,
            "_recordSource": Object {},
            "_roots": Array [],
            "_subscriptions": Array [],
            "_updatedRecordIDs": Object {},
          },
        },
        "_store": RelayMarkSweepStore {
          "_hasScheduledGC": false,
          "_index": 0,
          "_recordSource": Object {},
          "_roots": Array [],
          "_subscriptions": Array [],
          "_updatedRecordIDs": Object {},
        },
        "configName": undefined,
        "unstable_internal": Object {
          "areEqualSelectors": [Function],
          "createFragmentSpecResolver": [Function],
          "createOperationSelector": [Function],
          "getDataIDsFromObject": [Function],
          "getFragment": [Function],
          "getOperation": [Function],
          "getSelector": [Function],
          "getSelectorList": [Function],
          "getSelectorsFromObject": [Function],
          "getVariablesFromObject": [Function],
        },
      }
    }
    query={[Function]}
    render={[Function]}
  />
</Panel>
`;
