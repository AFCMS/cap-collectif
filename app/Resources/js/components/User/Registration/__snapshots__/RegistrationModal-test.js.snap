// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<RegistrationModal /> renders a form 1`] = `
<Modal
  animation={false}
  aria-labelledby="contained-modal-title-lg"
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  bsSize="small"
  dialogComponentClass={[Function]}
  enforceFocus={false}
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onHide={[MockFunction]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  show={true}
>
  <ModalHeader
    bsClass="modal-header"
    closeButton={true}
    closeLabel="Close"
  >
    <ModalTitle
      bsClass="modal-title"
      componentClass="h4"
      id="contained-modal-title-lg"
    >
      <FormattedMessage
        id="global.register"
        values={Object {}}
      />
    </ModalTitle>
  </ModalHeader>
  <ModalBody
    bsClass="modal-body"
    componentClass="div"
  >
    <Connect(LoginSocialButtons)
      prefix="registration."
    />
    <Connect(InjectIntl(ReduxForm)) />
  </ModalBody>
  <ModalFooter
    bsClass="modal-footer"
    componentClass="div"
  >
    <CloseButton
      label="global.cancel"
      onClose={[MockFunction]}
    />
    <Connect(SubmitButton)
      id="confirm-register"
      isSubmitting={false}
      label="global.register"
      onSubmit={[MockFunction]}
    />
  </ModalFooter>
</Modal>
`;

exports[`<RegistrationModal /> renders a top text and a bottom text if specified 1`] = `
<Modal
  animation={false}
  aria-labelledby="contained-modal-title-lg"
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  bsSize="small"
  dialogComponentClass={[Function]}
  enforceFocus={false}
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onHide={[MockFunction]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  show={true}
>
  <ModalHeader
    bsClass="modal-header"
    closeButton={true}
    closeLabel="Close"
  >
    <ModalTitle
      bsClass="modal-title"
      componentClass="h4"
      id="contained-modal-title-lg"
    >
      <FormattedMessage
        id="global.register"
        values={Object {}}
      />
    </ModalTitle>
  </ModalHeader>
  <ModalBody
    bsClass="modal-body"
    componentClass="div"
  >
    <Alert
      bsClass="alert"
      bsStyle="info"
      className="text-center"
      closeLabel="Close alert"
    >
      <WYSIWYGRender
        value="Texte du haut"
      />
    </Alert>
    <Connect(LoginSocialButtons)
      prefix="registration."
    />
    <Connect(InjectIntl(ReduxForm)) />
    <WYSIWYGRender
      className="text-center small excerpt mt-15"
      value="Texte du bas"
    />
  </ModalBody>
  <ModalFooter
    bsClass="modal-footer"
    componentClass="div"
  >
    <CloseButton
      label="global.cancel"
      onClose={[MockFunction]}
    />
    <Connect(SubmitButton)
      id="confirm-register"
      isSubmitting={false}
      label="global.register"
      onSubmit={[MockFunction]}
    />
  </ModalFooter>
</Modal>
`;

exports[`<RegistrationModal /> renders hidden modal if not shown 1`] = `
<Modal
  animation={false}
  aria-labelledby="contained-modal-title-lg"
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  bsSize="small"
  dialogComponentClass={[Function]}
  enforceFocus={false}
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onHide={[MockFunction]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  show={false}
>
  <ModalHeader
    bsClass="modal-header"
    closeButton={true}
    closeLabel="Close"
  >
    <ModalTitle
      bsClass="modal-title"
      componentClass="h4"
      id="contained-modal-title-lg"
    >
      <FormattedMessage
        id="global.register"
        values={Object {}}
      />
    </ModalTitle>
  </ModalHeader>
  <ModalBody
    bsClass="modal-body"
    componentClass="div"
  >
    <Connect(LoginSocialButtons)
      prefix="registration."
    />
    <Connect(InjectIntl(ReduxForm)) />
  </ModalBody>
  <ModalFooter
    bsClass="modal-footer"
    componentClass="div"
  >
    <CloseButton
      label="global.cancel"
      onClose={[MockFunction]}
    />
    <Connect(SubmitButton)
      id="confirm-register"
      isSubmitting={false}
      label="global.register"
      onSubmit={[MockFunction]}
    />
  </ModalFooter>
</Modal>
`;

exports[`<RegistrationModal /> renders modal if shown 1`] = `
<Modal
  animation={false}
  aria-labelledby="contained-modal-title-lg"
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  bsSize="small"
  dialogComponentClass={[Function]}
  enforceFocus={false}
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onHide={[MockFunction]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  show={true}
>
  <ModalHeader
    bsClass="modal-header"
    closeButton={true}
    closeLabel="Close"
  >
    <ModalTitle
      bsClass="modal-title"
      componentClass="h4"
      id="contained-modal-title-lg"
    >
      <FormattedMessage
        id="global.register"
        values={Object {}}
      />
    </ModalTitle>
  </ModalHeader>
  <ModalBody
    bsClass="modal-body"
    componentClass="div"
  >
    <Connect(LoginSocialButtons)
      prefix="registration."
    />
    <Connect(InjectIntl(ReduxForm)) />
  </ModalBody>
  <ModalFooter
    bsClass="modal-footer"
    componentClass="div"
  >
    <CloseButton
      label="global.cancel"
      onClose={[MockFunction]}
    />
    <Connect(SubmitButton)
      id="confirm-register"
      isSubmitting={false}
      label="global.register"
      onSubmit={[MockFunction]}
    />
  </ModalFooter>
</Modal>
`;
