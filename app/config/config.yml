imports:
    - { resource: parameters.php }
    - { resource: parameters.yml, ignore_errors: true }
    - { resource: security.yml }
    - { resource: sonata.yml }
    - { resource: liip_imagine.yml }
    - { resource: elastica.yml }
    - { resource: joli/jolitypo.yml }

framework:
    secret: "%secret%"
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: null
    form: null
    csrf_protection: null
    validation:
        enabled: true
        enable_annotations: true
    templating:
        assets_version: v5
        engines:
            - twig
    default_locale: "%locale%"
    trusted_hosts: null
    trusted_proxies: ['127.0.0.1']
    session:
        handler_id: snc_redis.session.handler
        # cookie_secure: true
    fragments: null
    http_method_override: true
    translator: { fallback: fr }

snc_redis:
    clients:
        default:
            type: predis
            alias: default
            dsn: redis://%redis_host%
            logging: %kernel.debug%
        session:
            type: predis
            alias: session
            dsn: redis://%redis_host%
    session:
        client: session
        ttl: 3600
        use_as_default: true

twig:
    debug: "%kernel.debug%"
    strict_variables: "%kernel.debug%"
    form:
        resources:
            - 'CapcoAppBundle:Form:bootstrap.html.twig'
            - 'CapcoAppBundle:Form:media_widgets.html.twig'
            - 'SonataCoreBundle:Form:datepicker.html.twig'
    globals:
        facebook_app_id: %facebook_app_id%

ekino_new_relic:
    enabled:          true
    log_exceptions:   true

doctrine:
    dbal:
        driver: "%database_driver%"
        host: "%database_host%"
        port: "%database_port%"
        dbname: "%database_name%"
        user: "%database_user%"
        password: "%database_password%"
        charset: UTF8
        types:
            json: Sonata\Doctrine\Types\JsonType
    orm:
        auto_generate_proxy_classes: "%kernel.debug%"
        auto_mapping: true
        filters:
          softdeleteable:
              class: Gedmo\SoftDeleteable\Filter\SoftDeleteableFilter
              enabled: true
        dql:
          datetime_functions:
            DATE: Capco\AppBundle\DQL\DateFunction
          numeric_functions:
            RAND: Capco\AppBundle\DQL\RandFunction
        mappings:
          tree:
            type: annotation
            prefix: Gedmo\Tree\Entity
            dir: "%kernel.root_dir%/../vendor/gedmo/doctrine-extensions/lib/Gedmo/Tree/Entity"
            alias: GedmoTree
          loggable:
            type: annotation
            alias: GedmoLoggable
            prefix: Gedmo\Loggable\Entity
            dir: "%kernel.root_dir%/../vendor/gedmo/doctrine-extensions/lib/Gedmo/Loggable/Entity"
            is_bundle: false
        resolve_target_entities:
          # Used to tell synthesis tool wich entity to use for users. If none is defined in the project, you can use Capco\AppBundle\Entity\Synthesis\SynthesisUser
          Capco\AppBundle\Entity\Synthesis\SynthesisUserInterface: Capco\UserBundle\Entity\User

swiftmailer:
    default_mailer: default
    mailers:
        default:
            transport: "%mailer_transport%"
            host: "%mailer_host%"
            port: "%mailer_port%"
            username: "%mailer_user%"
            password: "%mailer_password%"
        service:
            transport: "%mailer_transport%"
            host: "%mailer_service_host%"
            port: "%mailer_port%"
            username: "%mailer_service_user%"
            password: "%mailer_service_password%"

# Stof\DoctrineExtensionBundle configuration
stof_doctrine_extensions:
    default_locale: fr_FR
    orm:
        default:
            timestampable: true
            translatable: true
            sluggable : true
            softdeleteable: true
            loggable: true
            tree: true

hautelook_alice:
    locale: fr_FR   # default
    seed: 1         # default

fos_user:
    db_driver:      orm
    firewall_name:  main
    user_class:     Capco\UserBundle\Entity\User
    group:
        group_class:   Capco\UserBundle\Entity\Group
        group_manager: sonata.user.orm.group_manager                    # If you're using doctrine orm (use sonata.user.mongodb.user_manager for mongodb)
    service:
        user_manager: sonata.user.orm.user_manager
        mailer: capco.notify_manager
    registration:
        confirmation:
            enabled:    true
    change_password:
        form:
            type: capco_user_change_password

services:
    twig.extension.text:
       class: Twig_Extensions_Extension_Text
       tags:
            - { name: twig.extension }
    twig.extension.intl:
        class: Twig_Extensions_Extension_Intl
        tags:
            - { name: twig.extension }

hwi_oauth:
    connect:
        account_connector: my_user_provider
    firewall_name: main
    fosub:
        username_iterations: 30
        properties:
            facebook: facebook_id
            google: google_id
            twitter: twitter_id
            nous_citoyens: nous_citoyens_id
    resource_owners:
        facebook:
            type: facebook
            client_id: "%facebook_app_id%"
            client_secret: "%facebook_app_secret%"
            scope: "email"
            options:
                display: page
        google:
            type: google
            client_id: "%google_app_id%"
            client_secret: "%google_app_secret%"
            scope: "https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/userinfo.profile"
            options:
                access_type: offline
                approval_prompt: auto
                display: page
                login_hint: email address
        twitter:
            type: twitter
            client_id: %twitter_app_id%
            client_secret: %twitter_app_secret%
        nous_citoyens:
            type: nous_citoyens
            client_id: "%nous_citoyens_app_id%"
            client_secret: "%nous_citoyens_app_secret%"

qandidate_toggle:
    persistence: redis
    context_factory: null
    redis_namespace: feature_toggle # default, only required when persistence = redis
    redis_client: snc_redis.default # only required when persistence = redis

ivory_ck_editor:
    base_path: 'js/ckeditor/'
    js_path: 'js/ckeditor/ckeditor.js'
    default_config: user_editor
    input_sync: true
    configs:
        user_editor:
            removePlugins: 'elementspath'
            toolbar: user_toolbar
            language: fr
            skin: minimalist
            extraPlugins: autolink,autogrow
            extraAllowedContent: "a[!href,_src,target,class]"
        empty_editor:
            removePlugins: 'toolbar,elementspath,resize'
            language: fr
            skin: minimalist
            extraPlugins: autolink,autogrow
            extraAllowedContent: "a[!href,_src,target,class]"
        admin_editor:
            toolbar: admin_toolbar
            language: fr
            skin: minimalist
            extraPlugins: oembed,btgrid,autolink,autogrow
            extraAllowedContent: "a[!href,_src,target,class]"
            filebrowserBrowseRoute: admin_capco_media_media_browser
            filebrowserImageBrowseRoute: admin_capco_media_media_browser
            # Display images by default when clicking the image dialog browse button
            filebrowserImageBrowseRouteParameters:
                provider: sonata.media.provider.image
            filebrowserUploadRoute: admin_capco_media_media_upload
            filebrowserUploadRouteParameters:
                provider: sonata.media.provider.file
            # Upload file as image when sending a file from the image dialog
            filebrowserImageUploadRoute: admin_capco_media_media_upload
            filebrowserImageUploadRouteParameters:
                provider: sonata.media.provider.image
                context: default
            filebrowserWindowWidth: '50%'
            filebrowserWindowHeight: '80%'
    toolbars:
        configs:
            admin_toolbar: ['@clipboard', '@styles', '@basicstyles', '@colors', '@paragraph', '@links', '@insert', '@document', '@tools' ]
            user_toolbar: ['@clipboard', '@user_styles', '@basicstyles', '@user_paragraph', '@user_links', '@user_insert', '@tools']
        items:
            clipboard: [ 'Undo', 'Redo' ]
            styles: [ 'Format', 'FontSize']
            user_styles: [ 'Format' ]
            basicstyles: [ 'Bold', 'Italic', 'Underline', 'Strike']
            colors: ['TextColor', 'BGColor']
            paragraph: [ 'NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', '-', 'Blockquote', '-', 'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock' ]
            user_paragraph: [ 'NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', '-', 'Blockquote' ]
            links: [ 'Link', 'Unlink', 'Anchor' ]
            user_links: [ 'Link', 'Unlink' ]
            insert: [ 'Image', 'oembed', 'Iframe', 'Table', 'btgrid', 'HorizontalRule' ]
            user_insert: [ 'Image', 'Table', 'HorizontalRule' ]
            document: ['Source']
            tools: [ 'Maximize' ]

coop_tilleuls_ck_editor_sonata_media:
    templates:
        layout: CoopTilleulsCKEditorSonataMediaBundle::layout.html.twig
        browser: CapcoMediaBundle:MediaAdmin:browser.html.twig
        upload: CoopTilleulsCKEditorSonataMediaBundle:MediaAdmin:upload.html.twig

nelmio_api_doc: ~

fos_rest:
    routing_loader:
        default_format: json
        include_format: false
    view:
        view_response_listener: true
        failed_validation: HTTP_BAD_REQUEST
        formats:
            jsonp: true
            json: true
            xml: false
            rss: false
        templating_formats:
          html: true
    format_listener:
        rules:
            - { path: ^/api, fallback_format: json }
            - { path: ^/, stop: true }
    body_listener:
        decoders:
            json: fos_rest.decoder.json
    body_converter:
        enabled: true
        validate: true
        validation_errors_argument: validationErrors
    param_fetcher_listener: true
    allowed_methods_listener: true
    serializer:
        serialize_null: true
    exception:
        codes:
            'Symfony\Component\Routing\Exception\ResourceNotFoundException': 404
            'Symfony\Component\HttpKernel\Exception\NotFoundHttpException': 404
            'Doctrine\ORM\OptimisticLockException': HTTP_CONFLICT
        messages:
            'Symfony\Component\Routing\Exception\ResourceNotFoundException': true
            'Symfony\Component\HttpKernel\Exception\HttpException': true
            'Symfony\Component\HttpKernel\Exception\BadRequestHttpException': true

lexik_jwt_authentication:
    private_key_path: %jwt_private_key_path%
    public_key_path:  %jwt_public_key_path%
    pass_phrase:      %jwt_key_pass_phrase%
    token_ttl:        %jwt_token_ttl%
    user_identity_field: email

jms_serializer:
    metadata:
        cache: file
        debug: "%kernel.debug%"
        file_cache:
            dir: "%kernel.cache_dir%/serializer"
        auto_detection: false
        directories:
            App:
                namespace_prefix: "Capco\\AppBundle\\Entity"
                path: "%kernel.root_dir%/Resources/serializer"
            User:
                namespace_prefix: "Capco\\UserBundle"
                path: "@CapcoUserBundle/Resources/config/serializer"
            Media:
                namespace_prefix: "Capco\\MediaBundle"
                path: "@CapcoMediaBundle/Resources/config/serializer"
            FOSUserBundle:
                namespace_prefix: "FOS\\UserBundle"
                path: "@CapcoUserBundle/Resources/config/serializer/FOSUserBundle"
            GedmoLoggable:
                namespace_prefix: "Gedmo\\Loggable"
                path: "@CapcoAppBundle/Resources/config/serializer/GedmoLoggable"

