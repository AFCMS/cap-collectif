// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ProjectAdminCollectStepForm /> renders correctly 1`] = `
<Fragment>
  <ProjectAdminFormstyle__ProjectBoxHeader>
    <h5>
      <FormattedMessage
        id="collect_step"
        values={Object {}}
      />
    </h5>
  </ProjectAdminFormstyle__ProjectBoxHeader>
  <Field
    aria-autocomplete="list"
    aria-haspopup="true"
    autoload={true}
    cacheOptions={true}
    clearable={true}
    component={[Function]}
    debounce={true}
    defaultOptions={true}
    id="step-proposalForm"
    inputClassName="fake-inputClassName"
    label={
      <FormattedMessage
        id="admin.fields.step.proposal_form"
        values={Object {}}
      />
    }
    labelClassName="control-label"
    loadOptions={[Function]}
    name="proposalForm"
    placeholder=" "
    role="combobox"
    selectFieldIsObject={true}
  />
  <ProjectAdminFormstyle__ProjectBoxHeader>
    <h5>
      <FormattedMessage
        id="global.proposals"
        values={Object {}}
      />
    </h5>
  </ProjectAdminFormstyle__ProjectBoxHeader>
  <ProjectAdminFormstyle__ProjectSmallFieldsContainer>
    <ForwardRef
      direction="row"
      flex="1"
    >
      <ForwardRef
        direction="row"
        flex="1"
        maxWidth="230px"
      >
        <Field
          clearable={false}
          component={[Function]}
          id="step-defaultSort"
          inputClassName="fake-inputClassName"
          label={
            <FormattedMessage
              id="admin.fields.opinion_type.default_filter"
              values={Object {}}
            />
          }
          labelClassName="control-label"
          name="defaultSort"
          options={
            Array [
              Object {
                "label": "global.random",
                "value": "RANDOM",
              },
              Object {
                "label": "global.filter_f_comments",
                "value": "COMMENTS",
              },
              Object {
                "label": "global.filter_f_last",
                "value": "LAST",
              },
              Object {
                "label": "global.filter_f_old",
                "value": "OLD",
              },
              Object {
                "label": "step.sort.votes",
                "value": "VOTES",
              },
              Object {
                "label": "global.filter_f_least-votes",
                "value": "LEAST_VOTE",
              },
              Object {
                "label": "global.filter_f_cheap",
                "value": "CHEAP",
              },
              Object {
                "label": "global.filter_f_expensive",
                "value": "EXPENSIVE",
              },
            ]
          }
          placeholder=" "
        />
      </ForwardRef>
      <ForwardRef
        direction="column"
        maxWidth="175px"
        ml={2}
        width="100%"
      >
        <FormattedMessage
          id="project-visibility"
          tagName="b"
          values={Object {}}
        />
        <ForwardRef>
          <DropdownButton
            className="mt-15"
            id="js-btn-visibility-step"
            title={
              <FormattedMessage
                id="public"
                values={Object {}}
              />
            }
          >
            <MenuItem
              bsClass="dropdown"
              disabled={false}
              divider={false}
              header={false}
              id="public-collect"
              onClick={[Function]}
            >
              <ProjectAdminStepFormstyle__PrivacyInfo>
                <FormattedMessage
                  id="public"
                  values={Object {}}
                />
                <FormattedMessage
                  id="everybody"
                  values={Object {}}
                />
              </ProjectAdminStepFormstyle__PrivacyInfo>
            </MenuItem>
            <MenuItem
              bsClass="dropdown"
              disabled={false}
              divider={false}
              header={false}
              id="private-collect"
              onClick={[Function]}
            >
              <ProjectAdminStepFormstyle__PrivacyInfo>
                <FormattedMessage
                  id="global-restricted"
                  values={Object {}}
                />
                <FormattedMessage
                  id="authors-and-administrators"
                  values={Object {}}
                />
              </ProjectAdminStepFormstyle__PrivacyInfo>
            </MenuItem>
          </DropdownButton>
        </ForwardRef>
      </ForwardRef>
    </ForwardRef>
    <ForwardRef
      direction="column"
      flex="1"
    >
      <Text
        color="gray.900"
        fontSize={14}
        fontWeight={600}
      >
        <FormattedMessage
          id="proposal-news-label"
          values={Object {}}
        />
      </Text>
      <Text
        color="gray.600"
        fontSize={11}
        lineHeight="16px"
        mb={2}
        mt={1}
      >
        <FormattedMessage
          id="proposal-news-help-text"
          values={Object {}}
        />
      </Text>
      <Field
        component={[Function]}
        id="step-allowAuthorsToAddNews"
        name="allowAuthorsToAddNews"
        type="checkbox"
      >
        <FormattedMessage
          id="allow-proposal-news"
          values={Object {}}
        />
      </Field>
    </ForwardRef>
  </ProjectAdminFormstyle__ProjectSmallFieldsContainer>
  <Connect(StepVotesFields)
    isBudgetEnabled={true}
    isLimitEnabled={false}
    isTresholdEnabled={true}
    options={
      Object {
        "limit": 3,
        "min": 1,
        "ranking": true,
      }
    }
    stepFormName="defaultForm"
    votable={true}
  />
  <ProjectAdminFormstyle__ProjectBoxHeader>
    <h5>
      <FormattedMessage
        id="admin.fields.step.statuses"
        values={Object {}}
      />
    </h5>
  </ProjectAdminFormstyle__ProjectBoxHeader>
  <FieldArray
    component={
      Object {
        "$$typeof": Symbol(react.memo),
        "WrappedComponent": [Function],
        "compare": null,
        "displayName": "Connect(StepStatusesList)",
        "type": [Function],
      }
    }
    formName="stepForm"
    name="statuses"
  />
  <Button
    active={false}
    block={false}
    bsClass="btn"
    bsStyle="primary"
    className="btn-outline-primary box-content__toolbar mb-20"
    disabled={false}
    id="js-btn-create-step"
    onClick={[Function]}
  >
    <i
      className="fa fa-plus-circle"
    />
     
    <FormattedMessage
      id="global.add"
      values={Object {}}
    />
  </Button>
  <ProjectAdminFormstyle__ProjectBoxHeader>
    <h5>
      <FormattedMessage
        id="requirements"
        values={Object {}}
      />
    </h5>
  </ProjectAdminFormstyle__ProjectBoxHeader>
  <FieldArray
    component={
      Object {
        "$$typeof": Symbol(react.memo),
        "WrappedComponent": [Function],
        "compare": null,
        "displayName": "Connect(StepRequirementsList)",
        "type": [Function],
      }
    }
    formName="stepForm"
    name="requirements"
  />
  <Button
    active={false}
    block={false}
    bsClass="btn"
    bsStyle="primary"
    className="btn-outline-primary box-content__toolbar mb-20"
    disabled={false}
    id="js-btn-create-step"
    onClick={[Function]}
  >
    <i
      className="fa fa-plus-circle"
    />
     
    <FormattedMessage
      id="global.add"
      values={Object {}}
    />
  </Button>
  <Field
    component={[Function]}
    id="step-requirementsReason"
    label={
      <FormattedMessage
        id="reason-for-collection"
        values={Object {}}
      />
    }
    name="requirementsReason"
    type="editor"
  />
</Fragment>
`;
