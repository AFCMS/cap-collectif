// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ProjectAdminStepFormModal /> renders correctly 1`] = `
<Modal
  animation={false}
  aria-labelledby="contained-modal-title-lg"
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  bsSize="large"
  dialogComponentClass={[Function]}
  enforceFocus={true}
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onHide={[MockFunction]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  show={true}
>
  <ModalHeader
    bsClass="modal-header"
    closeButton={true}
    closeLabel="Close"
  >
    <ProjectAdminFormstyle__StepModalTitle
      id="contained-modal-title-lg"
    >
      <FormattedMessage
        id="edit-custom-step"
        values={Object {}}
      />
    </ProjectAdminFormstyle__StepModalTitle>
  </ModalHeader>
  <Connect(injectIntl(ReduxForm))
    formName="ProjectAdminStepForm"
    handleClose={[MockFunction]}
    step={
      Object {
        "type": "OtherStep",
      }
    }
  />
</Modal>
`;

exports[`<ProjectAdminStepFormModal /> renders correctly hided 1`] = `
<Modal
  animation={false}
  aria-labelledby="contained-modal-title-lg"
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  bsSize="large"
  dialogComponentClass={[Function]}
  enforceFocus={true}
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onHide={[MockFunction]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  show={false}
>
  <ModalHeader
    bsClass="modal-header"
    closeButton={true}
    closeLabel="Close"
  >
    <ProjectAdminFormstyle__StepModalTitle
      id="contained-modal-title-lg"
    >
      <FormattedMessage
        id="edit-custom-step"
        values={Object {}}
      />
    </ProjectAdminFormstyle__StepModalTitle>
  </ModalHeader>
  <Connect(injectIntl(ReduxForm))
    formName="ProjectAdminStepForm"
    handleClose={[MockFunction]}
    step={
      Object {
        "type": "OtherStep",
      }
    }
  />
</Modal>
`;

exports[`<ProjectAdminStepFormModal /> renders correctly with step 1`] = `
<Modal
  animation={false}
  aria-labelledby="contained-modal-title-lg"
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  bsSize="large"
  dialogComponentClass={[Function]}
  enforceFocus={true}
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onHide={[MockFunction]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  show={true}
>
  <ModalHeader
    bsClass="modal-header"
    closeButton={true}
    closeLabel="Close"
  >
    <ProjectAdminFormstyle__StepModalTitle
      id="contained-modal-title-lg"
    >
      <FormattedMessage
        id="edit-custom-step"
        values={Object {}}
      />
    </ProjectAdminFormstyle__StepModalTitle>
  </ModalHeader>
  <Connect(injectIntl(ReduxForm))
    formName="ProjectAdminStepForm"
    handleClose={[MockFunction]}
    step={
      Object {
        "title": "test",
        "type": "OtherStep",
      }
    }
  />
</Modal>
`;
