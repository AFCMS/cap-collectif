// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<EventForm /> it does not render toggle on frontend even with remote event enabled 1`] = `
<EventForm__FormContainer>
  <form
    className="eventForm "
    onSubmit={[MockFunction]}
  >
    <div
      className="box-body"
    >
      <Field
        component={[Function]}
        disabled={false}
        id="event_title"
        label={
          <FormattedMessage
            id="global.title"
            values={Object {}}
          />
        }
        name="title"
        type="text"
      />
      <Field
        addressProps={
          Object {
            "getAddress": [Function],
          }
        }
        component={[Function]}
        disabled={false}
        formName="EventForm"
        id="event_address"
        label={
          <div>
            <FormattedMessage
              id="proposal_form.address"
              values={Object {}}
            />
            <div
              className="excerpt inline"
            >
              <FormattedMessage
                id="global.optional"
                values={Object {}}
              />
            </div>
          </div>
        }
        name="addressText"
        placeholder="proposal.map.form.placeholder"
        type="address"
      />
      <Field
        component={[Function]}
        disabled={false}
        id="event_body"
        label={
          <FormattedMessage
            id="global.description"
            values={Object {}}
          />
        }
        name="body"
        type="admin-editor"
      />
      <div
        className="datePickContainer"
      >
        <Field
          addonAfter={
            <i
              className="cap-calendar-2"
            />
          }
          component={[Function]}
          dateTimeInputProps={
            Object {
              "disabled": false,
              "id": "event_input_startAt",
            }
          }
          formName="EventForm"
          id="event_startAt"
          label={
            <FormattedMessage
              id="start-date"
              values={Object {}}
            />
          }
          name="startAt"
          timeFormat={false}
          type="datetime"
        />
        <Field
          addonAfter={
            <i
              className="cap-calendar-2"
            />
          }
          className="adminDate"
          component={[Function]}
          dateTimeInputProps={
            Object {
              "disabled": false,
              "id": "event_input_endAt",
            }
          }
          formName="EventForm"
          id="event_endAt"
          label={
            <div>
              <FormattedMessage
                id="ending-date"
                values={Object {}}
              />
              <div
                className="excerpt inline"
              >
                <FormattedMessage
                  id="global.optional"
                  values={Object {}}
                />
              </div>
            </div>
          }
          name="endAt"
          type="datetime"
        />
      </div>
      <Field
        component={[Function]}
        id="event_media"
        label={
          <div>
            <FormattedMessage
              id="global.illustration"
              values={Object {}}
            />
            <div
              className="excerpt inline"
            >
              <FormattedMessage
                id="global.optional"
                values={Object {}}
              />
            </div>
          </div>
        }
        name="media"
        type="image"
      />
    </div>
    <Field
      component={[Function]}
      disabled={false}
      label={
        <React.Fragment>
          <FormattedMessage
            id="global.meta.description"
            values={Object {}}
          />
          <span
            className="excerpt inline"
          >
            <FormattedMessage
              id="global.optional"
              values={Object {}}
            />
             
            <OverlayTrigger
              defaultOverlayShown={false}
              overlay={
                <_default
                  className="text-left"
                  id="tooltip-top"
                  style={
                    Object {
                      "wordBreak": "break-word",
                    }
                  }
                >
                  <FormattedMessage
                    id="admin.help.metadescription"
                    values={Object {}}
                  />
                </_default>
              }
              placement="top"
              trigger={
                Array [
                  "hover",
                  "focus",
                ]
              }
            >
              <ForwardRef(ProjectContentAdminForm__InformationIcon) />
            </OverlayTrigger>
          </span>
        </React.Fragment>
      }
      name="metadescription"
      type="textarea"
    />
    <div
      className="box-header d-flex"
    >
      <h3
        className="box-title"
      >
        <FormattedMessage
          id="form.label_category"
          values={Object {}}
        />
        <EventForm__TitleHint>
            
           
          <FormattedMessage
            id="allow-event-linking"
            values={Object {}}
          />
        </EventForm__TitleHint>
      </h3>
    </div>
    <Relay(injectIntl(SelectProject))
      clearable={true}
      disabled={false}
      label="admin.fields.theme.projects_count"
      multi={true}
      name="projects"
      optional={true}
      placeholder="select-project"
      query={
        Object {
          "$fragmentRefs": null,
          "$refType": null,
          "viewer": Object {
            "isAdmin": true,
            "isSuperAdmin": false,
          },
        }
      }
    />
    <Relay(injectIntl(SelectStep))
      clearable={true}
      disabled={true}
      label="project.show.meta.step.title"
      multi={true}
      name="steps"
      optional={true}
      projectIds={Array []}
      query={
        Object {
          "$fragmentRefs": null,
          "$refType": null,
          "viewer": Object {
            "isAdmin": true,
            "isSuperAdmin": false,
          },
        }
      }
    />
    <div>
      <div>
        <div
          className="box-header"
        >
          <h3
            className="box-title"
          >
            <FormattedMessage
              id="global.options"
              values={Object {}}
            />
          </h3>
        </div>
        <Field
          component={[Function]}
          disabled={false}
          id="event_registrable"
          label={
            <FormattedMessage
              id="inscriptions-on-platform"
              values={Object {}}
            />
          }
          name="guestListEnabled"
          type="checkbox"
        />
      </div>
    </div>
  </form>
</EventForm__FormContainer>
`;

exports[`<EventForm /> it renders correctly a remote event 1`] = `
<EventForm__FormContainer>
  <form
    className="eventForm "
    onSubmit={[MockFunction]}
  >
    <EventForm__PageTitleContainer>
      <h3
        className="box-title"
      >
        <FormattedMessage
          id="global.general"
          values={Object {}}
        />
      </h3>
      <span
        className="mr-30 mt-15"
      />
    </EventForm__PageTitleContainer>
    <div
      className="color-dark-gray font-size-16"
    />
    <div
      className="box-body"
    >
      <Field
        component={[Function]}
        id="isPresential"
        label={
          <FormattedMessage
            id="global.type"
            values={Object {}}
          />
        }
        name="isPresential"
        type="radio-buttons"
      >
        <ToggleButton
          id="presential"
          onClick={[Function]}
          value={true}
        >
          <FormattedMessage
            id="global.presential"
            values={Object {}}
          />
        </ToggleButton>
        <ToggleButton
          id="remote"
          onClick={[Function]}
          value={false}
        >
          <FormattedMessage
            id="global.online"
            values={Object {}}
          />
        </ToggleButton>
      </Field>
      <Field
        component={[Function]}
        disabled={false}
        id="event_title"
        label={
          <FormattedMessage
            id="global.title"
            values={Object {}}
          />
        }
        name="title"
        type="text"
      />
      <UserListField
        ariaControls="EventForm-filter-user-listbox"
        authorOfEvent={false}
        autoload={true}
        className=""
        clearable={false}
        debounce={false}
        disabled={false}
        id="event_author"
        inputClassName="fake-inputClassName"
        label={
          <FormattedMessage
            id="global.author"
            values={Object {}}
          />
        }
        labelClassName={null}
        multi={false}
        name="author"
        placeholder="select-author"
        selectFieldIsObject={true}
      />
      <UserListField
        ariaControls="EventForm-filter-user-listbox"
        authorOfEvent={false}
        autoload={true}
        className=""
        clearable={false}
        debounce={false}
        disabled={false}
        id="event_animator"
        inputClassName="fake-inputClassName"
        label={
          <FormattedMessage
            id="global.animator"
            values={Object {}}
          />
        }
        labelClassName={null}
        multi={false}
        name="animator"
        placeholder={null}
        selectFieldIsObject={true}
      />
      <Field
        addressProps={
          Object {
            "getAddress": [Function],
          }
        }
        component={[Function]}
        disabled={false}
        formName="EventForm"
        id="event_address"
        label={
          <div>
            <FormattedMessage
              id="proposal_form.address"
              values={Object {}}
            />
            <div
              className="excerpt inline"
            >
              <FormattedMessage
                id="global.optional"
                values={Object {}}
              />
            </div>
          </div>
        }
        name="addressText"
        placeholder="proposal.map.form.placeholder"
        type="address"
      />
      <Field
        component={[Function]}
        disabled={false}
        id="event_body"
        label={
          <FormattedMessage
            id="global.description"
            values={Object {}}
          />
        }
        name="body"
        type="admin-editor"
      />
      <div
        className="datePickContainer"
      >
        <Field
          addonAfter={
            <i
              className="cap-calendar-2"
            />
          }
          component={[Function]}
          dateTimeInputProps={
            Object {
              "disabled": false,
              "id": "event_input_startAt",
            }
          }
          formName="EventForm"
          id="event_startAt"
          label={
            <FormattedMessage
              id="start-date"
              values={Object {}}
            />
          }
          name="startAt"
          timeFormat={false}
          type="datetime"
        />
        <Field
          addonAfter={
            <i
              className="cap-calendar-2"
            />
          }
          className="adminDate"
          component={[Function]}
          dateTimeInputProps={
            Object {
              "disabled": false,
              "id": "event_input_endAt",
            }
          }
          formName="EventForm"
          id="event_endAt"
          label={
            <div>
              <FormattedMessage
                id="ending-date"
                values={Object {}}
              />
              <div
                className="excerpt inline"
              >
                <FormattedMessage
                  id="global.optional"
                  values={Object {}}
                />
              </div>
            </div>
          }
          name="endAt"
          type="datetime"
        />
      </div>
      <Field
        component={[Function]}
        id="event_media"
        label={
          <div>
            <FormattedMessage
              id="global.illustration"
              values={Object {}}
            />
            <div
              className="excerpt inline"
            >
              <FormattedMessage
                id="global.optional"
                values={Object {}}
              />
            </div>
          </div>
        }
        name="media"
        type="image"
      />
    </div>
    <Field
      component={[Function]}
      disabled={false}
      label={
        <React.Fragment>
          <FormattedMessage
            id="global.meta.description"
            values={Object {}}
          />
          <span
            className="excerpt inline"
          >
            <FormattedMessage
              id="global.optional"
              values={Object {}}
            />
             
            <OverlayTrigger
              defaultOverlayShown={false}
              overlay={
                <_default
                  className="text-left"
                  id="tooltip-top"
                  style={
                    Object {
                      "wordBreak": "break-word",
                    }
                  }
                >
                  <FormattedMessage
                    id="admin.help.metadescription"
                    values={Object {}}
                  />
                </_default>
              }
              placement="top"
              trigger={
                Array [
                  "hover",
                  "focus",
                ]
              }
            >
              <ForwardRef(ProjectContentAdminForm__InformationIcon) />
            </OverlayTrigger>
          </span>
        </React.Fragment>
      }
      name="metadescription"
      type="textarea"
    />
    <div
      className="box-header d-flex"
    >
      <h3
        className="box-title"
      >
        <FormattedMessage
          id="form.label_category"
          values={Object {}}
        />
        <EventForm__TitleHint>
            
           
          <FormattedMessage
            id="allow-event-linking"
            values={Object {}}
          />
        </EventForm__TitleHint>
      </h3>
    </div>
    <Relay(injectIntl(SelectProject))
      clearable={true}
      disabled={false}
      label="admin.fields.theme.projects_count"
      multi={true}
      name="projects"
      optional={false}
      placeholder="select-project"
      query={
        Object {
          "$fragmentRefs": null,
          "$refType": null,
          "viewer": Object {
            "isAdmin": true,
            "isSuperAdmin": false,
          },
        }
      }
    />
    <Relay(injectIntl(SelectStep))
      clearable={true}
      disabled={true}
      label="project.show.meta.step.title"
      multi={true}
      name="steps"
      optional={false}
      projectIds={Array []}
      query={
        Object {
          "$fragmentRefs": null,
          "$refType": null,
          "viewer": Object {
            "isAdmin": true,
            "isSuperAdmin": false,
          },
        }
      }
    />
    <div>
      <div>
        <div
          className="box-header"
        >
          <h3
            className="box-title"
          >
            <FormattedMessage
              id="global.options"
              values={Object {}}
            />
          </h3>
        </div>
        <Field
          component={[Function]}
          disabled={false}
          id="event_registrable"
          label={
            <FormattedMessage
              id="inscriptions-on-platform"
              values={Object {}}
            />
          }
          name="guestListEnabled"
          type="checkbox"
        />
        <Field
          component={[Function]}
          id="event_adminAuthorizeDataTransfer"
          label={
            <FormattedMessage
              id="authorize-transfer-of-data-to-event-organizer"
              values={Object {}}
            />
          }
          name="adminAuthorizeDataTransfer"
          type="checkbox"
        />
        <Field
          component={[Function]}
          disabled={false}
          id="event_commentable"
          label={
            <FormattedMessage
              id="admin.fields.proposal.comments"
              values={Object {}}
            />
          }
          name="commentable"
          type="checkbox"
        />
      </div>
      <div>
        <div
          className="box-header pt-0"
        >
          <h3
            className="box-title"
          >
            <FormattedMessage
              id="global.publication"
              values={Object {}}
            />
          </h3>
        </div>
        <Field
          component={[Function]}
          disabled={false}
          id="event_enabled"
          label={
            <FormattedMessage
              id="global.published"
              values={Object {}}
            />
          }
          name="enabled"
          type="checkbox"
        />
        <div
          className="box-header"
        >
          <h3
            className="box-title replay-container"
          >
            <FormattedMessage
              id="global.replay"
              values={Object {}}
            />
          </h3>
          <EventForm__JitsiNoReplayContainer>
            <FormattedHTMLMessage
              id="activate-jitsi-recording-hint"
              tagName="span"
              values={Object {}}
            />
          </EventForm__JitsiNoReplayContainer>
        </div>
        <div
          className="box-header"
        >
          <h3
            className="box-title"
          >
            <FormattedMessage
              id="global-customization"
              values={Object {}}
            />
          </h3>
        </div>
        <Field
          component={[Function]}
          disabled={false}
          label={
            <React.Fragment>
              <FormattedMessage
                id="admin.customcode"
                values={Object {}}
              />
              <span
                className="excerpt inline"
              >
                <FormattedMessage
                  id="global.optional"
                  values={Object {}}
                />
                 
                <OverlayTrigger
                  defaultOverlayShown={false}
                  overlay={
                    <_default
                      className="text-left"
                      id="tooltip-top"
                      style={
                        Object {
                          "wordBreak": "break-word",
                        }
                      }
                    >
                      <FormattedMessage
                        id="admin.help.customcode"
                        values={Object {}}
                      />
                    </_default>
                  }
                  placement="top"
                  trigger={
                    Array [
                      "hover",
                      "focus",
                    ]
                  }
                >
                  <ForwardRef(ProjectContentAdminForm__InformationIcon) />
                </OverlayTrigger>
              </span>
            </React.Fragment>
          }
          name="customcode"
          placeholder="<script type=\\"text/javascript\\"> </script>\\""
          type="textarea"
        />
      </div>
    </div>
  </form>
</EventForm__FormContainer>
`;

exports[`<EventForm /> it renders correctly on BO a toggle with remote event enabled 1`] = `
<EventForm__FormContainer>
  <form
    className="eventForm "
    onSubmit={[MockFunction]}
  >
    <EventForm__PageTitleContainer>
      <h3
        className="box-title"
      >
        <FormattedMessage
          id="global.general"
          values={Object {}}
        />
      </h3>
      <span
        className="mr-30 mt-15"
      />
    </EventForm__PageTitleContainer>
    <div
      className="color-dark-gray font-size-16"
    />
    <div
      className="box-body"
    >
      <Field
        component={[Function]}
        id="isPresential"
        label={
          <FormattedMessage
            id="global.type"
            values={Object {}}
          />
        }
        name="isPresential"
        type="radio-buttons"
      >
        <ToggleButton
          id="presential"
          onClick={[Function]}
          value={true}
        >
          <FormattedMessage
            id="global.presential"
            values={Object {}}
          />
        </ToggleButton>
        <ToggleButton
          id="remote"
          onClick={[Function]}
          value={false}
        >
          <FormattedMessage
            id="global.online"
            values={Object {}}
          />
        </ToggleButton>
      </Field>
      <Field
        component={[Function]}
        disabled={false}
        id="event_title"
        label={
          <FormattedMessage
            id="global.title"
            values={Object {}}
          />
        }
        name="title"
        type="text"
      />
      <UserListField
        ariaControls="EventForm-filter-user-listbox"
        authorOfEvent={false}
        autoload={true}
        className=""
        clearable={false}
        debounce={false}
        disabled={false}
        id="event_author"
        inputClassName="fake-inputClassName"
        label={
          <FormattedMessage
            id="global.author"
            values={Object {}}
          />
        }
        labelClassName={null}
        multi={false}
        name="author"
        placeholder="select-author"
        selectFieldIsObject={true}
      />
      <UserListField
        ariaControls="EventForm-filter-user-listbox"
        authorOfEvent={false}
        autoload={true}
        className=""
        clearable={false}
        debounce={false}
        disabled={false}
        id="event_animator"
        inputClassName="fake-inputClassName"
        label={
          <FormattedMessage
            id="global.animator"
            values={Object {}}
          />
        }
        labelClassName={null}
        multi={false}
        name="animator"
        placeholder={null}
        selectFieldIsObject={true}
      />
      <Field
        addressProps={
          Object {
            "getAddress": [Function],
          }
        }
        component={[Function]}
        disabled={false}
        formName="EventForm"
        id="event_address"
        label={
          <div>
            <FormattedMessage
              id="proposal_form.address"
              values={Object {}}
            />
            <div
              className="excerpt inline"
            >
              <FormattedMessage
                id="global.optional"
                values={Object {}}
              />
            </div>
          </div>
        }
        name="addressText"
        placeholder="proposal.map.form.placeholder"
        type="address"
      />
      <Field
        component={[Function]}
        disabled={false}
        id="event_body"
        label={
          <FormattedMessage
            id="global.description"
            values={Object {}}
          />
        }
        name="body"
        type="admin-editor"
      />
      <div
        className="datePickContainer"
      >
        <Field
          addonAfter={
            <i
              className="cap-calendar-2"
            />
          }
          component={[Function]}
          dateTimeInputProps={
            Object {
              "disabled": false,
              "id": "event_input_startAt",
            }
          }
          formName="EventForm"
          id="event_startAt"
          label={
            <FormattedMessage
              id="start-date"
              values={Object {}}
            />
          }
          name="startAt"
          timeFormat={false}
          type="datetime"
        />
        <Field
          addonAfter={
            <i
              className="cap-calendar-2"
            />
          }
          className="adminDate"
          component={[Function]}
          dateTimeInputProps={
            Object {
              "disabled": false,
              "id": "event_input_endAt",
            }
          }
          formName="EventForm"
          id="event_endAt"
          label={
            <div>
              <FormattedMessage
                id="ending-date"
                values={Object {}}
              />
              <div
                className="excerpt inline"
              >
                <FormattedMessage
                  id="global.optional"
                  values={Object {}}
                />
              </div>
            </div>
          }
          name="endAt"
          type="datetime"
        />
      </div>
      <Field
        component={[Function]}
        id="event_media"
        label={
          <div>
            <FormattedMessage
              id="global.illustration"
              values={Object {}}
            />
            <div
              className="excerpt inline"
            >
              <FormattedMessage
                id="global.optional"
                values={Object {}}
              />
            </div>
          </div>
        }
        name="media"
        type="image"
      />
    </div>
    <Field
      component={[Function]}
      disabled={false}
      label={
        <React.Fragment>
          <FormattedMessage
            id="global.meta.description"
            values={Object {}}
          />
          <span
            className="excerpt inline"
          >
            <FormattedMessage
              id="global.optional"
              values={Object {}}
            />
             
            <OverlayTrigger
              defaultOverlayShown={false}
              overlay={
                <_default
                  className="text-left"
                  id="tooltip-top"
                  style={
                    Object {
                      "wordBreak": "break-word",
                    }
                  }
                >
                  <FormattedMessage
                    id="admin.help.metadescription"
                    values={Object {}}
                  />
                </_default>
              }
              placement="top"
              trigger={
                Array [
                  "hover",
                  "focus",
                ]
              }
            >
              <ForwardRef(ProjectContentAdminForm__InformationIcon) />
            </OverlayTrigger>
          </span>
        </React.Fragment>
      }
      name="metadescription"
      type="textarea"
    />
    <div
      className="box-header d-flex"
    >
      <h3
        className="box-title"
      >
        <FormattedMessage
          id="form.label_category"
          values={Object {}}
        />
        <EventForm__TitleHint>
            
           
          <FormattedMessage
            id="allow-event-linking"
            values={Object {}}
          />
        </EventForm__TitleHint>
      </h3>
    </div>
    <Relay(injectIntl(SelectProject))
      clearable={true}
      disabled={false}
      label="admin.fields.theme.projects_count"
      multi={true}
      name="projects"
      optional={false}
      placeholder="select-project"
      query={
        Object {
          "$fragmentRefs": null,
          "$refType": null,
          "viewer": Object {
            "isAdmin": true,
            "isSuperAdmin": false,
          },
        }
      }
    />
    <Relay(injectIntl(SelectStep))
      clearable={true}
      disabled={true}
      label="project.show.meta.step.title"
      multi={true}
      name="steps"
      optional={false}
      projectIds={Array []}
      query={
        Object {
          "$fragmentRefs": null,
          "$refType": null,
          "viewer": Object {
            "isAdmin": true,
            "isSuperAdmin": false,
          },
        }
      }
    />
    <div>
      <div>
        <div
          className="box-header"
        >
          <h3
            className="box-title"
          >
            <FormattedMessage
              id="global.options"
              values={Object {}}
            />
          </h3>
        </div>
        <Field
          component={[Function]}
          disabled={false}
          id="event_registrable"
          label={
            <FormattedMessage
              id="inscriptions-on-platform"
              values={Object {}}
            />
          }
          name="guestListEnabled"
          type="checkbox"
        />
        <Field
          component={[Function]}
          id="event_adminAuthorizeDataTransfer"
          label={
            <FormattedMessage
              id="authorize-transfer-of-data-to-event-organizer"
              values={Object {}}
            />
          }
          name="adminAuthorizeDataTransfer"
          type="checkbox"
        />
        <Field
          component={[Function]}
          disabled={false}
          id="event_commentable"
          label={
            <FormattedMessage
              id="admin.fields.proposal.comments"
              values={Object {}}
            />
          }
          name="commentable"
          type="checkbox"
        />
      </div>
      <div>
        <div
          className="box-header pt-0"
        >
          <h3
            className="box-title"
          >
            <FormattedMessage
              id="global.publication"
              values={Object {}}
            />
          </h3>
        </div>
        <Field
          component={[Function]}
          disabled={false}
          id="event_enabled"
          label={
            <FormattedMessage
              id="global.published"
              values={Object {}}
            />
          }
          name="enabled"
          type="checkbox"
        />
        <div
          className="box-header"
        >
          <h3
            className="box-title replay-container"
          >
            <FormattedMessage
              id="global.replay"
              values={Object {}}
            />
          </h3>
          <EventForm__JitsiNoReplayContainer>
            <FormattedHTMLMessage
              id="activate-jitsi-recording-hint"
              tagName="span"
              values={Object {}}
            />
          </EventForm__JitsiNoReplayContainer>
        </div>
        <div
          className="box-header"
        >
          <h3
            className="box-title"
          >
            <FormattedMessage
              id="global-customization"
              values={Object {}}
            />
          </h3>
        </div>
        <Field
          component={[Function]}
          disabled={false}
          label={
            <React.Fragment>
              <FormattedMessage
                id="admin.customcode"
                values={Object {}}
              />
              <span
                className="excerpt inline"
              >
                <FormattedMessage
                  id="global.optional"
                  values={Object {}}
                />
                 
                <OverlayTrigger
                  defaultOverlayShown={false}
                  overlay={
                    <_default
                      className="text-left"
                      id="tooltip-top"
                      style={
                        Object {
                          "wordBreak": "break-word",
                        }
                      }
                    >
                      <FormattedMessage
                        id="admin.help.customcode"
                        values={Object {}}
                      />
                    </_default>
                  }
                  placement="top"
                  trigger={
                    Array [
                      "hover",
                      "focus",
                    ]
                  }
                >
                  <ForwardRef(ProjectContentAdminForm__InformationIcon) />
                </OverlayTrigger>
              </span>
            </React.Fragment>
          }
          name="customcode"
          placeholder="<script type=\\"text/javascript\\"> </script>\\""
          type="textarea"
        />
      </div>
    </div>
  </form>
</EventForm__FormContainer>
`;

exports[`<EventForm /> it renders correctly with event complete 1`] = `
<EventForm__FormContainer>
  <form
    className="eventForm "
    onSubmit={[MockFunction]}
  >
    <EventForm__PageTitleContainer>
      <h3
        className="box-title"
      >
        <FormattedMessage
          id="global.general"
          values={Object {}}
        />
      </h3>
      <span
        className="mr-30 mt-15"
      />
    </EventForm__PageTitleContainer>
    <div
      className="color-dark-gray font-size-16"
    />
    <div
      className="box-body"
    >
      <Field
        component={[Function]}
        disabled={false}
        id="event_title"
        label={
          <FormattedMessage
            id="global.title"
            values={Object {}}
          />
        }
        name="title"
        type="text"
      />
      <UserListField
        ariaControls="EventForm-filter-user-listbox"
        authorOfEvent={false}
        autoload={true}
        className=""
        clearable={false}
        debounce={false}
        disabled={false}
        id="event_author"
        inputClassName="fake-inputClassName"
        label={
          <FormattedMessage
            id="global.author"
            values={Object {}}
          />
        }
        labelClassName={null}
        multi={false}
        name="author"
        placeholder="select-author"
        selectFieldIsObject={true}
      />
      <UserListField
        ariaControls="EventForm-filter-user-listbox"
        authorOfEvent={false}
        autoload={true}
        className=""
        clearable={false}
        debounce={false}
        disabled={false}
        id="event_animator"
        inputClassName="fake-inputClassName"
        label={
          <FormattedMessage
            id="global.animator"
            values={Object {}}
          />
        }
        labelClassName={null}
        multi={false}
        name="animator"
        placeholder={null}
        selectFieldIsObject={true}
      />
      <Field
        addressProps={
          Object {
            "getAddress": [Function],
          }
        }
        component={[Function]}
        disabled={false}
        formName="EventForm"
        id="event_address"
        label={
          <div>
            <FormattedMessage
              id="proposal_form.address"
              values={Object {}}
            />
            <div
              className="excerpt inline"
            >
              <FormattedMessage
                id="global.optional"
                values={Object {}}
              />
            </div>
          </div>
        }
        name="addressText"
        placeholder="proposal.map.form.placeholder"
        type="address"
      />
      <Field
        component={[Function]}
        disabled={false}
        id="event_body"
        label={
          <FormattedMessage
            id="global.description"
            values={Object {}}
          />
        }
        name="body"
        type="admin-editor"
      />
      <div
        className="datePickContainer"
      >
        <Field
          addonAfter={
            <i
              className="cap-calendar-2"
            />
          }
          component={[Function]}
          dateTimeInputProps={
            Object {
              "disabled": false,
              "id": "event_input_startAt",
            }
          }
          formName="EventForm"
          id="event_startAt"
          label={
            <FormattedMessage
              id="start-date"
              values={Object {}}
            />
          }
          name="startAt"
          timeFormat={false}
          type="datetime"
        />
        <Field
          addonAfter={
            <i
              className="cap-calendar-2"
            />
          }
          className="adminDate"
          component={[Function]}
          dateTimeInputProps={
            Object {
              "disabled": false,
              "id": "event_input_endAt",
            }
          }
          formName="EventForm"
          id="event_endAt"
          label={
            <div>
              <FormattedMessage
                id="ending-date"
                values={Object {}}
              />
              <div
                className="excerpt inline"
              >
                <FormattedMessage
                  id="global.optional"
                  values={Object {}}
                />
              </div>
            </div>
          }
          name="endAt"
          type="datetime"
        />
      </div>
      <Field
        component={[Function]}
        id="event_media"
        label={
          <div>
            <FormattedMessage
              id="global.illustration"
              values={Object {}}
            />
            <div
              className="excerpt inline"
            >
              <FormattedMessage
                id="global.optional"
                values={Object {}}
              />
            </div>
          </div>
        }
        name="media"
        type="image"
      />
    </div>
    <Field
      component={[Function]}
      disabled={false}
      label={
        <React.Fragment>
          <FormattedMessage
            id="global.meta.description"
            values={Object {}}
          />
          <span
            className="excerpt inline"
          >
            <FormattedMessage
              id="global.optional"
              values={Object {}}
            />
             
            <OverlayTrigger
              defaultOverlayShown={false}
              overlay={
                <_default
                  className="text-left"
                  id="tooltip-top"
                  style={
                    Object {
                      "wordBreak": "break-word",
                    }
                  }
                >
                  <FormattedMessage
                    id="admin.help.metadescription"
                    values={Object {}}
                  />
                </_default>
              }
              placement="top"
              trigger={
                Array [
                  "hover",
                  "focus",
                ]
              }
            >
              <ForwardRef(ProjectContentAdminForm__InformationIcon) />
            </OverlayTrigger>
          </span>
        </React.Fragment>
      }
      name="metadescription"
      type="textarea"
    />
    <div
      className="box-header d-flex"
    >
      <h3
        className="box-title"
      >
        <FormattedMessage
          id="form.label_category"
          values={Object {}}
        />
        <EventForm__TitleHint>
            
           
          <FormattedMessage
            id="allow-event-linking"
            values={Object {}}
          />
        </EventForm__TitleHint>
      </h3>
    </div>
    <Relay(injectIntl(SelectProject))
      clearable={true}
      disabled={false}
      label="admin.fields.theme.projects_count"
      multi={true}
      name="projects"
      optional={false}
      placeholder="select-project"
      query={
        Object {
          "$fragmentRefs": null,
          "$refType": null,
          "viewer": Object {
            "isAdmin": true,
            "isSuperAdmin": false,
          },
        }
      }
    />
    <Relay(injectIntl(SelectStep))
      clearable={true}
      disabled={true}
      label="project.show.meta.step.title"
      multi={true}
      name="steps"
      optional={false}
      projectIds={Array []}
      query={
        Object {
          "$fragmentRefs": null,
          "$refType": null,
          "viewer": Object {
            "isAdmin": true,
            "isSuperAdmin": false,
          },
        }
      }
    />
    <div>
      <div>
        <div
          className="box-header"
        >
          <h3
            className="box-title"
          >
            <FormattedMessage
              id="global.options"
              values={Object {}}
            />
          </h3>
        </div>
        <Field
          component={[Function]}
          disabled={false}
          id="event_registrable"
          label={
            <FormattedMessage
              id="inscriptions-on-platform"
              values={Object {}}
            />
          }
          name="guestListEnabled"
          type="checkbox"
        />
        <Field
          component={[Function]}
          id="event_adminAuthorizeDataTransfer"
          label={
            <FormattedMessage
              id="authorize-transfer-of-data-to-event-organizer"
              values={Object {}}
            />
          }
          name="adminAuthorizeDataTransfer"
          type="checkbox"
        />
        <Field
          component={[Function]}
          disabled={false}
          id="event_commentable"
          label={
            <FormattedMessage
              id="admin.fields.proposal.comments"
              values={Object {}}
            />
          }
          name="commentable"
          type="checkbox"
        />
      </div>
      <div>
        <div
          className="box-header pt-0"
        >
          <h3
            className="box-title"
          >
            <FormattedMessage
              id="global.publication"
              values={Object {}}
            />
          </h3>
        </div>
        <Field
          component={[Function]}
          disabled={false}
          id="event_enabled"
          label={
            <FormattedMessage
              id="global.published"
              values={Object {}}
            />
          }
          name="enabled"
          type="checkbox"
        />
        <div
          className="box-header"
        >
          <h3
            className="box-title replay-container"
          >
            <FormattedMessage
              id="global.replay"
              values={Object {}}
            />
          </h3>
          <EventForm__JitsiNoReplayContainer>
            <FormattedHTMLMessage
              id="activate-jitsi-recording-hint"
              tagName="span"
              values={Object {}}
            />
          </EventForm__JitsiNoReplayContainer>
        </div>
        <div
          className="box-header"
        >
          <h3
            className="box-title"
          >
            <FormattedMessage
              id="global-customization"
              values={Object {}}
            />
          </h3>
        </div>
        <Field
          component={[Function]}
          disabled={false}
          label={
            <React.Fragment>
              <FormattedMessage
                id="admin.customcode"
                values={Object {}}
              />
              <span
                className="excerpt inline"
              >
                <FormattedMessage
                  id="global.optional"
                  values={Object {}}
                />
                 
                <OverlayTrigger
                  defaultOverlayShown={false}
                  overlay={
                    <_default
                      className="text-left"
                      id="tooltip-top"
                      style={
                        Object {
                          "wordBreak": "break-word",
                        }
                      }
                    >
                      <FormattedMessage
                        id="admin.help.customcode"
                        values={Object {}}
                      />
                    </_default>
                  }
                  placement="top"
                  trigger={
                    Array [
                      "hover",
                      "focus",
                    ]
                  }
                >
                  <ForwardRef(ProjectContentAdminForm__InformationIcon) />
                </OverlayTrigger>
              </span>
            </React.Fragment>
          }
          name="customcode"
          placeholder="<script type=\\"text/javascript\\"> </script>\\""
          type="textarea"
        />
      </div>
    </div>
  </form>
</EventForm__FormContainer>
`;

exports[`<EventForm /> it renders correctly without default props 1`] = `
<EventForm__FormContainer>
  <form
    className="eventForm "
    onSubmit={[MockFunction]}
  >
    <EventForm__PageTitleContainer>
      <h3
        className="box-title"
      >
        <FormattedMessage
          id="global.general"
          values={Object {}}
        />
      </h3>
      <span
        className="mr-30 mt-15"
      />
    </EventForm__PageTitleContainer>
    <div
      className="color-dark-gray font-size-16"
    />
    <div
      className="box-body"
    >
      <Field
        component={[Function]}
        disabled={false}
        id="event_title"
        label={
          <FormattedMessage
            id="global.title"
            values={Object {}}
          />
        }
        name="title"
        type="text"
      />
      <UserListField
        ariaControls="EventForm-filter-user-listbox"
        authorOfEvent={false}
        autoload={true}
        className=""
        clearable={false}
        debounce={false}
        disabled={false}
        id="event_author"
        inputClassName="fake-inputClassName"
        label={
          <FormattedMessage
            id="global.author"
            values={Object {}}
          />
        }
        labelClassName={null}
        multi={false}
        name="author"
        placeholder="select-author"
        selectFieldIsObject={true}
      />
      <UserListField
        ariaControls="EventForm-filter-user-listbox"
        authorOfEvent={false}
        autoload={true}
        className=""
        clearable={false}
        debounce={false}
        disabled={false}
        id="event_animator"
        inputClassName="fake-inputClassName"
        label={
          <FormattedMessage
            id="global.animator"
            values={Object {}}
          />
        }
        labelClassName={null}
        multi={false}
        name="animator"
        placeholder={null}
        selectFieldIsObject={true}
      />
      <Field
        addressProps={
          Object {
            "getAddress": [Function],
          }
        }
        component={[Function]}
        disabled={false}
        formName="EventForm"
        id="event_address"
        label={
          <div>
            <FormattedMessage
              id="proposal_form.address"
              values={Object {}}
            />
            <div
              className="excerpt inline"
            >
              <FormattedMessage
                id="global.optional"
                values={Object {}}
              />
            </div>
          </div>
        }
        name="addressText"
        placeholder="proposal.map.form.placeholder"
        type="address"
      />
      <Field
        component={[Function]}
        disabled={false}
        id="event_body"
        label={
          <FormattedMessage
            id="global.description"
            values={Object {}}
          />
        }
        name="body"
        type="admin-editor"
      />
      <div
        className="datePickContainer"
      >
        <Field
          addonAfter={
            <i
              className="cap-calendar-2"
            />
          }
          component={[Function]}
          dateTimeInputProps={
            Object {
              "disabled": false,
              "id": "event_input_startAt",
            }
          }
          formName="EventForm"
          id="event_startAt"
          label={
            <FormattedMessage
              id="start-date"
              values={Object {}}
            />
          }
          name="startAt"
          timeFormat={false}
          type="datetime"
        />
        <Field
          addonAfter={
            <i
              className="cap-calendar-2"
            />
          }
          className="adminDate"
          component={[Function]}
          dateTimeInputProps={
            Object {
              "disabled": false,
              "id": "event_input_endAt",
            }
          }
          formName="EventForm"
          id="event_endAt"
          label={
            <div>
              <FormattedMessage
                id="ending-date"
                values={Object {}}
              />
              <div
                className="excerpt inline"
              >
                <FormattedMessage
                  id="global.optional"
                  values={Object {}}
                />
              </div>
            </div>
          }
          name="endAt"
          type="datetime"
        />
      </div>
      <Field
        component={[Function]}
        id="event_media"
        label={
          <div>
            <FormattedMessage
              id="global.illustration"
              values={Object {}}
            />
            <div
              className="excerpt inline"
            >
              <FormattedMessage
                id="global.optional"
                values={Object {}}
              />
            </div>
          </div>
        }
        name="media"
        type="image"
      />
    </div>
    <Field
      component={[Function]}
      disabled={false}
      label={
        <React.Fragment>
          <FormattedMessage
            id="global.meta.description"
            values={Object {}}
          />
          <span
            className="excerpt inline"
          >
            <FormattedMessage
              id="global.optional"
              values={Object {}}
            />
             
            <OverlayTrigger
              defaultOverlayShown={false}
              overlay={
                <_default
                  className="text-left"
                  id="tooltip-top"
                  style={
                    Object {
                      "wordBreak": "break-word",
                    }
                  }
                >
                  <FormattedMessage
                    id="admin.help.metadescription"
                    values={Object {}}
                  />
                </_default>
              }
              placement="top"
              trigger={
                Array [
                  "hover",
                  "focus",
                ]
              }
            >
              <ForwardRef(ProjectContentAdminForm__InformationIcon) />
            </OverlayTrigger>
          </span>
        </React.Fragment>
      }
      name="metadescription"
      type="textarea"
    />
    <div
      className="box-header d-flex"
    >
      <h3
        className="box-title"
      >
        <FormattedMessage
          id="form.label_category"
          values={Object {}}
        />
        <EventForm__TitleHint>
            
           
          <FormattedMessage
            id="allow-event-linking"
            values={Object {}}
          />
        </EventForm__TitleHint>
      </h3>
    </div>
    <Relay(injectIntl(SelectProject))
      clearable={true}
      disabled={false}
      label="admin.fields.theme.projects_count"
      multi={true}
      name="projects"
      optional={false}
      placeholder="select-project"
      query={
        Object {
          "$fragmentRefs": null,
          "$refType": null,
          "viewer": Object {
            "isAdmin": true,
            "isSuperAdmin": false,
          },
        }
      }
    />
    <Relay(injectIntl(SelectStep))
      clearable={true}
      disabled={true}
      label="project.show.meta.step.title"
      multi={true}
      name="steps"
      optional={false}
      projectIds={Array []}
      query={
        Object {
          "$fragmentRefs": null,
          "$refType": null,
          "viewer": Object {
            "isAdmin": true,
            "isSuperAdmin": false,
          },
        }
      }
    />
    <div>
      <div>
        <div
          className="box-header"
        >
          <h3
            className="box-title"
          >
            <FormattedMessage
              id="global.options"
              values={Object {}}
            />
          </h3>
        </div>
        <Field
          component={[Function]}
          disabled={false}
          id="event_registrable"
          label={
            <FormattedMessage
              id="inscriptions-on-platform"
              values={Object {}}
            />
          }
          name="guestListEnabled"
          type="checkbox"
        />
        <Field
          component={[Function]}
          id="event_adminAuthorizeDataTransfer"
          label={
            <FormattedMessage
              id="authorize-transfer-of-data-to-event-organizer"
              values={Object {}}
            />
          }
          name="adminAuthorizeDataTransfer"
          type="checkbox"
        />
        <Field
          component={[Function]}
          disabled={false}
          id="event_commentable"
          label={
            <FormattedMessage
              id="admin.fields.proposal.comments"
              values={Object {}}
            />
          }
          name="commentable"
          type="checkbox"
        />
      </div>
      <div>
        <div
          className="box-header pt-0"
        >
          <h3
            className="box-title"
          >
            <FormattedMessage
              id="global.publication"
              values={Object {}}
            />
          </h3>
        </div>
        <Field
          component={[Function]}
          disabled={false}
          id="event_enabled"
          label={
            <FormattedMessage
              id="global.published"
              values={Object {}}
            />
          }
          name="enabled"
          type="checkbox"
        />
        <div
          className="box-header"
        >
          <h3
            className="box-title replay-container"
          >
            <FormattedMessage
              id="global.replay"
              values={Object {}}
            />
          </h3>
          <EventForm__JitsiNoReplayContainer>
            <FormattedHTMLMessage
              id="activate-jitsi-recording-hint"
              tagName="span"
              values={Object {}}
            />
          </EventForm__JitsiNoReplayContainer>
        </div>
        <div
          className="box-header"
        >
          <h3
            className="box-title"
          >
            <FormattedMessage
              id="global-customization"
              values={Object {}}
            />
          </h3>
        </div>
        <Field
          component={[Function]}
          disabled={false}
          label={
            <React.Fragment>
              <FormattedMessage
                id="admin.customcode"
                values={Object {}}
              />
              <span
                className="excerpt inline"
              >
                <FormattedMessage
                  id="global.optional"
                  values={Object {}}
                />
                 
                <OverlayTrigger
                  defaultOverlayShown={false}
                  overlay={
                    <_default
                      className="text-left"
                      id="tooltip-top"
                      style={
                        Object {
                          "wordBreak": "break-word",
                        }
                      }
                    >
                      <FormattedMessage
                        id="admin.help.customcode"
                        values={Object {}}
                      />
                    </_default>
                  }
                  placement="top"
                  trigger={
                    Array [
                      "hover",
                      "focus",
                    ]
                  }
                >
                  <ForwardRef(ProjectContentAdminForm__InformationIcon) />
                </OverlayTrigger>
              </span>
            </React.Fragment>
          }
          name="customcode"
          placeholder="<script type=\\"text/javascript\\"> </script>\\""
          type="textarea"
        />
      </div>
    </div>
  </form>
</EventForm__FormContainer>
`;

exports[`<EventForm /> it renders event form disabled 1`] = `
<EventForm__FormContainer>
  <form
    className="eventForm "
    onSubmit={[MockFunction]}
  >
    <EventForm__PageTitleContainer>
      <h3
        className="box-title"
      >
        <FormattedMessage
          id="global.general"
          values={Object {}}
        />
      </h3>
      <span
        className="mr-30 mt-15"
      />
    </EventForm__PageTitleContainer>
    <div
      className="color-dark-gray font-size-16"
    />
    <div
      className="box-body"
    >
      <Field
        component={[Function]}
        disabled={false}
        id="event_title"
        label={
          <FormattedMessage
            id="global.title"
            values={Object {}}
          />
        }
        name="title"
        type="text"
      />
      <UserListField
        ariaControls="EventForm-filter-user-listbox"
        authorOfEvent={false}
        autoload={true}
        className=""
        clearable={false}
        debounce={false}
        disabled={false}
        id="event_author"
        inputClassName="fake-inputClassName"
        label={
          <FormattedMessage
            id="global.author"
            values={Object {}}
          />
        }
        labelClassName={null}
        multi={false}
        name="author"
        placeholder="select-author"
        selectFieldIsObject={true}
      />
      <UserListField
        ariaControls="EventForm-filter-user-listbox"
        authorOfEvent={false}
        autoload={true}
        className=""
        clearable={false}
        debounce={false}
        disabled={false}
        id="event_animator"
        inputClassName="fake-inputClassName"
        label={
          <FormattedMessage
            id="global.animator"
            values={Object {}}
          />
        }
        labelClassName={null}
        multi={false}
        name="animator"
        placeholder={null}
        selectFieldIsObject={true}
      />
      <Field
        addressProps={
          Object {
            "getAddress": [Function],
          }
        }
        component={[Function]}
        disabled={false}
        formName="EventForm"
        id="event_address"
        label={
          <div>
            <FormattedMessage
              id="proposal_form.address"
              values={Object {}}
            />
            <div
              className="excerpt inline"
            >
              <FormattedMessage
                id="global.optional"
                values={Object {}}
              />
            </div>
          </div>
        }
        name="addressText"
        placeholder="proposal.map.form.placeholder"
        type="address"
      />
      <Field
        component={[Function]}
        disabled={false}
        id="event_body"
        label={
          <FormattedMessage
            id="global.description"
            values={Object {}}
          />
        }
        name="body"
        type="admin-editor"
      />
      <div
        className="datePickContainer"
      >
        <Field
          addonAfter={
            <i
              className="cap-calendar-2"
            />
          }
          component={[Function]}
          dateTimeInputProps={
            Object {
              "disabled": false,
              "id": "event_input_startAt",
            }
          }
          formName="EventForm"
          id="event_startAt"
          label={
            <FormattedMessage
              id="start-date"
              values={Object {}}
            />
          }
          name="startAt"
          timeFormat={false}
          type="datetime"
        />
        <Field
          addonAfter={
            <i
              className="cap-calendar-2"
            />
          }
          className="adminDate"
          component={[Function]}
          dateTimeInputProps={
            Object {
              "disabled": false,
              "id": "event_input_endAt",
            }
          }
          formName="EventForm"
          id="event_endAt"
          label={
            <div>
              <FormattedMessage
                id="ending-date"
                values={Object {}}
              />
              <div
                className="excerpt inline"
              >
                <FormattedMessage
                  id="global.optional"
                  values={Object {}}
                />
              </div>
            </div>
          }
          name="endAt"
          type="datetime"
        />
      </div>
      <Field
        component={[Function]}
        id="event_media"
        label={
          <div>
            <FormattedMessage
              id="global.illustration"
              values={Object {}}
            />
            <div
              className="excerpt inline"
            >
              <FormattedMessage
                id="global.optional"
                values={Object {}}
              />
            </div>
          </div>
        }
        name="media"
        type="image"
      />
    </div>
    <Field
      component={[Function]}
      disabled={false}
      label={
        <React.Fragment>
          <FormattedMessage
            id="global.meta.description"
            values={Object {}}
          />
          <span
            className="excerpt inline"
          >
            <FormattedMessage
              id="global.optional"
              values={Object {}}
            />
             
            <OverlayTrigger
              defaultOverlayShown={false}
              overlay={
                <_default
                  className="text-left"
                  id="tooltip-top"
                  style={
                    Object {
                      "wordBreak": "break-word",
                    }
                  }
                >
                  <FormattedMessage
                    id="admin.help.metadescription"
                    values={Object {}}
                  />
                </_default>
              }
              placement="top"
              trigger={
                Array [
                  "hover",
                  "focus",
                ]
              }
            >
              <ForwardRef(ProjectContentAdminForm__InformationIcon) />
            </OverlayTrigger>
          </span>
        </React.Fragment>
      }
      name="metadescription"
      type="textarea"
    />
    <div
      className="box-header d-flex"
    >
      <h3
        className="box-title"
      >
        <FormattedMessage
          id="form.label_category"
          values={Object {}}
        />
        <EventForm__TitleHint>
            
           
          <FormattedMessage
            id="allow-event-linking"
            values={Object {}}
          />
        </EventForm__TitleHint>
      </h3>
    </div>
    <Relay(injectIntl(SelectProject))
      clearable={true}
      disabled={false}
      label="admin.fields.theme.projects_count"
      multi={true}
      name="projects"
      optional={false}
      placeholder="select-project"
      query={
        Object {
          "$fragmentRefs": null,
          "$refType": null,
          "viewer": Object {
            "isAdmin": true,
            "isSuperAdmin": false,
          },
        }
      }
    />
    <Relay(injectIntl(SelectStep))
      clearable={true}
      disabled={true}
      label="project.show.meta.step.title"
      multi={true}
      name="steps"
      optional={false}
      projectIds={Array []}
      query={
        Object {
          "$fragmentRefs": null,
          "$refType": null,
          "viewer": Object {
            "isAdmin": true,
            "isSuperAdmin": false,
          },
        }
      }
    />
    <div>
      <div>
        <div
          className="box-header"
        >
          <h3
            className="box-title"
          >
            <FormattedMessage
              id="global.options"
              values={Object {}}
            />
          </h3>
        </div>
        <Field
          component={[Function]}
          disabled={false}
          id="event_registrable"
          label={
            <FormattedMessage
              id="inscriptions-on-platform"
              values={Object {}}
            />
          }
          name="guestListEnabled"
          type="checkbox"
        />
        <Field
          component={[Function]}
          id="event_adminAuthorizeDataTransfer"
          label={
            <FormattedMessage
              id="authorize-transfer-of-data-to-event-organizer"
              values={Object {}}
            />
          }
          name="adminAuthorizeDataTransfer"
          type="checkbox"
        />
        <Field
          component={[Function]}
          disabled={false}
          id="event_commentable"
          label={
            <FormattedMessage
              id="admin.fields.proposal.comments"
              values={Object {}}
            />
          }
          name="commentable"
          type="checkbox"
        />
      </div>
      <div>
        <div
          className="box-header pt-0"
        >
          <h3
            className="box-title"
          >
            <FormattedMessage
              id="global.publication"
              values={Object {}}
            />
          </h3>
        </div>
        <Field
          component={[Function]}
          disabled={false}
          id="event_enabled"
          label={
            <FormattedMessage
              id="global.published"
              values={Object {}}
            />
          }
          name="enabled"
          type="checkbox"
        />
        <div
          className="box-header"
        >
          <h3
            className="box-title replay-container"
          >
            <FormattedMessage
              id="global.replay"
              values={Object {}}
            />
          </h3>
          <EventForm__JitsiNoReplayContainer>
            <FormattedHTMLMessage
              id="activate-jitsi-recording-hint"
              tagName="span"
              values={Object {}}
            />
          </EventForm__JitsiNoReplayContainer>
        </div>
        <div
          className="box-header"
        >
          <h3
            className="box-title"
          >
            <FormattedMessage
              id="global-customization"
              values={Object {}}
            />
          </h3>
        </div>
        <Field
          component={[Function]}
          disabled={false}
          label={
            <React.Fragment>
              <FormattedMessage
                id="admin.customcode"
                values={Object {}}
              />
              <span
                className="excerpt inline"
              >
                <FormattedMessage
                  id="global.optional"
                  values={Object {}}
                />
                 
                <OverlayTrigger
                  defaultOverlayShown={false}
                  overlay={
                    <_default
                      className="text-left"
                      id="tooltip-top"
                      style={
                        Object {
                          "wordBreak": "break-word",
                        }
                      }
                    >
                      <FormattedMessage
                        id="admin.help.customcode"
                        values={Object {}}
                      />
                    </_default>
                  }
                  placement="top"
                  trigger={
                    Array [
                      "hover",
                      "focus",
                    ]
                  }
                >
                  <ForwardRef(ProjectContentAdminForm__InformationIcon) />
                </OverlayTrigger>
              </span>
            </React.Fragment>
          }
          name="customcode"
          placeholder="<script type=\\"text/javascript\\"> </script>\\""
          type="textarea"
        />
      </div>
    </div>
  </form>
</EventForm__FormContainer>
`;
