// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ProposalEditModal /> should render correctly with DELETED status 1`] = `
<Modal
  animation={false}
  aria-labelledby="contained-modal-title-lg"
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  bsSize="large"
  dialogComponentClass={[Function]}
  enforceFocus={true}
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onHide={[Function]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  show={true}
>
  <ModalHeader
    bsClass="modal-header"
    closeButton={true}
    closeLabel="Close"
  >
    <ModalTitle
      bsClass="modal-title"
      componentClass="h4"
      id="contained-modal-title-lg"
    >
      <FormattedMessage
        id="global.edit"
        values={Object {}}
      />
    </ModalTitle>
  </ModalHeader>
  <ModalBody
    bsClass="modal-body"
    componentClass="div"
  >
    <ForwardRef(Relay(ProposalDraftAlert))
      proposal={
        Object {
          "$fragmentRefs": null,
          "$refType": null,
          "form": Object {
            "$fragmentRefs": null,
          },
          "id": "1",
          "publicationStatus": "DELETED",
        }
      }
    />
    <ForwardRef(Relay(Connect(injectIntl(ReduxForm))))
      proposal={
        Object {
          "$fragmentRefs": null,
          "$refType": null,
          "form": Object {
            "$fragmentRefs": null,
          },
          "id": "1",
          "publicationStatus": "DELETED",
        }
      }
      proposalForm={
        Object {
          "$fragmentRefs": null,
        }
      }
    />
  </ModalBody>
  <ModalFooter
    bsClass="modal-footer"
    componentClass="div"
  >
    <CloseButton
      label="global.cancel"
      onClose={[Function]}
    />
    <Connect(SubmitButton)
      disabled={false}
      id="confirm-proposal-edit"
      isSubmitting={false}
      label="global.submit"
      onSubmit={[Function]}
    />
  </ModalFooter>
</Modal>
`;

exports[`<ProposalEditModal /> should render correctly with DRAFT status 1`] = `
<Modal
  animation={false}
  aria-labelledby="contained-modal-title-lg"
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  bsSize="large"
  dialogComponentClass={[Function]}
  enforceFocus={true}
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onHide={[Function]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  show={true}
>
  <ModalHeader
    bsClass="modal-header"
    closeButton={true}
    closeLabel="Close"
  >
    <ModalTitle
      bsClass="modal-title"
      componentClass="h4"
      id="contained-modal-title-lg"
    >
      <FormattedMessage
        id="global.edit"
        values={Object {}}
      />
    </ModalTitle>
  </ModalHeader>
  <ModalBody
    bsClass="modal-body"
    componentClass="div"
  >
    <ForwardRef(Relay(ProposalDraftAlert))
      proposal={
        Object {
          "$fragmentRefs": null,
          "$refType": null,
          "form": Object {
            "$fragmentRefs": null,
          },
          "id": "1",
          "publicationStatus": "DRAFT",
        }
      }
    />
    <ForwardRef(Relay(Connect(injectIntl(ReduxForm))))
      proposal={
        Object {
          "$fragmentRefs": null,
          "$refType": null,
          "form": Object {
            "$fragmentRefs": null,
          },
          "id": "1",
          "publicationStatus": "DRAFT",
        }
      }
      proposalForm={
        Object {
          "$fragmentRefs": null,
        }
      }
    />
  </ModalBody>
  <ModalFooter
    bsClass="modal-footer"
    componentClass="div"
  >
    <CloseButton
      label="global.cancel"
      onClose={[Function]}
    />
    <Connect(SubmitButton)
      disabled={true}
      id="confirm-proposal-create-as-draft"
      isSubmitting={false}
      label="global.save_as_draft"
      onSubmit={[Function]}
    />
    <Connect(SubmitButton)
      disabled={false}
      id="confirm-proposal-edit"
      isSubmitting={false}
      label="global.submit"
      onSubmit={[Function]}
    />
  </ModalFooter>
</Modal>
`;

exports[`<ProposalEditModal /> should render correctly with PUBLISHED status 1`] = `
<Modal
  animation={false}
  aria-labelledby="contained-modal-title-lg"
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  bsSize="large"
  dialogComponentClass={[Function]}
  enforceFocus={true}
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onHide={[Function]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  show={true}
>
  <ModalHeader
    bsClass="modal-header"
    closeButton={true}
    closeLabel="Close"
  >
    <ModalTitle
      bsClass="modal-title"
      componentClass="h4"
      id="contained-modal-title-lg"
    >
      <FormattedMessage
        id="global.edit"
        values={Object {}}
      />
    </ModalTitle>
  </ModalHeader>
  <ModalBody
    bsClass="modal-body"
    componentClass="div"
  >
    <ForwardRef(Relay(ProposalDraftAlert))
      proposal={
        Object {
          "$fragmentRefs": null,
          "$refType": null,
          "form": Object {
            "$fragmentRefs": null,
          },
          "id": "1",
          "publicationStatus": "PUBLISHED",
        }
      }
    />
    <ForwardRef(Relay(Connect(injectIntl(ReduxForm))))
      proposal={
        Object {
          "$fragmentRefs": null,
          "$refType": null,
          "form": Object {
            "$fragmentRefs": null,
          },
          "id": "1",
          "publicationStatus": "PUBLISHED",
        }
      }
      proposalForm={
        Object {
          "$fragmentRefs": null,
        }
      }
    />
  </ModalBody>
  <ModalFooter
    bsClass="modal-footer"
    componentClass="div"
  >
    <CloseButton
      label="global.cancel"
      onClose={[Function]}
    />
    <Connect(SubmitButton)
      disabled={false}
      id="confirm-proposal-edit"
      isSubmitting={false}
      label="global.submit"
      onSubmit={[Function]}
    />
  </ModalFooter>
</Modal>
`;

exports[`<ProposalEditModal /> should render correctly with TRASHED status 1`] = `
<Modal
  animation={false}
  aria-labelledby="contained-modal-title-lg"
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  bsSize="large"
  dialogComponentClass={[Function]}
  enforceFocus={true}
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onHide={[Function]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  show={true}
>
  <ModalHeader
    bsClass="modal-header"
    closeButton={true}
    closeLabel="Close"
  >
    <ModalTitle
      bsClass="modal-title"
      componentClass="h4"
      id="contained-modal-title-lg"
    >
      <FormattedMessage
        id="global.edit"
        values={Object {}}
      />
    </ModalTitle>
  </ModalHeader>
  <ModalBody
    bsClass="modal-body"
    componentClass="div"
  >
    <ForwardRef(Relay(ProposalDraftAlert))
      proposal={
        Object {
          "$fragmentRefs": null,
          "$refType": null,
          "form": Object {
            "$fragmentRefs": null,
          },
          "id": "1",
          "publicationStatus": "TRASHED",
        }
      }
    />
    <ForwardRef(Relay(Connect(injectIntl(ReduxForm))))
      proposal={
        Object {
          "$fragmentRefs": null,
          "$refType": null,
          "form": Object {
            "$fragmentRefs": null,
          },
          "id": "1",
          "publicationStatus": "TRASHED",
        }
      }
      proposalForm={
        Object {
          "$fragmentRefs": null,
        }
      }
    />
  </ModalBody>
  <ModalFooter
    bsClass="modal-footer"
    componentClass="div"
  >
    <CloseButton
      label="global.cancel"
      onClose={[Function]}
    />
    <Connect(SubmitButton)
      disabled={false}
      id="confirm-proposal-edit"
      isSubmitting={false}
      label="global.submit"
      onSubmit={[Function]}
    />
  </ModalFooter>
</Modal>
`;

exports[`<ProposalEditModal /> should render correctly with TRASHED_NOT_VISIBLE status 1`] = `
<Modal
  animation={false}
  aria-labelledby="contained-modal-title-lg"
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  bsSize="large"
  dialogComponentClass={[Function]}
  enforceFocus={true}
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onHide={[Function]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  show={true}
>
  <ModalHeader
    bsClass="modal-header"
    closeButton={true}
    closeLabel="Close"
  >
    <ModalTitle
      bsClass="modal-title"
      componentClass="h4"
      id="contained-modal-title-lg"
    >
      <FormattedMessage
        id="global.edit"
        values={Object {}}
      />
    </ModalTitle>
  </ModalHeader>
  <ModalBody
    bsClass="modal-body"
    componentClass="div"
  >
    <ForwardRef(Relay(ProposalDraftAlert))
      proposal={
        Object {
          "$fragmentRefs": null,
          "$refType": null,
          "form": Object {
            "$fragmentRefs": null,
          },
          "id": "1",
          "publicationStatus": "TRASHED_NOT_VISIBLE",
        }
      }
    />
    <ForwardRef(Relay(Connect(injectIntl(ReduxForm))))
      proposal={
        Object {
          "$fragmentRefs": null,
          "$refType": null,
          "form": Object {
            "$fragmentRefs": null,
          },
          "id": "1",
          "publicationStatus": "TRASHED_NOT_VISIBLE",
        }
      }
      proposalForm={
        Object {
          "$fragmentRefs": null,
        }
      }
    />
  </ModalBody>
  <ModalFooter
    bsClass="modal-footer"
    componentClass="div"
  >
    <CloseButton
      label="global.cancel"
      onClose={[Function]}
    />
    <Connect(SubmitButton)
      disabled={false}
      id="confirm-proposal-edit"
      isSubmitting={false}
      label="global.submit"
      onSubmit={[Function]}
    />
  </ModalFooter>
</Modal>
`;

exports[`<ProposalEditModal /> should render correctly with UNPUBLISHED status 1`] = `
<Modal
  animation={false}
  aria-labelledby="contained-modal-title-lg"
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  bsSize="large"
  dialogComponentClass={[Function]}
  enforceFocus={true}
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onHide={[Function]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  show={true}
>
  <ModalHeader
    bsClass="modal-header"
    closeButton={true}
    closeLabel="Close"
  >
    <ModalTitle
      bsClass="modal-title"
      componentClass="h4"
      id="contained-modal-title-lg"
    >
      <FormattedMessage
        id="global.edit"
        values={Object {}}
      />
    </ModalTitle>
  </ModalHeader>
  <ModalBody
    bsClass="modal-body"
    componentClass="div"
  >
    <ForwardRef(Relay(ProposalDraftAlert))
      proposal={
        Object {
          "$fragmentRefs": null,
          "$refType": null,
          "form": Object {
            "$fragmentRefs": null,
          },
          "id": "1",
          "publicationStatus": "UNPUBLISHED",
        }
      }
    />
    <ForwardRef(Relay(Connect(injectIntl(ReduxForm))))
      proposal={
        Object {
          "$fragmentRefs": null,
          "$refType": null,
          "form": Object {
            "$fragmentRefs": null,
          },
          "id": "1",
          "publicationStatus": "UNPUBLISHED",
        }
      }
      proposalForm={
        Object {
          "$fragmentRefs": null,
        }
      }
    />
  </ModalBody>
  <ModalFooter
    bsClass="modal-footer"
    componentClass="div"
  >
    <CloseButton
      label="global.cancel"
      onClose={[Function]}
    />
    <Connect(SubmitButton)
      disabled={false}
      id="confirm-proposal-edit"
      isSubmitting={false}
      label="global.submit"
      onSubmit={[Function]}
    />
  </ModalFooter>
</Modal>
`;
