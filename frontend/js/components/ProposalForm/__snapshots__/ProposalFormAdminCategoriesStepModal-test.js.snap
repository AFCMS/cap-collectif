// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ProposalFormAdminCategoriesStepModal /> render correctly 1`] = `
<Modal
  animation={true}
  aria-labelledby="report-modal-title-lg"
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  dialogComponentClass={[Function]}
  enforceFocus={true}
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onHide={[MockFunction]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  show={true}
>
  <ModalHeader
    bsClass="modal-header"
    closeButton={true}
    closeLabel="Close"
  >
    <ModalTitle
      bsClass="modal-title"
      componentClass="h4"
      id="report-modal-title-lg"
    >
      <FormattedMessage
        id="category_modal.update.title"
        values={Object {}}
      />
    </ModalTitle>
  </ModalHeader>
  <ModalBody
    bsClass="modal-body"
    componentClass="div"
  >
    <Field
      component={[Function]}
      id="member.name"
      label={
        <FormattedMessage
          id="global.title"
          values={Object {}}
        />
      }
      name="member.name"
      placeholder="category.without.title"
      type="text"
    />
  </ModalBody>
  <ModalFooter
    bsClass="modal-footer"
    componentClass="div"
  >
    <CloseButton
      label="global.cancel"
      onClose={[Function]}
    />
    <Connect(SubmitButton)
      disabled={false}
      id="ProposalFormAdminCategoriesStepModal-submit"
      isSubmitting={false}
      label="global.validate"
      onSubmit={[MockFunction]}
    />
  </ModalFooter>
</Modal>
`;

exports[`<ProposalFormAdminCategoriesStepModal /> render correctly with illustration enabled 1`] = `
<Modal
  animation={true}
  aria-labelledby="report-modal-title-lg"
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  dialogComponentClass={[Function]}
  enforceFocus={true}
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onHide={[MockFunction]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  show={true}
>
  <ModalHeader
    bsClass="modal-header"
    closeButton={true}
    closeLabel="Close"
  >
    <ModalTitle
      bsClass="modal-title"
      componentClass="h4"
      id="report-modal-title-lg"
    >
      <FormattedMessage
        id="category_modal.update.title"
        values={Object {}}
      />
    </ModalTitle>
  </ModalHeader>
  <ModalBody
    bsClass="modal-body"
    componentClass="div"
  >
    <Field
      component={[Function]}
      id="member.name"
      label={
        <FormattedMessage
          id="global.title"
          values={Object {}}
        />
      }
      name="member.name"
      placeholder="category.without.title"
      type="text"
    />
    <Label>
      <FormattedMessage
        id="global.color"
        values={Object {}}
      />
    </Label>
    <Field
      categoryColors={
        Array [
          Object {
            "used": true,
            "value": "blue",
          },
          Object {
            "used": true,
            "value": "red",
          },
          Object {
            "used": false,
            "value": "yellow",
          },
          Object {
            "used": false,
            "value": "green",
          },
        ]
      }
      component={[Function]}
      name="member.color"
      onColorClick={[Function]}
      selectedColor="red"
    />
    <Label>
      <FormattedMessage
        id="admin.fields.footer_social_network.style"
        values={Object {}}
      />
      <span
        className="excerpt"
      >
         
        <FormattedMessage
          id="global.optional"
          values={Object {}}
        />
      </span>
    </Label>
    <Field
      categoryIcons={
        Array [
          Object {
            "name": "wheelchair",
            "used": false,
          },
          Object {
            "name": "water",
            "used": false,
          },
          Object {
            "name": "leaf",
            "used": true,
          },
          Object {
            "name": "parking",
            "used": true,
          },
        ]
      }
      component={[Function]}
      name="member.icon"
      onIconClick={[Function]}
      selectedColor="red"
      selectedIcon="parking"
    />
    <div>
      <Label>
        <FormattedMessage
          id="global.previsualisation"
          values={Object {}}
        />
        <OverlayTrigger
          defaultOverlayShown={false}
          overlay={
            <_default
              id="tooltip-status"
            >
              <FormattedMessage
                id="category.preview"
                values={Object {}}
              />
            </_default>
          }
          placement="top"
          trigger={
            Array [
              "hover",
              "focus",
            ]
          }
        >
          <Icon
            className="ml-5"
            color="#acacac"
            name="information"
            size={12}
          />
        </OverlayTrigger>
      </Label>
      <div
        className="d-flex"
        style={
          Object {
            "justifyContent": "space-between",
          }
        }
      >
        <ProposalFormCategoryBackgroundPreview
          color="red"
          customCategoryImage={
            Object {
              "id": "customCategoryImage",
              "image": Object {
                "id": "uploadedId",
                "name": "customimage",
                "url": "http://isitckPhoto.customimage.jpg",
              },
            }
          }
          icon="parking"
          name="Titre"
        />
        <Connect(ProposalFormCategoryPinPreview)
          color="red"
          icon="parking"
        />
      </div>
    </div>
    <div
      className="mt-10"
    >
      <Uncontrolled(Panel)
        expanded={true}
        id="proposal_form_category_illustration_panel_body"
        onToggle={[Function]}
      >
        <PanelHeading
          bsClass="panel"
          componentClass="div"
        >
          <div
            id="illustration"
          >
            <div
              className="pull-left"
            >
              <Toggle
                checked={true}
                id="toggle-registration"
                label={
                  <FormattedMessage
                    id="custom-illustration"
                    values={Object {}}
                  />
                }
                onChange={[Function]}
              />
            </div>
            <div
              className="clearfix"
            />
          </div>
        </PanelHeading>
        <PanelCollapse
          bsClass="panel"
        >
          <PanelBody
            bsClass="panel"
            collapsible={false}
          >
            <p
              className="text-bold"
            >
              <FormattedMessage
                id="your-pictures"
                values={Object {}}
              />
            </p>
            <Field
              className={null}
              component={[Function]}
              disabled={false}
              id="member.customCategoryImage"
              medias={
                Array [
                  Object {
                    "id": "customCategoryImage",
                    "image": Object {
                      "id": "uploadedId",
                      "name": "customimage",
                      "url": "http://isitckPhoto.customimage.jpg",
                    },
                  },
                ]
              }
              name="member.customCategoryImage"
              onChange={[Function]}
              type="radio-images"
            />
            <Field
              className=""
              component={[Function]}
              disabled={false}
              help={
                <span
                  className="excerpt"
                >
                  <FormattedMessage
                    id="authorized-files"
                    values={Object {}}
                  />
                   
                  <FormattedMessage
                    id="max-weight-1mo"
                    values={Object {}}
                  />
                  <p>
                    <FormattedMessage
                      id="recommanded-dimensions-186x60"
                      values={Object {}}
                    />
                  </p>
                </span>
              }
              id="member.newCategoryImage"
              label={
                <span>
                  <FormattedMessage
                    id="illustration"
                    values={Object {}}
                  />
                  <span
                    className="excerpt"
                  >
                     
                    <FormattedMessage
                      id="global.optional"
                      values={Object {}}
                    />
                  </span>
                </span>
              }
              name="member.newCategoryImage"
              onChange={[Function]}
              type="image"
            />
          </PanelBody>
        </PanelCollapse>
      </Uncontrolled(Panel)>
    </div>
  </ModalBody>
  <ModalFooter
    bsClass="modal-footer"
    componentClass="div"
  >
    <CloseButton
      label="global.cancel"
      onClose={[Function]}
    />
    <Connect(SubmitButton)
      disabled={false}
      id="ProposalFormAdminCategoriesStepModal-submit"
      isSubmitting={false}
      label="global.validate"
      onSubmit={[MockFunction]}
    />
  </ModalFooter>
</Modal>
`;
