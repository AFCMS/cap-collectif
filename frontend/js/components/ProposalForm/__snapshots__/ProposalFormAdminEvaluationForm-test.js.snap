// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ProposalFormAdminEvaluationForm /> render correctly 1`] = `
<Fragment>
  <div
    className="box box-primary container-fluid"
  >
    <div
      className="box-header"
    >
      <h3
        className="box-title"
      >
        <FormattedMessage
          id="proposal.tabs.evaluation"
          values={Object {}}
        />
      </h3>
      <a
        className="pull-right link"
        href="admin.help.link.form.evaluation"
        rel="noopener noreferrer"
      >
        <i
          className="fa fa-info-circle"
        />
         Aide
      </a>
    </div>
    <div
      className="box-content"
    >
      <form
        onSubmit={[MockFunction]}
      >
        <ReactRelayQueryRenderer
          environment={"RelayModernEnvironment()"}
          query={
            Object {
              "fragment": Object {
                "abstractKey": null,
                "argumentDefinitions": Array [],
                "kind": "Fragment",
                "metadata": null,
                "name": "ProposalFormAdminEvaluationFormQuery",
                "selections": Array [
                  Object {
                    "alias": null,
                    "args": null,
                    "concreteType": "Questionnaire",
                    "kind": "LinkedField",
                    "name": "availableQuestionnaires",
                    "plural": true,
                    "selections": Array [
                      Object {
                        "alias": null,
                        "args": null,
                        "kind": "ScalarField",
                        "name": "id",
                        "storageKey": null,
                      },
                      Object {
                        "alias": null,
                        "args": null,
                        "kind": "ScalarField",
                        "name": "title",
                        "storageKey": null,
                      },
                    ],
                    "storageKey": null,
                  },
                ],
                "type": "Query",
              },
              "hash": "40664c5f8fbc81f8201cfda0394794a8",
              "kind": "Request",
              "operation": Object {
                "argumentDefinitions": Array [],
                "kind": "Operation",
                "name": "ProposalFormAdminEvaluationFormQuery",
                "selections": Array [
                  Object {
                    "alias": null,
                    "args": null,
                    "concreteType": "Questionnaire",
                    "kind": "LinkedField",
                    "name": "availableQuestionnaires",
                    "plural": true,
                    "selections": Array [
                      Object {
                        "alias": null,
                        "args": null,
                        "kind": "ScalarField",
                        "name": "id",
                        "storageKey": null,
                      },
                      Object {
                        "alias": null,
                        "args": null,
                        "kind": "ScalarField",
                        "name": "title",
                        "storageKey": null,
                      },
                    ],
                    "storageKey": null,
                  },
                ],
              },
              "params": Object {
                "cacheID": "6cef1427c0caddd4ac050209a7f3ae6a",
                "id": null,
                "metadata": Object {},
                "name": "ProposalFormAdminEvaluationFormQuery",
                "operationKind": "query",
                "text": "query ProposalFormAdminEvaluationFormQuery {
  availableQuestionnaires {
    id
    title
  }
}
",
              },
            }
          }
          render={[Function]}
          variables={Object {}}
        />
        <ButtonToolbar
          bsClass="btn-toolbar"
          className="box-content__toolbar"
        >
          <Button
            active={false}
            block={false}
            bsClass="btn"
            bsStyle="primary"
            disabled={true}
            id="evaluation-submit"
            type="submit"
          >
            <FormattedMessage
              id="global.save"
              values={Object {}}
            />
          </Button>
          <Button
            active={false}
            block={false}
            bsClass="btn"
            bsStyle="danger"
            disabled={true}
          >
            <FormattedMessage
              id="global.delete"
              values={Object {}}
            />
          </Button>
          <AlertForm
            invalid={false}
            submitFailed={false}
            submitSucceeded={false}
            submitting={false}
            valid={true}
          />
        </ButtonToolbar>
      </form>
    </div>
  </div>
</Fragment>
`;

exports[`<ProposalFormAdminEvaluationForm /> render correctly when access to new analysis 1`] = `
<Fragment>
  <Alert
    bsClass="alert"
    bsStyle="info"
    className="mt-10"
    closeLabel="Close alert"
    variant="warning"
  >
    <FormattedMessage
      id="announcement.analysis.new.version"
      values={Object {}}
    />
    Â 
    <b>
      <FormattedMessage
        id="deleted.on.date"
        values={Object {}}
      />
    </b>
  </Alert>
  <div
    className="box box-primary container-fluid"
  >
    <div
      className="box-header"
    >
      <h3
        className="box-title"
      >
        <FormattedMessage
          id="proposal.tabs.evaluation"
          values={Object {}}
        />
      </h3>
      <a
        className="pull-right link"
        href="admin.help.link.form.evaluation"
        rel="noopener noreferrer"
      >
        <i
          className="fa fa-info-circle"
        />
         Aide
      </a>
    </div>
    <div
      className="box-content"
    >
      <form
        onSubmit={[MockFunction]}
      >
        <ReactRelayQueryRenderer
          environment={"RelayModernEnvironment()"}
          query={
            Object {
              "fragment": Object {
                "abstractKey": null,
                "argumentDefinitions": Array [],
                "kind": "Fragment",
                "metadata": null,
                "name": "ProposalFormAdminEvaluationFormQuery",
                "selections": Array [
                  Object {
                    "alias": null,
                    "args": null,
                    "concreteType": "Questionnaire",
                    "kind": "LinkedField",
                    "name": "availableQuestionnaires",
                    "plural": true,
                    "selections": Array [
                      Object {
                        "alias": null,
                        "args": null,
                        "kind": "ScalarField",
                        "name": "id",
                        "storageKey": null,
                      },
                      Object {
                        "alias": null,
                        "args": null,
                        "kind": "ScalarField",
                        "name": "title",
                        "storageKey": null,
                      },
                    ],
                    "storageKey": null,
                  },
                ],
                "type": "Query",
              },
              "hash": "40664c5f8fbc81f8201cfda0394794a8",
              "kind": "Request",
              "operation": Object {
                "argumentDefinitions": Array [],
                "kind": "Operation",
                "name": "ProposalFormAdminEvaluationFormQuery",
                "selections": Array [
                  Object {
                    "alias": null,
                    "args": null,
                    "concreteType": "Questionnaire",
                    "kind": "LinkedField",
                    "name": "availableQuestionnaires",
                    "plural": true,
                    "selections": Array [
                      Object {
                        "alias": null,
                        "args": null,
                        "kind": "ScalarField",
                        "name": "id",
                        "storageKey": null,
                      },
                      Object {
                        "alias": null,
                        "args": null,
                        "kind": "ScalarField",
                        "name": "title",
                        "storageKey": null,
                      },
                    ],
                    "storageKey": null,
                  },
                ],
              },
              "params": Object {
                "cacheID": "6cef1427c0caddd4ac050209a7f3ae6a",
                "id": null,
                "metadata": Object {},
                "name": "ProposalFormAdminEvaluationFormQuery",
                "operationKind": "query",
                "text": "query ProposalFormAdminEvaluationFormQuery {
  availableQuestionnaires {
    id
    title
  }
}
",
              },
            }
          }
          render={[Function]}
          variables={Object {}}
        />
        <ButtonToolbar
          bsClass="btn-toolbar"
          className="box-content__toolbar"
        >
          <Button
            active={false}
            block={false}
            bsClass="btn"
            bsStyle="primary"
            disabled={true}
            id="evaluation-submit"
            type="submit"
          >
            <FormattedMessage
              id="global.save"
              values={Object {}}
            />
          </Button>
          <Button
            active={false}
            block={false}
            bsClass="btn"
            bsStyle="danger"
            disabled={true}
          >
            <FormattedMessage
              id="global.delete"
              values={Object {}}
            />
          </Button>
          <AlertForm
            invalid={false}
            submitFailed={false}
            submitSucceeded={false}
            submitting={false}
            valid={true}
          />
        </ButtonToolbar>
      </form>
    </div>
  </div>
</Fragment>
`;
