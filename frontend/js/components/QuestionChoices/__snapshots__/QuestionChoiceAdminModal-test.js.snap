// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ProposalUserVoteItem /> should render correctly 1`] = `
<Modal
  animation={true}
  aria-labelledby="proposal-form-admin-question-modal-title-lg"
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  dialogComponentClass={[Function]}
  enforceFocus={false}
  id="proposal-form-admin-question-modal"
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onHide={[MockFunction]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  show={true}
>
  <SectionQuestionAdminModal__ModalContainer>
    <ModalHeader
      bsClass="modal-header"
      closeButton={true}
      closeLabel="Close"
    >
      <div
        className="modal-title"
      >
        <ModalTitle
          bsClass="modal-title"
          componentClass="h4"
          id="proposal-form-admin-question-modal-title-lg"
        >
          <FormattedMessage
            id="global-edit-answer"
            values={Object {}}
          />
        </ModalTitle>
      </div>
    </ModalHeader>
    <ModalBody
      bsClass="modal-body"
      componentClass="div"
    >
      <Field
        component={[Function]}
        id="string.title"
        label={
          <FormattedMessage
            id="global.title"
            values={Object {}}
          />
        }
        name="string.title"
        type="text"
      />
      <Field
        component={[Function]}
        fieldUsingJoditWysiwygName="string.descriptionUsingJoditWysiwyg"
        formName="string"
        id="string.description"
        label={
          <span>
            <FormattedMessage
              id="global.description"
              values={Object {}}
            />
            <span
              className="excerpt"
            >
               
              <FormattedMessage
                id="global.optional"
                values={Object {}}
              />
            </span>
          </span>
        }
        name="string.description"
        type="admin-editor"
      />
    </ModalBody>
    <ModalFooter
      bsClass="modal-footer"
      componentClass="div"
    >
      <CloseButton
        label="global.cancel"
        onClose={[MockFunction]}
      />
      <Connect(SubmitButton)
        id="question-choice-submit"
        isSubmitting={false}
        label="global.validate"
        onSubmit={[MockFunction]}
      />
    </ModalFooter>
  </SectionQuestionAdminModal__ModalContainer>
</Modal>
`;

exports[`<ProposalUserVoteItem /> should render correctly button 1`] = `
<Modal
  animation={true}
  aria-labelledby="proposal-form-admin-question-modal-title-lg"
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  dialogComponentClass={[Function]}
  enforceFocus={false}
  id="proposal-form-admin-question-modal"
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onHide={[MockFunction]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  show={true}
>
  <SectionQuestionAdminModal__ModalContainer>
    <ModalHeader
      bsClass="modal-header"
      closeButton={true}
      closeLabel="Close"
    >
      <div
        className="modal-title"
      >
        <ModalTitle
          bsClass="modal-title"
          componentClass="h4"
          id="proposal-form-admin-question-modal-title-lg"
        >
          <FormattedMessage
            id="global-edit-answer"
            values={Object {}}
          />
        </ModalTitle>
      </div>
    </ModalHeader>
    <ModalBody
      bsClass="modal-body"
      componentClass="div"
    >
      <Field
        component={[Function]}
        id="string.title"
        label={
          <FormattedMessage
            id="global.title"
            values={Object {}}
          />
        }
        name="string.title"
        type="text"
      />
      <Field
        component={[Function]}
        fieldUsingJoditWysiwygName="string.descriptionUsingJoditWysiwyg"
        formName="string"
        id="string.description"
        label={
          <span>
            <FormattedMessage
              id="global.description"
              values={Object {}}
            />
            <span
              className="excerpt"
            >
               
              <FormattedMessage
                id="global.optional"
                values={Object {}}
              />
            </span>
          </span>
        }
        name="string.description"
        type="admin-editor"
      />
      <Field
        component={[Function]}
        id="string.color"
        label={
          <FormattedMessage
            id="global.color"
            values={Object {}}
          />
        }
        name="string.color"
        type="color-picker"
      />
    </ModalBody>
    <ModalFooter
      bsClass="modal-footer"
      componentClass="div"
    >
      <CloseButton
        label="global.cancel"
        onClose={[MockFunction]}
      />
      <Connect(SubmitButton)
        id="question-choice-submit"
        isSubmitting={false}
        label="global.validate"
        onSubmit={[MockFunction]}
      />
    </ModalFooter>
  </SectionQuestionAdminModal__ModalContainer>
</Modal>
`;

exports[`<ProposalUserVoteItem /> should render correctly radio 1`] = `
<Modal
  animation={true}
  aria-labelledby="proposal-form-admin-question-modal-title-lg"
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  dialogComponentClass={[Function]}
  enforceFocus={false}
  id="proposal-form-admin-question-modal"
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onHide={[MockFunction]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  show={true}
>
  <SectionQuestionAdminModal__ModalContainer>
    <ModalHeader
      bsClass="modal-header"
      closeButton={true}
      closeLabel="Close"
    >
      <div
        className="modal-title"
      >
        <ModalTitle
          bsClass="modal-title"
          componentClass="h4"
          id="proposal-form-admin-question-modal-title-lg"
        >
          <FormattedMessage
            id="global-edit-answer"
            values={Object {}}
          />
        </ModalTitle>
      </div>
    </ModalHeader>
    <ModalBody
      bsClass="modal-body"
      componentClass="div"
    >
      <Field
        component={[Function]}
        id="string.title"
        label={
          <FormattedMessage
            id="global.title"
            values={Object {}}
          />
        }
        name="string.title"
        type="text"
      />
      <Field
        component={[Function]}
        fieldUsingJoditWysiwygName="string.descriptionUsingJoditWysiwyg"
        formName="string"
        id="string.description"
        label={
          <span>
            <FormattedMessage
              id="global.description"
              values={Object {}}
            />
            <span
              className="excerpt"
            >
               
              <FormattedMessage
                id="global.optional"
                values={Object {}}
              />
            </span>
          </span>
        }
        name="string.description"
        type="admin-editor"
      />
      <Field
        component={[Function]}
        help="global.image_uploader.image.dropzone"
        id="proposal_media"
        label={
          <span>
            <FormattedMessage
              id="proposal.media"
              values={Object {}}
            />
            <span
              className="excerpt"
            >
               
              <FormattedMessage
                id="global.optional"
                values={Object {}}
              />
            </span>
          </span>
        }
        name="string.image"
        type="image"
      />
    </ModalBody>
    <ModalFooter
      bsClass="modal-footer"
      componentClass="div"
    >
      <CloseButton
        label="global.cancel"
        onClose={[MockFunction]}
      />
      <Connect(SubmitButton)
        id="question-choice-submit"
        isSubmitting={false}
        label="global.validate"
        onSubmit={[MockFunction]}
      />
    </ModalFooter>
  </SectionQuestionAdminModal__ModalContainer>
</Modal>
`;

exports[`<ProposalUserVoteItem /> should render correctly when not creating 1`] = `
<Modal
  animation={true}
  aria-labelledby="proposal-form-admin-question-modal-title-lg"
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  dialogComponentClass={[Function]}
  enforceFocus={false}
  id="proposal-form-admin-question-modal"
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onHide={[MockFunction]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  show={true}
>
  <SectionQuestionAdminModal__ModalContainer>
    <ModalHeader
      bsClass="modal-header"
      closeButton={true}
      closeLabel="Close"
    >
      <div
        className="modal-title"
      >
        <ModalTitle
          bsClass="modal-title"
          componentClass="h4"
          id="proposal-form-admin-question-modal-title-lg"
        >
          <FormattedMessage
            id="global-add-answer"
            values={Object {}}
          />
        </ModalTitle>
      </div>
    </ModalHeader>
    <ModalBody
      bsClass="modal-body"
      componentClass="div"
    >
      <Field
        component={[Function]}
        id="string.title"
        label={
          <FormattedMessage
            id="global.title"
            values={Object {}}
          />
        }
        name="string.title"
        type="text"
      />
      <Field
        component={[Function]}
        fieldUsingJoditWysiwygName="string.descriptionUsingJoditWysiwyg"
        formName="string"
        id="string.description"
        label={
          <span>
            <FormattedMessage
              id="global.description"
              values={Object {}}
            />
            <span
              className="excerpt"
            >
               
              <FormattedMessage
                id="global.optional"
                values={Object {}}
              />
            </span>
          </span>
        }
        name="string.description"
        type="admin-editor"
      />
    </ModalBody>
    <ModalFooter
      bsClass="modal-footer"
      componentClass="div"
    >
      <CloseButton
        label="global.cancel"
        onClose={[MockFunction]}
      />
      <Connect(SubmitButton)
        id="question-choice-submit"
        isSubmitting={false}
        label="global.validate"
        onSubmit={[MockFunction]}
      />
    </ModalFooter>
  </SectionQuestionAdminModal__ModalContainer>
</Modal>
`;

exports[`<ProposalUserVoteItem /> should render correctly when not show 1`] = `
<Modal
  animation={true}
  aria-labelledby="proposal-form-admin-question-modal-title-lg"
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  dialogComponentClass={[Function]}
  enforceFocus={false}
  id="proposal-form-admin-question-modal"
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onHide={[MockFunction]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  show={false}
>
  <SectionQuestionAdminModal__ModalContainer>
    <ModalHeader
      bsClass="modal-header"
      closeButton={true}
      closeLabel="Close"
    >
      <div
        className="modal-title"
      >
        <ModalTitle
          bsClass="modal-title"
          componentClass="h4"
          id="proposal-form-admin-question-modal-title-lg"
        >
          <FormattedMessage
            id="global-edit-answer"
            values={Object {}}
          />
        </ModalTitle>
      </div>
    </ModalHeader>
    <ModalBody
      bsClass="modal-body"
      componentClass="div"
    >
      <Field
        component={[Function]}
        id="string.title"
        label={
          <FormattedMessage
            id="global.title"
            values={Object {}}
          />
        }
        name="string.title"
        type="text"
      />
      <Field
        component={[Function]}
        fieldUsingJoditWysiwygName="string.descriptionUsingJoditWysiwyg"
        formName="string"
        id="string.description"
        label={
          <span>
            <FormattedMessage
              id="global.description"
              values={Object {}}
            />
            <span
              className="excerpt"
            >
               
              <FormattedMessage
                id="global.optional"
                values={Object {}}
              />
            </span>
          </span>
        }
        name="string.description"
        type="admin-editor"
      />
    </ModalBody>
    <ModalFooter
      bsClass="modal-footer"
      componentClass="div"
    >
      <CloseButton
        label="global.cancel"
        onClose={[MockFunction]}
      />
      <Connect(SubmitButton)
        id="question-choice-submit"
        isSubmitting={false}
        label="global.validate"
        onSubmit={[MockFunction]}
      />
    </ModalFooter>
  </SectionQuestionAdminModal__ModalContainer>
</Modal>
`;

exports[`<ProposalUserVoteItem /> should render correctly when not show and not creating 1`] = `
<Modal
  animation={true}
  aria-labelledby="proposal-form-admin-question-modal-title-lg"
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  dialogComponentClass={[Function]}
  enforceFocus={false}
  id="proposal-form-admin-question-modal"
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onHide={[MockFunction]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  show={false}
>
  <SectionQuestionAdminModal__ModalContainer>
    <ModalHeader
      bsClass="modal-header"
      closeButton={true}
      closeLabel="Close"
    >
      <div
        className="modal-title"
      >
        <ModalTitle
          bsClass="modal-title"
          componentClass="h4"
          id="proposal-form-admin-question-modal-title-lg"
        >
          <FormattedMessage
            id="global-add-answer"
            values={Object {}}
          />
        </ModalTitle>
      </div>
    </ModalHeader>
    <ModalBody
      bsClass="modal-body"
      componentClass="div"
    >
      <Field
        component={[Function]}
        id="string.title"
        label={
          <FormattedMessage
            id="global.title"
            values={Object {}}
          />
        }
        name="string.title"
        type="text"
      />
      <Field
        component={[Function]}
        fieldUsingJoditWysiwygName="string.descriptionUsingJoditWysiwyg"
        formName="string"
        id="string.description"
        label={
          <span>
            <FormattedMessage
              id="global.description"
              values={Object {}}
            />
            <span
              className="excerpt"
            >
               
              <FormattedMessage
                id="global.optional"
                values={Object {}}
              />
            </span>
          </span>
        }
        name="string.description"
        type="admin-editor"
      />
    </ModalBody>
    <ModalFooter
      bsClass="modal-footer"
      componentClass="div"
    >
      <CloseButton
        label="global.cancel"
        onClose={[MockFunction]}
      />
      <Connect(SubmitButton)
        id="question-choice-submit"
        isSubmitting={false}
        label="global.validate"
        onSubmit={[MockFunction]}
      />
    </ModalFooter>
  </SectionQuestionAdminModal__ModalContainer>
</Modal>
`;
