// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<RegistrationForm /> renders a form with dynamic fields 1`] = `
<form
  id="registration-form"
  onSubmit={[MockFunction]}
>
  <Field
    component={[Function]}
    id="locale"
    name="locale"
    type="hidden"
  />
  <Field
    ariaRequired={true}
    autoComplete="username"
    component={[Function]}
    id="username"
    label={
      <FormattedMessage
        id="global.fullname"
        values={Object {}}
      />
    }
    labelClassName="font-weight-normal"
    name="username"
    type="text"
  />
  <Field
    ariaRequired={true}
    autoComplete="email"
    component={[Function]}
    disabled={false}
    id="email"
    label={
      <FormattedMessage
        id="global.email"
        values={Object {}}
      />
    }
    labelClassName="font-weight-normal"
    name="email"
    popover={
      Object {
        "id": "registration-email-tooltip",
        "message": <FormattedMessage
          id="registration.tooltip.email"
          values={Object {}}
        />,
      }
    }
    type="email"
  />
  <Connect(UserPasswordField)
    ariaRequired={true}
    autoComplete="new-password"
    formName="registration-form"
    id="password"
    label={
      <FormattedMessage
        id="registration.password"
        values={Object {}}
      />
    }
    labelClassName="font-weight-normal"
    name="plainPassword"
  />
  <Relay(ModalRegistrationFormQuestions)
    change={[MockFunction]}
    form="registration-form"
    memoizeAvailableQuestions={[Function]}
    registrationForm={
      Object {
        "$fragmentRefs": null,
        "questions": Array [
          Object {
            "__typename": "SimpleQuestion",
            "alwaysJumpDestinationQuestion": null,
            "description": null,
            "helpText": null,
            "hidden": false,
            "id": "UXVlc3Rpb246NDg1",
            "jumps": Array [],
            "number": 1,
            "position": 1,
            "private": false,
            "required": false,
            "title": "Question 1",
            "type": "text",
          },
          Object {
            "__typename": "SimpleQuestion",
            "alwaysJumpDestinationQuestion": null,
            "description": null,
            "helpText": null,
            "hidden": false,
            "id": "UXVlc3Rpb246NDg0",
            "jumps": Array [],
            "number": 2,
            "position": 2,
            "private": false,
            "required": true,
            "title": "Question 2",
            "type": "text",
          },
        ],
      }
    }
    responses={Array []}
  />
  <Field
    ariaRequired={true}
    component={[Function]}
    id="charte"
    labelClassName="font-weight-normal"
    name="charte"
    type="checkbox"
  >
    <span>
      <FormattedMessage
        id="registration.charte"
        values={
          Object {
            "link": <Button
              active={false}
              block={false}
              bsClass="btn"
              bsStyle="link"
              className="p-0 text-decoration-none"
              disabled={false}
              onClick={[Function]}
              variant="link"
            >
              la charte
            </Button>,
          }
        }
      />
       
      <Connect(PrivacyModal)
        className="text-decoration-none"
        linkKeyword="and-the"
        title="capco.module.privacy_policy"
      />
    </span>
  </Field>
  <Field
    component={[Function]}
    id="consent-internal-communication"
    labelClassName="font-weight-normal"
    name="consentInternalCommunication"
    type="checkbox"
  >
    <FormattedMessage
      id="receive-news-and-results-of-the-consultations"
      values={
        Object {
          "from": "de Cap Collectif",
        }
      }
    />
  </Field>
  <Field
    component={[Function]}
    id="consent-external-communication"
    labelClassName="font-weight-normal"
    name="consentExternalCommunication"
    type="checkbox"
  >
    <FormattedMessage
      id="registration.consent_external_communication"
      values={
        Object {
          "organization_name": "Cap Collectif",
        }
      }
    />
  </Field>
  <Field
    component={[Function]}
    id="captcha"
    name="captcha"
    type="captcha"
  />
</form>
`;

exports[`<RegistrationForm /> renders a form with inputs and a captcha 1`] = `
<form
  id="registration-form"
  onSubmit={[MockFunction]}
>
  <Field
    component={[Function]}
    id="locale"
    name="locale"
    type="hidden"
  />
  <Field
    ariaRequired={true}
    autoComplete="username"
    component={[Function]}
    id="username"
    label={
      <FormattedMessage
        id="global.fullname"
        values={Object {}}
      />
    }
    labelClassName="font-weight-normal"
    name="username"
    type="text"
  />
  <Field
    ariaRequired={true}
    autoComplete="email"
    component={[Function]}
    disabled={false}
    id="email"
    label={
      <FormattedMessage
        id="global.email"
        values={Object {}}
      />
    }
    labelClassName="font-weight-normal"
    name="email"
    popover={
      Object {
        "id": "registration-email-tooltip",
        "message": <FormattedMessage
          id="registration.tooltip.email"
          values={Object {}}
        />,
      }
    }
    type="email"
  />
  <Connect(UserPasswordField)
    ariaRequired={true}
    autoComplete="new-password"
    formName="registration-form"
    id="password"
    label={
      <FormattedMessage
        id="registration.password"
        values={Object {}}
      />
    }
    labelClassName="font-weight-normal"
    name="plainPassword"
  />
  <Relay(ModalRegistrationFormQuestions)
    change={[MockFunction]}
    form="registration-form"
    memoizeAvailableQuestions={[Function]}
    registrationForm={
      Object {
        "$fragmentRefs": null,
        "questions": Array [
          Object {
            "__typename": "SimpleQuestion",
            "alwaysJumpDestinationQuestion": null,
            "description": null,
            "helpText": null,
            "hidden": false,
            "id": "UXVlc3Rpb246NDg1",
            "jumps": Array [],
            "number": 1,
            "position": 1,
            "private": false,
            "required": false,
            "title": "Question 1",
            "type": "text",
          },
          Object {
            "__typename": "SimpleQuestion",
            "alwaysJumpDestinationQuestion": null,
            "description": null,
            "helpText": null,
            "hidden": false,
            "id": "UXVlc3Rpb246NDg0",
            "jumps": Array [],
            "number": 2,
            "position": 2,
            "private": false,
            "required": true,
            "title": "Question 2",
            "type": "text",
          },
        ],
      }
    }
    responses={Array []}
  />
  <Field
    ariaRequired={true}
    component={[Function]}
    id="charte"
    labelClassName="font-weight-normal"
    name="charte"
    type="checkbox"
  >
    <span>
      <FormattedMessage
        id="registration.charte"
        values={
          Object {
            "link": <Button
              active={false}
              block={false}
              bsClass="btn"
              bsStyle="link"
              className="p-0 text-decoration-none"
              disabled={false}
              onClick={[Function]}
              variant="link"
            >
              la charte
            </Button>,
          }
        }
      />
       
      <Connect(PrivacyModal)
        className="text-decoration-none"
        linkKeyword="and-the"
        title="capco.module.privacy_policy"
      />
    </span>
  </Field>
  <Field
    component={[Function]}
    id="consent-internal-communication"
    labelClassName="font-weight-normal"
    name="consentInternalCommunication"
    type="checkbox"
  >
    <FormattedMessage
      id="receive-news-and-results-of-the-consultations"
      values={
        Object {
          "from": "de Cap Collectif",
        }
      }
    />
  </Field>
  <Field
    component={[Function]}
    id="consent-external-communication"
    labelClassName="font-weight-normal"
    name="consentExternalCommunication"
    type="checkbox"
  >
    <FormattedMessage
      id="registration.consent_external_communication"
      values={
        Object {
          "organization_name": "Cap Collectif",
        }
      }
    />
  </Field>
  <Field
    component={[Function]}
    id="captcha"
    name="captcha"
    type="captcha"
  />
</form>
`;

exports[`<RegistrationForm /> renders a form with user_type select if enabled 1`] = `
<form
  id="registration-form"
  onSubmit={[MockFunction]}
>
  <Field
    component={[Function]}
    id="locale"
    name="locale"
    type="hidden"
  />
  <Field
    ariaRequired={true}
    autoComplete="username"
    component={[Function]}
    id="username"
    label={
      <FormattedMessage
        id="global.fullname"
        values={Object {}}
      />
    }
    labelClassName="font-weight-normal"
    name="username"
    type="text"
  />
  <Field
    ariaRequired={true}
    autoComplete="email"
    component={[Function]}
    disabled={false}
    id="email"
    label={
      <FormattedMessage
        id="global.email"
        values={Object {}}
      />
    }
    labelClassName="font-weight-normal"
    name="email"
    popover={
      Object {
        "id": "registration-email-tooltip",
        "message": <FormattedMessage
          id="registration.tooltip.email"
          values={Object {}}
        />,
      }
    }
    type="email"
  />
  <Connect(UserPasswordField)
    ariaRequired={true}
    autoComplete="new-password"
    formName="registration-form"
    id="password"
    label={
      <FormattedMessage
        id="registration.password"
        values={Object {}}
      />
    }
    labelClassName="font-weight-normal"
    name="plainPassword"
  />
  <Field
    component={[Function]}
    id="user_type"
    label={
      <span>
        <FormattedMessage
          id="registration.type"
          values={Object {}}
        />
         
        <span
          className="excerpt"
        >
          <FormattedMessage
            id="global.optional"
            values={Object {}}
          />
        </span>
      </span>
    }
    labelClassName="font-weight-normal"
    name="userType"
    type="select"
  >
    <FormattedMessage
      id="registration.select.type"
      values={Object {}}
    >
      <Component />
    </FormattedMessage>
    <option
      key="1"
      value={1}
    >
      type_1
    </option>
  </Field>
  <Relay(ModalRegistrationFormQuestions)
    change={[MockFunction]}
    form="registration-form"
    memoizeAvailableQuestions={[Function]}
    registrationForm={
      Object {
        "$fragmentRefs": null,
        "questions": Array [
          Object {
            "__typename": "SimpleQuestion",
            "alwaysJumpDestinationQuestion": null,
            "description": null,
            "helpText": null,
            "hidden": false,
            "id": "UXVlc3Rpb246NDg1",
            "jumps": Array [],
            "number": 1,
            "position": 1,
            "private": false,
            "required": false,
            "title": "Question 1",
            "type": "text",
          },
          Object {
            "__typename": "SimpleQuestion",
            "alwaysJumpDestinationQuestion": null,
            "description": null,
            "helpText": null,
            "hidden": false,
            "id": "UXVlc3Rpb246NDg0",
            "jumps": Array [],
            "number": 2,
            "position": 2,
            "private": false,
            "required": true,
            "title": "Question 2",
            "type": "text",
          },
        ],
      }
    }
    responses={Array []}
  />
  <Field
    ariaRequired={true}
    component={[Function]}
    id="charte"
    labelClassName="font-weight-normal"
    name="charte"
    type="checkbox"
  >
    <span>
      <FormattedMessage
        id="registration.charte"
        values={
          Object {
            "link": <Button
              active={false}
              block={false}
              bsClass="btn"
              bsStyle="link"
              className="p-0 text-decoration-none"
              disabled={false}
              onClick={[Function]}
              variant="link"
            >
              la charte
            </Button>,
          }
        }
      />
       
      <Connect(PrivacyModal)
        className="text-decoration-none"
        linkKeyword="and-the"
        title="capco.module.privacy_policy"
      />
    </span>
  </Field>
  <Field
    component={[Function]}
    id="consent-internal-communication"
    labelClassName="font-weight-normal"
    name="consentInternalCommunication"
    type="checkbox"
  >
    <FormattedMessage
      id="receive-news-and-results-of-the-consultations"
      values={
        Object {
          "from": "de Cap Collectif",
        }
      }
    />
  </Field>
  <Field
    component={[Function]}
    id="consent-external-communication"
    labelClassName="font-weight-normal"
    name="consentExternalCommunication"
    type="checkbox"
  >
    <FormattedMessage
      id="registration.consent_external_communication"
      values={
        Object {
          "organization_name": "Cap Collectif",
        }
      }
    />
  </Field>
  <Field
    component={[Function]}
    id="captcha"
    name="captcha"
    type="captcha"
  />
</form>
`;

exports[`<RegistrationForm /> renders a form with zipcode if enabled 1`] = `
<form
  id="registration-form"
  onSubmit={[MockFunction]}
>
  <Field
    component={[Function]}
    id="locale"
    name="locale"
    type="hidden"
  />
  <Field
    ariaRequired={true}
    autoComplete="username"
    component={[Function]}
    id="username"
    label={
      <FormattedMessage
        id="global.fullname"
        values={Object {}}
      />
    }
    labelClassName="font-weight-normal"
    name="username"
    type="text"
  />
  <Field
    ariaRequired={true}
    autoComplete="email"
    component={[Function]}
    disabled={false}
    id="email"
    label={
      <FormattedMessage
        id="global.email"
        values={Object {}}
      />
    }
    labelClassName="font-weight-normal"
    name="email"
    popover={
      Object {
        "id": "registration-email-tooltip",
        "message": <FormattedMessage
          id="registration.tooltip.email"
          values={Object {}}
        />,
      }
    }
    type="email"
  />
  <Connect(UserPasswordField)
    ariaRequired={true}
    autoComplete="new-password"
    formName="registration-form"
    id="password"
    label={
      <FormattedMessage
        id="registration.password"
        values={Object {}}
      />
    }
    labelClassName="font-weight-normal"
    name="plainPassword"
  />
  <Field
    autoComplete="postal-code"
    component={[Function]}
    id="zipcode"
    label={
      <span>
        <FormattedMessage
          id="user.register.zipcode"
          values={Object {}}
        />
         
        <span
          className="excerpt"
        >
          <FormattedMessage
            id="global.optional"
            values={Object {}}
          />
        </span>
      </span>
    }
    labelClassName="font-weight-normal"
    name="zipcode"
    type="text"
  />
  <Relay(ModalRegistrationFormQuestions)
    change={[MockFunction]}
    form="registration-form"
    memoizeAvailableQuestions={[Function]}
    registrationForm={
      Object {
        "$fragmentRefs": null,
        "questions": Array [
          Object {
            "__typename": "SimpleQuestion",
            "alwaysJumpDestinationQuestion": null,
            "description": null,
            "helpText": null,
            "hidden": false,
            "id": "UXVlc3Rpb246NDg1",
            "jumps": Array [],
            "number": 1,
            "position": 1,
            "private": false,
            "required": false,
            "title": "Question 1",
            "type": "text",
          },
          Object {
            "__typename": "SimpleQuestion",
            "alwaysJumpDestinationQuestion": null,
            "description": null,
            "helpText": null,
            "hidden": false,
            "id": "UXVlc3Rpb246NDg0",
            "jumps": Array [],
            "number": 2,
            "position": 2,
            "private": false,
            "required": true,
            "title": "Question 2",
            "type": "text",
          },
        ],
      }
    }
    responses={Array []}
  />
  <Field
    ariaRequired={true}
    component={[Function]}
    id="charte"
    labelClassName="font-weight-normal"
    name="charte"
    type="checkbox"
  >
    <span>
      <FormattedMessage
        id="registration.charte"
        values={
          Object {
            "link": <Button
              active={false}
              block={false}
              bsClass="btn"
              bsStyle="link"
              className="p-0 text-decoration-none"
              disabled={false}
              onClick={[Function]}
              variant="link"
            >
              la charte
            </Button>,
          }
        }
      />
       
      <Connect(PrivacyModal)
        className="text-decoration-none"
        linkKeyword="and-the"
        title="capco.module.privacy_policy"
      />
    </span>
  </Field>
  <Field
    component={[Function]}
    id="consent-internal-communication"
    labelClassName="font-weight-normal"
    name="consentInternalCommunication"
    type="checkbox"
  >
    <FormattedMessage
      id="receive-news-and-results-of-the-consultations"
      values={
        Object {
          "from": "de Cap Collectif",
        }
      }
    />
  </Field>
  <Field
    component={[Function]}
    id="consent-external-communication"
    labelClassName="font-weight-normal"
    name="consentExternalCommunication"
    type="checkbox"
  >
    <FormattedMessage
      id="registration.consent_external_communication"
      values={
        Object {
          "organization_name": "Cap Collectif",
        }
      }
    />
  </Field>
  <Field
    component={[Function]}
    id="captcha"
    name="captcha"
    type="captcha"
  />
</form>
`;
