user      capco capco;
pid       /var/run/nginx.pid;
daemon    off;
error_log stderr;
worker_processes auto;
worker_rlimit_nofile 65535;

http {
    charset utf-8;
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    server_tokens off;
    log_not_found off;
    types_hash_max_size 2048;
    client_max_body_size 25M;

    access_log stderr;
    keepalive_timeout 65;
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    proxy_cache_path   /tmp/jitsi/ levels=1:2 keys_zone=s3_cache:10m max_size=500m
                     inactive=60m use_temp_path=off;

    # handle non-ssl https from the nginx load balancer
    map $http_x_forwarded_proto $fastcgi_https {
        default off;
        https on;
    }

    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css text/javascript text/xml application/json application/x-javascript application/xml application/xml+rss image/svg+xml;

    #
    # This server take all requests from Varnish and forward to PHP-FPM
    #
    server {
       listen 8080;
       server_name capco.test capco.prod capco.dev assets.cap.co;
       root /var/www/public;
       port_in_redirect off;

       set $symfonyEnv dev;
       if ( $host = 'capco.prod' ) {
           set $symfonyEnv prod;
        }
       if ( $host = 'capco.test' ) {
           set $symfonyEnv test;
        }

       # strip index.php/ prefix if it is present
       rewrite ^/index\.php/?(.*)$ /$1 permanent;

       location / {
           index index.php;
           try_files $uri @rewriteapp;
       }

       location @rewriteapp {
           rewrite ^(.*)$ /index.php/$1 last;
       }

       # This handle local medias on the server with imagine and liip.
       location ~ ^/media/cache/.*/default/ {
           try_files $uri @rewriteapp;
       }

       location /export/ {
           internal;
       }

       #
       # This location is useful to access recordings on our buckets.
       # This allow us to use our own domain, proxy, handle caching before accessing the files.
       #
       # https://www.scaleway.com/en/docs/setting-up-object-proxy-object-storage/
       location /jitsi_recordings/ {
            resolver 1.1.1.1;
            proxy_http_version     1.1;
            proxy_redirect         off;
            proxy_set_header       Connection "";
            proxy_set_header       Authorization '';   
            proxy_set_header       Host jitsi-recordings.s3.fr-par.scw.cloud;
            proxy_set_header       X-Real-IP $remote_addr;
            proxy_set_header       X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_hide_header      x-amz-id-2;
            proxy_hide_header      x-amz-request-id;
            proxy_hide_header      x-amz-meta-server-side-encryption;
            proxy_hide_header      x-amz-server-side-encryption;
            proxy_hide_header      Set-Cookie;
            proxy_ignore_headers   Set-Cookie;
            proxy_intercept_errors on;
            add_header             Cache-Control max-age=31536000;
            proxy_pass             https://jitsi-recordings.s3.fr-par.scw.cloud/;
       }

       # This location forwards to our simplesaml application
       location ^~ /simplesaml {
            alias /var/www/vendor/simplesamlphp/simplesamlphp/www;
            location ~ ^(?<prefix>/simplesaml)(?<script_name>.*?\.php)(?<path_info>/.*)?$ {
              include fastcgi_params;
              include environments;
              fastcgi_split_path_info ^(.+\.php)(/.+)$;
              fastcgi_param SCRIPT_FILENAME $document_root$script_name;
              fastcgi_param PATH_INFO $path_info;
              fastcgi_param HTTPS $fastcgi_https;
              fastcgi_param SERVER_PORT 80; # Required because we listen port 8080
              fastcgi_pass 127.0.0.1:9000;
            }
       }

       # This location forwards to our Symfony application
       location ~ ^/index.php(/|$) {
           fastcgi_pass 127.0.0.1:9000;
           fastcgi_split_path_info ^(.+\.php)(/.*)$;

           include fastcgi_params;
           include environments;

           fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
           fastcgi_param HTTPS on;
           fastcgi_param SERVER_NAME $http_host;
           fastcgi_param SYMFONY_ENV $symfonyEnv;
       }

       # return 404 for all other php files not matching the front controller
       # this prevents access to other php files you don't want to be accessible.
       location ~ \.php$ {
           return 404;
       }

       error_log  stderr;
       access_log stderr;
    }

    #
    # This server send all HTTPS requests to varnish
    #
    server {
        listen 443 ssl default_server;
        root /var/www/public;

        ssl_certificate /etc/ssl/certs/capco.crt;
        ssl_certificate_key /etc/ssl/private/capco.key;

        location / {
             proxy_pass http://127.0.0.1:8181;
             proxy_set_header Host $http_host;
             proxy_set_header X-Forwarded-Host $http_host;
             proxy_set_header X-Real-IP $remote_addr;
             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
             proxy_set_header X-Forwarded-Proto https;
             proxy_set_header HTTPS "on";
            # We allow only geolocation, microphone, audio, video
            add_header Feature-Policy "geolocation 'self';midi 'none';sync-xhr 'none';microphone 'self';camera 'self';magnetometer 'none';gyroscope 'none';fullscreen 'self';payment 'none';" always;
            #add_header Referrer-Policy "same-origin" always;
            add_header Referrer-Policy "no-referrer-when-downgrade" always;
            add_header X-Content-Type-Options "nosniff" always;
            add_header X-Xss-Protection "1; mode=block" always;
            # This policy needs heavy work to be secured. For the moment we allow everything
            add_header Content-Security-Policy "default-src * 'unsafe-inline' 'unsafe-eval'; script-src * data: https://* 'unsafe-inline' 'unsafe-eval'; connect-src * 'unsafe-inline'; img-src * data: blob: 'unsafe-inline'; frame-src *; style-src * data: https://* 'unsafe-inline';" always;

        }

        location ^~ /simplesaml {
            alias /var/www/vendor/simplesamlphp/simplesamlphp/www;
            location ~ ^(?<prefix>/simplesaml)(?<script_name>.*?\.php)(?<path_info>/.*)?$ {
              include fastcgi_params;
              include environments;
              fastcgi_split_path_info ^(.+\.php)(/.+)$;
              fastcgi_param SCRIPT_FILENAME $document_root$script_name;
              fastcgi_param PATH_INFO $path_info;
              fastcgi_param HTTPS $fastcgi_https;
              fastcgi_param SERVER_PORT 80; # Required because we listen port 8080
              fastcgi_pass 127.0.0.1:9000;
            }
       }

        error_log  stderr;
        access_log stderr;
    }

    # Mailcatcher reverse proxy for SSL
    server {
        listen 443 ssl;
        root /var/www/public;
        server_name mail.cap.co;

        ssl_certificate /etc/ssl/certs/capco.crt;
        ssl_certificate_key /etc/ssl/private/capco.key;

        location / {
             proxy_pass http://mailcatchersmtp:80;
             proxy_set_header Host $http_host;
             proxy_set_header X-Forwarded-Host $http_host;
             proxy_set_header X-Real-IP $remote_addr;
             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
             proxy_set_header X-Forwarded-Proto https;
             proxy_set_header HTTPS "on";
        }

        error_log  stderr;
        access_log stderr;
    }

    # RabbitMQ reverse proxy for SSL
    server {
        listen 443 ssl;
        root /var/www/public;
        server_name rabbitmq.cap.co;

        ssl_certificate /etc/ssl/certs/capco.crt;
        ssl_certificate_key /etc/ssl/private/capco.key;

        location / {
             proxy_pass http://127.0.0.1:15672;
             proxy_set_header Host $http_host;
             proxy_set_header X-Forwarded-Host $http_host;
             proxy_set_header X-Real-IP $remote_addr;
             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
             proxy_set_header X-Forwarded-Proto https;
             proxy_set_header HTTPS "on";
        }

        error_log  stderr;
        access_log stderr;
    }

    # Kibana reverse proxy for SSL
    server {
        listen 443 ssl;
        root /var/www/public;
        server_name kibana.cap.co;

        ssl_certificate /etc/ssl/certs/capco.crt;
        ssl_certificate_key /etc/ssl/private/capco.key;

        location / {
            proxy_pass http://kibana:5601;
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header HTTPS "on";
        }

        error_log  stderr;
        access_log stderr;
    }

    # cerebro reverse proxy for SSL
    server {
        listen 443 ssl;
        root /var/www/public;
        server_name cerebro.cap.co;

        ssl_certificate /etc/ssl/certs/capco.crt;
        ssl_certificate_key /etc/ssl/private/capco.key;

        location / {
            proxy_pass http://cerebro:9000;
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header HTTPS "on";
        }

        error_log  stderr;
        access_log stderr;
    }

    # HTTP redirect
    server {
    	listen 80;
    	listen [::]:80;
    	server_name capco.dev assets.cap.co capco.test capco.paris.fr wwww.capco.nantes.fr www.sous.sous.domaine.lille.fr;
    	location / {
    		return 301 https://$host$request_uri;
    	}
    }
}

events {}
