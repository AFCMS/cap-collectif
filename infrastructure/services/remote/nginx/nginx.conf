user capco capco;
pid /var/run/nginx.pid;

worker_processes 8;

daemon off;
error_log stderr;

http {

    # Override some buffer limitations, will prevent DDOS too.
    client_body_buffer_size 10K;
    client_header_buffer_size 32k;
    client_max_body_size 25M;
    large_client_header_buffers 2 1k;
    client_body_in_file_only clean;

    server_tokens off;

    # Tcp_nopush causes nginx to attempt to send its HTTP response head in one
    # packet, instead of using partial frames. This is useful for prepending
    # headers before calling sendfile, or for throughput optimization.
    tcp_nopush on;

    # Don't buffer data-sends (disable Nagle algorithm). Good for sending
    # frequent small bursts of data in real time.
    tcp_nodelay on;

    # Every 60 seconds server broadcasts Sync packets, so 90 is
    # a conservative upper bound.
    keepalive_timeout 90;

    types_hash_max_size 2048;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Allow the server to close the connection after a client stops
    # responding.
    # Frees up socket-associated memory.
    reset_timedout_connection on;

    # file upload

    # Sendfile copies data between one FD and other from within the kernel.
    # More efficient than read() + write(), since the requires transferring
    # data to and from the user space.
    sendfile on;
    send_timeout 300s;

    # Open file descriptors.
    # Caches information about open FDs, freqently accessed files.
    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # handle non-ssl https from the nginx load balancer
    map $http_x_forwarded_proto $fastcgi_https {
        default off;
        https on;
    }

    # gzip compression
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;

    # Default is 6 (1<n<9), but 2 -- even 1 -- is enough. The higher it is, the
    # more CPU cycles will be wasted.
    gzip_comp_level 2;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css text/javascript application/javascript application/x-javascript application/json text/xml application/xml application/xml+rss image/svg+xml;
    gzip_min_length 500;

    # Use analytics to track stuff instead of using precious file IO resources.
    # Disabling logging speeds up IO.
    access_log off;

    proxy_cache_path   /tmp/ levels=1:2 keys_zone=s3_cache:10m max_size=500m
                     inactive=60m use_temp_path=off;

    # Backend application
    server {
        # We allow only geolocation, microphone, audio, video
        add_header Feature-Policy "geolocation 'self';midi 'none';sync-xhr 'none';microphone 'self';camera 'self';magnetometer 'none';gyroscope 'none';fullscreen 'self';payment 'none';" always;

        # https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy
        add_header Referrer-Policy "same-origin" always;

        # Already sent by Cloudflare but only here for backward compatibility.
        add_header X-Content-Type-Options "nosniff" always;

        # https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection
        add_header X-Xss-Protection "1; mode=block" always;

        # This policy needs heavy work to be secured. For the moment we allow everything
        add_header Content-Security-Policy "default-src * 'unsafe-inline' 'unsafe-eval'; script-src * data: https://* 'unsafe-inline' 'unsafe-eval'; connect-src * 'unsafe-inline'; img-src * data: blob: 'unsafe-inline'; frame-src * data: blob: ;frame-ancestors 'none'; style-src * data: https://* 'unsafe-inline';" always;
        add_header Access-Control-Allow-Origin *;

        listen 8080;
        root /var/www/public;

        location ~* \.(js|css|gif|ico|eot|ttf|woff|svg|otf)$ {
            access_log off;
            expires max;
        }

        location /widget_debate {
            add_header Content-Security-Policy "default-src * 'unsafe-inline' 'unsafe-eval'; script-src * data: https://* 'unsafe-inline' 'unsafe-eval'; connect-src * 'unsafe-inline'; img-src * data: blob: 'unsafe-inline';  frame-src * data: blob: ; style-src * data: https://* 'unsafe-inline';" always;
            fastcgi_pass 127.0.0.1:9000;
	        fastcgi_index index.php;
            error_page 502 /502.html;
            fastcgi_split_path_info ^(.+\.php)(/.*)$;
            include fastcgi_params;
            include environments;
            fastcgi_param SERVER_PORT 443; # Required for simplesaml
            fastcgi_param HTTPS $fastcgi_https;
            fastcgi_param SERVER_NAME $http_host;
            fastcgi_param SCRIPT_NAME /index.php;
            fastcgi_param SCRIPT_FILENAME $document_root/index.php;
        }

        location ^~ /rabbitmq {
            proxy_pass http://127.0.0.1:15672/api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 300;
            proxy_read_timeout 240;
            proxy_http_version 1.1;
        }

        # simplesaml application
        location ^~ /simplesaml {
          alias /var/www/vendor/simplesamlphp/simplesamlphp/www;
          location ~ ^(?<prefix>/simplesaml)(?<script_name>.*?\.php)(?<path_info>/.*)?$ {
            include fastcgi_params;
            include environments;
            fastcgi_split_path_info ^(.+\.php)(/.+)$;
            fastcgi_param SCRIPT_FILENAME $document_root$script_name;
            fastcgi_param PATH_INFO $path_info;
            fastcgi_param HTTPS on; # SAML enforce using HTTPS
            fastcgi_pass 127.0.0.1:9000;
          }
        }

       #
       # This location is useful to access recordings on our buckets.
       # This allow us to use our own domain, proxy, handle caching before accessing the files.
       #
       # https://www.scaleway.com/en/docs/setting-up-object-proxy-object-storage/
       location /jitsi_recordings/ {
            resolver 1.1.1.1;
            proxy_http_version     1.1;
            proxy_redirect         off;
            proxy_set_header       Connection "";
            proxy_set_header       Authorization '';   
            proxy_set_header       Host jitsi-recordings.s3.fr-par.scw.cloud;
            proxy_set_header       X-Real-IP $remote_addr;
            proxy_set_header       X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_hide_header      x-amz-id-2;
            proxy_hide_header      x-amz-request-id;
            proxy_hide_header      x-amz-meta-server-side-encryption;
            proxy_hide_header      x-amz-server-side-encryption;
            proxy_hide_header      Set-Cookie;
            proxy_ignore_headers   Set-Cookie;
            proxy_intercept_errors on;
            add_header             Cache-Control max-age=31536000;
            proxy_pass             https://jitsi-recordings.s3.fr-par.scw.cloud/;
       }

        # strip index.php/ prefix if it is present
        rewrite ^/index\.php/?(.*)$ /$1 permanent;

        location / {
            index index.php;

            try_files $uri @rewriteapp;
        }

        # Fighting with Imagine? This little gem is amazing.
        location ~ ^/media/cache/.*/default/ {
            try_files $uri @rewriteapp;
        }

        location /export/ {
            internal;
        }

        location @rewriteapp {
            rewrite ^(.*)$ /index.php/$1 last;
        }

        location ~ ^/index\.php(/|$) {
            fastcgi_pass 127.0.0.1:9000;
            error_page 502 /502.html;
            fastcgi_split_path_info ^(.+\.php)(/.*)$;
            include fastcgi_params;
            include environments;
            fastcgi_param SERVER_PORT 443; # Required for simplesaml
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param HTTPS $fastcgi_https;
            fastcgi_param SERVER_NAME $http_host;
        }

        # return 404 for all other php files not matching the front controller
        # this prevents access to other php files you don't want to be accessible.
        location ~ \.php$ {
            return 404;
        }

        location /502.html {

        }

        error_log  stderr;
        access_log off;
    }
}

events {
    # Let each process accept multiple connections.
    # Accept as many connections as possible, after nginx gets notification
    # about a new connection.
    # May flood worker_connections, if that option is set too low.
    multi_accept on;

    # Preferred connection method for newer linux versions.
    # Essential for linux, optmized to serve many clients with each thread.
    use epoll;

    # Determines how many clients will be served by each worker process.
    # (Max clients = worker_connections * worker_processes)
    # Should be equal to `ulimit -n`
    worker_connections 1024;
}

worker_rlimit_nofile 1024;
