#!/bin/bash

start=$SECONDS

echo "Configuring New Relic..."
sed -i 's/newrelic.appname = "PHP Application"/newrelic.appname = '"$NR_INSTALL_NAME"'/' /etc/php/7.0/*/conf.d/newrelic.ini
sed -i 's/newrelic.license = "REPLACE_WITH_REAL_KEY"/newrelic.license = '"$NR_INSTALL_KEY"'/' /etc/php/7.0/*/conf.d/newrelic.ini

cd /var/www

for directory in var/cache var/logs web/bundles web/media/default web/media/sonata_category; do
  if [ ! -d "$directory" ]; then
    echo "Creating '$directory'..."
    mkdir -p -m 777 $directory
    chown capco:capco $directory
  fi
done

echo "Checking media permissions after $(( SECONDS - start )) seconds..."
chmod -R 777 web/media

echo "Checking var permissions after $(( SECONDS - start )) seconds..."
chown -R capco:capco var

echo "Checking if mysql is booted after $(( SECONDS - start )) seconds..."
while ! mysql --host=127.0.0.1 > /dev/null 2>&1;
  do sleep 0.1
done
echo "Mysql is ready after $(( SECONDS - start )) seconds!"

echo "Warming up cache and install bundle assets after $(( SECONDS - start )) seconds..."
su capco <<'EOF'
cd /var/www
php bin/console cache:warmup --no-debug --no-optional-warmers --env=prod --no-interaction
php bin/console assets:install --symlink --env=prod --no-interaction
chmod -R 777 var
EOF

VERSIONS=`php bin/console doctrine:migrations:status --show-versions --env=prod --no-interaction 2>&1`
database=`echo "$VERSIONS" | grep -o "Unknown database" | wc -l`
if [ "$database" != "0" ]; then
    echo "Creating a new database with base data..."
    su capco <<'EOF'
php bin/console doctrine:database:create --env=prod --no-interaction
php bin/console doctrine:schema:create --env=prod --no-interaction
php bin/console doctrine:migrations:version --add --all --env=prod --no-interaction
php bin/console capco:load-base-data --force --env=prod --no-interaction
EOF
else
  migrations=`echo "$VERSIONS" | grep -o "not migrated" | wc -l`
  if [ "$migrations" == "0" ]; then
      echo "No migrations to execute."
  else
    echo "Migrating an existing database..."
    php bin/console doctrine:migrations:migrate --env=prod --no-interaction
    if [ $? -eq 1 ]; then
      echo "Database migration failed... Exiting" >&2
      exit 1
    fi
  fi
fi
echo "Database is ready after $(( SECONDS - start )) seconds!"

echo "Starting daemon to populate elasticsearch..."
/etc/service/php-fpm/populate_elasticsearch_index &

echo "php-fpm is ready to boot after $(( SECONDS - start )) seconds!"
exec /usr/sbin/php-fpm7.0 --fpm-config /etc/service/php-fpm/fpm.conf --force-stderr
