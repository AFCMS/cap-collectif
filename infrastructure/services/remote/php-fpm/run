#!/bin/bash

cd /var/www

echo "[$(date -u)][PHP-FPM] Creating var/ files..."
for directory in var/cache var/logs public/bundles public/media/default public/media/sonata_category; do
  if [ ! -d "$directory" ]; then
    mkdir -p -m 777 $directory
    chown capco:capco $directory
  fi
done
echo "[PHP-FPM] Created var/ files!"


echo "[$(date -u)][PHP-FPM] Setting permissions to public/, cache/ and logs/..."
chmod -R 777 public/media
chmod -R 777 var/logs
rm -rf var/cache/prod/*
chown -R capco:capco var/cache
chown -R capco:capco var/logs
echo "[$(date -u)][PHP-FPM] Permissions gived to public/, cache/ and logs/!"

echo "[$(date -u)][PHP-FPM] Waiting for MySQL..."
while ! (mysqladmin ping --host=127.0.0.1)
  do sleep 0.1
done

echo "[$(date -u)][PHP-FPM] Waiting RabbitMQ Admin..."
while ! curl -sSf http://127.0.0.1:15672 > /dev/null;
  do sleep 0.1
done

echo "[$(date -u)][PHP-FPM] Waiting RabbitMQ..."
while ! rabbitmqctl status > /dev/null;
  do sleep 0.1
done

# When we have fresh instance, capco vhost is not created
if rabbitmqctl list_vhosts | grep -q capco; then
    echo "[$(date -u)][PHP-FPM] Updating RabbitMQ vhost to match schema..."
    gosu capco php bin/rabbit vhost:mapping:create --user=guest --password=guest config/rabbitmq.yaml --quiet
    echo "[$(date -u)][PHP-FPM] RabbitMQ vhost updated!"
else
    echo "[$(date -u)][PHP-FPM] Creating RabbitMQ vhost schema..."
    gosu capco php bin/rabbit vhost:mapping:create --erase-vhost --user=guest --password=guest config/rabbitmq.yaml --quiet
    echo "[$(date -u)][PHP-FPM] RabbitMQ vhost created!"
fi

echo "[$(date -u)][PHP-FPM] Warming up cache and install bundle assets..."
chmod -R 777 var/ && chown -R capco:capco var/
gosu capco php bin/console cache:warmup --no-debug --env=prod --no-interaction --quiet
gosu capco php bin/console assets:install public --symlink --env=prod --no-interaction --quiet
echo "[$(date -u)][PHP-FPM] Cache warmed!"


# Retry variables for migrations (max 3)
retry=0
maxRetries=3

VERSIONS=`php bin/console doctrine:migrations:status --show-versions --env=prod --no-interaction 2>&1`
database=`echo "$VERSIONS" | grep -o "Unknown database" | wc -l`
if [ "$database" != "0" ]; then
    echo "[$(date -u)][PHP-FPM] Cleaning ElasticSearch index..."
    while ! curl http://127.0.0.1:9200 > /dev/null 2>&1;
      do sleep 0.1
    done
    curl -XDELETE http://127.0.0.1:9200/_all > /dev/null 2>&1
    echo "[$(date -u)][PHP-FPM] Creating a new database with production data..."
    gosu capco php bin/console doctrine:database:create --env=prod --no-interaction --quiet
    gosu capco php bin/console doctrine:schema:create --env=prod --no-interaction --quiet
    gosu capco php bin/console doctrine:migrations:version --add --all --env=prod --no-interaction --quiet
    gosu capco php bin/console capco:load-prod-data --force --env=prod --no-interaction --quiet
else
  migrations=`echo "$VERSIONS" | grep -o "not migrated" | wc -l`
  if [ "$migrations" == "0" ]; then
      echo "[$(date -u)][PHP-FPM] No migrations to execute."
  else
    echo "[$(date -u)][PHP-FPM] Migrating an existing database..."
    until [ ${retry} -ge ${maxRetries} ]
    do
      su capco -c "php -d memory_limit=-1 bin/console doctrine:migrations:migrate --env=prod --no-interaction" && break
      echo "[$(date -u)][PHP-FPM] Database migration failed... Exiting" >&2
      retry=$[${retry}+1]
    done
    if [ ${retry} -ge ${maxRetries} ]; then
      echo "[$(date -u)][PHP-FPM] Database migration failed after ${maxRetries} attempts!"
      # Kill docker
      kill -9 1
    fi
  fi
fi
echo "[$(date -u)][PHP-FPM] Database is ready!"

echo "[$(date -u)][PHP-FPM] Generating map token for Mapbox"
gosu capco php bin/console capco:generate:map-token MAPBOX --no-debug --env=prod --no-interaction --quiet

echo "[$(date -u)][PHP-FPM] Starting daemon to populate elasticsearch..."
/etc/service/php-fpm/populate_elasticsearch_index &
echo "[$(date -u)][PHP-FPM] Daemon started!"


echo "[$(date -u)][PHP-FPM] Started!"
exec /usr/sbin/php-fpm7.1 --fpm-config /etc/service/php-fpm/fpm.conf --force-stderr
