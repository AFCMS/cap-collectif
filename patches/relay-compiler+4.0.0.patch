diff --git a/node_modules/relay-compiler/lib/RelayCompilerBin.js b/node_modules/relay-compiler/lib/RelayCompilerBin.js
index 78d57d3..3a56b90 100644
--- a/node_modules/relay-compiler/lib/RelayCompilerBin.js
+++ b/node_modules/relay-compiler/lib/RelayCompilerBin.js
@@ -9,85 +9,95 @@
  */
 'use strict';
 
-require("@babel/polyfill");
+require('@babel/polyfill');
 
-var _require = require("./RelayCompilerMain"),
-    main = _require.main;
+var _require = require('./RelayCompilerMain'),
+  main = _require.main;
 
-var yargs = require("yargs"); // Collect args
+var yargs = require('yargs'); // Collect args
 
-
-var argv = yargs.usage('Create Relay generated files\n\n' + '$0 --schema <path> --src <path> [--watch]').options({
-  schema: {
-    describe: 'Path to schema.graphql or schema.json',
-    demandOption: true,
-    type: 'string'
-  },
-  src: {
-    describe: 'Root directory of application code',
-    demandOption: true,
-    type: 'string'
-  },
-  include: {
-    array: true,
-    "default": ['**'],
-    describe: 'Directories to include under src',
-    type: 'string'
-  },
-  exclude: {
-    array: true,
-    "default": ['**/node_modules/**', '**/__mocks__/**', '**/__tests__/**', '**/__generated__/**'],
-    describe: 'Directories to ignore under src',
-    type: 'string'
-  },
-  extensions: {
-    array: true,
-    describe: 'File extensions to compile (defaults to extensions provided by the ' + 'language plugin)',
-    type: 'string'
-  },
-  verbose: {
-    describe: 'More verbose logging',
-    type: 'boolean'
-  },
-  quiet: {
-    describe: 'No output to stdout',
-    type: 'boolean'
-  },
-  watchman: {
-    describe: 'Use watchman when not in watch mode',
-    type: 'boolean',
-    "default": true
-  },
-  watch: {
-    describe: 'If specified, watches files and regenerates on changes',
-    type: 'boolean'
-  },
-  validate: {
-    describe: 'Looks for pending changes and exits with non-zero code instead of ' + 'writing to disk',
-    type: 'boolean',
-    "default": false
-  },
-  'persist-output': {
-    describe: 'A path to a .json file where persisted query metadata should be saved'
-  },
-  noFutureProofEnums: {
-    describe: 'This option controls whether or not a catch-all entry is added to enum type definitions ' + 'for values that may be added in the future. Enabling this means you will have to update ' + 'your application whenever the GraphQL server schema adds new enum values to prevent it ' + 'from breaking.',
-    "default": false
-  },
-  language: {
-    describe: 'The name of the language plugin used for input files and artifacts',
-    type: 'string',
-    "default": 'javascript'
-  },
-  artifactDirectory: {
-    describe: 'A specific directory to output all artifacts to. When enabling this ' + 'the babel plugin needs `artifactDirectory` set as well.',
-    type: 'string',
-    "default": null
-  }
-}).help().argv; // Run script with args
+var argv = yargs
+  .usage('Create Relay generated files\n\n' + '$0 --schema <path> --src <path> [--watch]')
+  .options({
+    schema: {
+      describe: 'Path to schema.graphql or schema.json',
+      demandOption: true,
+      type: 'string',
+    },
+    src: {
+      describe: 'Root directory of application code',
+      demandOption: true,
+      type: 'string',
+    },
+    include: {
+      array: true,
+      default: ['**'],
+      describe: 'Directories to include under src',
+      type: 'string',
+    },
+    exclude: {
+      array: true,
+      default: ['**/node_modules/**', '**/__mocks__/**', '**/__tests__/**', '**/__generated__/**'],
+      describe: 'Directories to ignore under src',
+      type: 'string',
+    },
+    extensions: {
+      array: true,
+      describe:
+        'File extensions to compile (defaults to extensions provided by the ' + 'language plugin)',
+      type: 'string',
+    },
+    verbose: {
+      describe: 'More verbose logging',
+      type: 'boolean',
+    },
+    quiet: {
+      describe: 'No output to stdout',
+      type: 'boolean',
+    },
+    watchman: {
+      describe: 'Use watchman when not in watch mode',
+      type: 'boolean',
+      default: true,
+    },
+    watch: {
+      describe: 'If specified, watches files and regenerates on changes',
+      type: 'boolean',
+    },
+    validate: {
+      describe:
+        'Looks for pending changes and exits with non-zero code instead of ' + 'writing to disk',
+      type: 'boolean',
+      default: false,
+    },
+    'persist-output': {
+      describe: 'A path to a .json file where persisted query metadata should be saved',
+    },
+    noFutureProofEnums: {
+      describe:
+        'This option controls whether or not a catch-all entry is added to enum type definitions ' +
+        'for values that may be added in the future. Enabling this means you will have to update ' +
+        'your application whenever the GraphQL server schema adds new enum values to prevent it ' +
+        'from breaking.',
+      default: false,
+    },
+    language: {
+      describe: 'The name of the language plugin used for input files and artifacts',
+      type: 'string',
+      default: 'javascript',
+    },
+    artifactDirectory: {
+      describe:
+        'A specific directory to output all artifacts to. When enabling this ' +
+        'the babel plugin needs `artifactDirectory` set as well.',
+      type: 'string',
+      default: null,
+    },
+  })
+  .help().argv; // Run script with args
 // $FlowFixMe: Invalid types for yargs. Please fix this when touching this code.
 
-main(argv)["catch"](function (error) {
+main(argv)['catch'](function(error) {
   console.error(String(error.stack || error));
   process.exit(1);
 });
diff --git a/node_modules/relay-compiler/lib/RelayCompilerMain.js b/node_modules/relay-compiler/lib/RelayCompilerMain.js
index acfcdc4..65700b8 100644
--- a/node_modules/relay-compiler/lib/RelayCompilerMain.js
+++ b/node_modules/relay-compiler/lib/RelayCompilerMain.js
@@ -9,74 +9,93 @@
  */
 'use strict';
 
-var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
+var _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault');
 
-var _asyncToGenerator = require("@babel/runtime/helpers/asyncToGenerator");
+var _asyncToGenerator = require('@babel/runtime/helpers/asyncToGenerator');
 
-var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
+var _defineProperty2 = _interopRequireDefault(require('@babel/runtime/helpers/defineProperty'));
 
-var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
+var _toConsumableArray2 = _interopRequireDefault(
+  require('@babel/runtime/helpers/toConsumableArray'),
+);
 
-require("@babel/polyfill");
+require('@babel/polyfill');
 
-var CodegenRunner = require("./CodegenRunner");
+var CodegenRunner = require('./CodegenRunner');
 
-var ConsoleReporter = require("./GraphQLConsoleReporter");
+var ConsoleReporter = require('./GraphQLConsoleReporter');
 
-var DotGraphQLParser = require("./DotGraphQLParser");
+var DotGraphQLParser = require('./DotGraphQLParser');
 
-var WatchmanClient = require("./GraphQLWatchmanClient");
+var WatchmanClient = require('./GraphQLWatchmanClient');
 
-var RelaySourceModuleParser = require("./RelaySourceModuleParser");
+var RelaySourceModuleParser = require('./RelaySourceModuleParser');
 
-var RelayFileWriter = require("./RelayFileWriter");
+var RelayFileWriter = require('./RelayFileWriter');
 
-var RelayIRTransforms = require("./RelayIRTransforms");
+var RelayIRTransforms = require('./RelayIRTransforms');
 
-var RelayLanguagePluginJavaScript = require("./RelayLanguagePluginJavaScript");
+var RelayLanguagePluginJavaScript = require('./RelayLanguagePluginJavaScript');
 
-var crypto = require("crypto");
+var crypto = require('crypto');
 
-var fs = require("fs");
+var fs = require('fs');
 
-var path = require("path");
+var path = require('path');
 
-var _require = require("graphql"),
-    buildASTSchema = _require.buildASTSchema,
-    buildClientSchema = _require.buildClientSchema,
-    parse = _require.parse,
-    printSchema = _require.printSchema;
+var _require = require('graphql'),
+  buildASTSchema = _require.buildASTSchema,
+  buildClientSchema = _require.buildClientSchema,
+  parse = _require.parse,
+  printSchema = _require.printSchema;
 
 var commonTransforms = RelayIRTransforms.commonTransforms,
-    codegenTransforms = RelayIRTransforms.codegenTransforms,
-    fragmentTransforms = RelayIRTransforms.fragmentTransforms,
-    printTransforms = RelayIRTransforms.printTransforms,
-    queryTransforms = RelayIRTransforms.queryTransforms,
-    schemaExtensions = RelayIRTransforms.schemaExtensions;
+  codegenTransforms = RelayIRTransforms.codegenTransforms,
+  fragmentTransforms = RelayIRTransforms.fragmentTransforms,
+  printTransforms = RelayIRTransforms.printTransforms,
+  queryTransforms = RelayIRTransforms.queryTransforms,
+  schemaExtensions = RelayIRTransforms.schemaExtensions;
 
 function buildWatchExpression(options) {
-  return ['allof', ['type', 'f'], ['anyof'].concat((0, _toConsumableArray2["default"])(options.extensions.map(function (ext) {
-    return ['suffix', ext];
-  }))), ['anyof'].concat((0, _toConsumableArray2["default"])(options.include.map(function (include) {
-    return ['match', include, 'wholename'];
-  })))].concat((0, _toConsumableArray2["default"])(options.exclude.map(function (exclude) {
-    return ['not', ['match', exclude, 'wholename']];
-  })));
+  return [
+    'allof',
+    ['type', 'f'],
+    ['anyof'].concat(
+      (0, _toConsumableArray2['default'])(
+        options.extensions.map(function(ext) {
+          return ['suffix', ext];
+        }),
+      ),
+    ),
+    ['anyof'].concat(
+      (0, _toConsumableArray2['default'])(
+        options.include.map(function(include) {
+          return ['match', include, 'wholename'];
+        }),
+      ),
+    ),
+  ].concat(
+    (0, _toConsumableArray2['default'])(
+      options.exclude.map(function(exclude) {
+        return ['not', ['match', exclude, 'wholename']];
+      }),
+    ),
+  );
 }
 
 function getFilepathsFromGlob(baseDir, options) {
   var extensions = options.extensions,
-      include = options.include,
-      exclude = options.exclude;
-  var patterns = include.map(function (inc) {
-    return "".concat(inc, "/*.+(").concat(extensions.join('|'), ")");
+    include = options.include,
+    exclude = options.exclude;
+  var patterns = include.map(function(inc) {
+    return ''.concat(inc, '/*.+(').concat(extensions.join('|'), ')');
   });
 
-  var glob = require("fast-glob");
+  var glob = require('fast-glob');
 
   return glob.sync(patterns, {
     cwd: baseDir,
-    ignore: exclude
+    ignore: exclude,
   });
 }
 
@@ -96,14 +115,16 @@ function getLanguagePlugin(language) {
     return RelayLanguagePluginJavaScript();
   } else {
     var pluginPath = path.resolve(process.cwd(), language);
-    var requirePath = fs.existsSync(pluginPath) ? pluginPath : "relay-compiler-language-".concat(language);
+    var requirePath = fs.existsSync(pluginPath)
+      ? pluginPath
+      : 'relay-compiler-language-'.concat(language);
 
     try {
       // eslint-disable-next-line no-eval
       var languagePlugin = eval('require')(requirePath);
 
-      if (languagePlugin["default"]) {
-        languagePlugin = languagePlugin["default"];
+      if (languagePlugin['default']) {
+        languagePlugin = languagePlugin['default'];
       }
 
       if (typeof languagePlugin === 'function') {
@@ -112,7 +133,9 @@ function getLanguagePlugin(language) {
         throw new Error('Expected plugin to export a function.');
       }
     } catch (err) {
-      var e = new Error("Unable to load language plugin ".concat(requirePath, ": ").concat(err.message));
+      var e = new Error(
+        'Unable to load language plugin '.concat(requirePath, ': ').concat(err.message),
+      );
       e.stack = err.stack;
       throw e;
     }
@@ -124,19 +147,19 @@ function main(_x) {
 }
 
 function _main() {
-  _main = _asyncToGenerator(function* (options) {
+  _main = _asyncToGenerator(function*(options) {
     var _parserConfigs;
 
     var schemaPath = path.resolve(process.cwd(), options.schema);
 
     if (!fs.existsSync(schemaPath)) {
-      throw new Error("--schema path does not exist: ".concat(schemaPath));
+      throw new Error('--schema path does not exist: '.concat(schemaPath));
     }
 
     var srcDir = path.resolve(process.cwd(), options.src);
 
     if (!fs.existsSync(srcDir)) {
-      throw new Error("--src path does not exist: ".concat(srcDir));
+      throw new Error('--src path does not exist: '.concat(srcDir));
     }
 
     var persistedQueryPath = options.persistOutput;
@@ -146,7 +169,7 @@ function _main() {
       var persistOutputDir = path.dirname(persistedQueryPath);
 
       if (!fs.existsSync(persistOutputDir)) {
-        throw new Error("--persist-output path does not exist: ".concat(persistedQueryPath));
+        throw new Error('--persist-output path does not exist: '.concat(persistedQueryPath));
       }
     }
 
@@ -155,7 +178,11 @@ function _main() {
     }
 
     if (options.watch && !hasWatchmanRootFile(srcDir)) {
-      throw new Error("\n--watch requires that the src directory have a valid watchman \"root\" file.\n\nRoot files can include:\n- A .git/ Git folder\n- A .hg/ Mercurial folder\n- A .watchmanconfig file\n\nEnsure that one such file exists in ".concat(srcDir, " or its parents.\n    ").trim());
+      throw new Error(
+        '\n--watch requires that the src directory have a valid watchman "root" file.\n\nRoot files can include:\n- A .git/ Git folder\n- A .hg/ Mercurial folder\n- A .watchmanconfig file\n\nEnsure that one such file exists in '
+          .concat(srcDir, ' or its parents.\n    ')
+          .trim(),
+      );
     }
 
     if (options.verbose && options.quiet) {
@@ -164,7 +191,7 @@ function _main() {
 
     var reporter = new ConsoleReporter({
       verbose: options.verbose,
-      quiet: options.quiet
+      quiet: options.quiet,
     });
     var useWatchman = options.watchman && (yield WatchmanClient.isAvailable());
     var schema = getSchema(schemaPath);
@@ -175,20 +202,23 @@ function _main() {
     var sourceWriterName = outputExtension;
     var sourceModuleParser = RelaySourceModuleParser(languagePlugin.findGraphQLTags);
     var providedArtifactDirectory = options.artifactDirectory;
-    var artifactDirectory = providedArtifactDirectory != null ? path.resolve(process.cwd(), providedArtifactDirectory) : null;
+    var artifactDirectory =
+      providedArtifactDirectory != null
+        ? path.resolve(process.cwd(), providedArtifactDirectory)
+        : null;
     var generatedDirectoryName = artifactDirectory || '__generated__';
     var sourceSearchOptions = {
       extensions: inputExtensions,
       include: options.include,
-      exclude: ['**/*.graphql.*'].concat((0, _toConsumableArray2["default"])(options.exclude)) // Do not include artifacts
-
+      exclude: ['**/*.graphql.*'].concat((0, _toConsumableArray2['default'])(options.exclude)), // Do not include artifacts
     };
     var graphqlSearchOptions = {
       extensions: ['graphql'],
       include: options.include,
-      exclude: [path.relative(srcDir, schemaPath)].concat(options.exclude)
+      exclude: [path.relative(srcDir, schemaPath)].concat(options.exclude),
     };
-    var parserConfigs = (_parserConfigs = {}, (0, _defineProperty2["default"])(_parserConfigs, sourceParserName, {
+    var parserConfigs = ((_parserConfigs = {}),
+    (0, _defineProperty2['default'])(_parserConfigs, sourceParserName, {
       baseDir: srcDir,
       getFileFilter: sourceModuleParser.getFileFilter,
       getParser: sourceModuleParser.getParser,
@@ -196,23 +226,34 @@ function _main() {
         return schema;
       },
       watchmanExpression: useWatchman ? buildWatchExpression(sourceSearchOptions) : null,
-      filepaths: useWatchman ? null : getFilepathsFromGlob(srcDir, sourceSearchOptions)
-    }), (0, _defineProperty2["default"])(_parserConfigs, "graphql", {
+      filepaths: useWatchman ? null : getFilepathsFromGlob(srcDir, sourceSearchOptions),
+    }),
+    (0, _defineProperty2['default'])(_parserConfigs, 'graphql', {
       baseDir: srcDir,
       getParser: DotGraphQLParser.getParser,
       getSchema: function getSchema() {
         return schema;
       },
       watchmanExpression: useWatchman ? buildWatchExpression(graphqlSearchOptions) : null,
-      filepaths: useWatchman ? null : getFilepathsFromGlob(srcDir, graphqlSearchOptions)
-    }), _parserConfigs);
-    var writerConfigs = (0, _defineProperty2["default"])({}, sourceWriterName, {
-      writeFiles: getRelayFileWriter(srcDir, languagePlugin, options.noFutureProofEnums, artifactDirectory, persistedQueryPath),
+      filepaths: useWatchman ? null : getFilepathsFromGlob(srcDir, graphqlSearchOptions),
+    }),
+    _parserConfigs);
+    var writerConfigs = (0, _defineProperty2['default'])({}, sourceWriterName, {
+      writeFiles: getRelayFileWriter(
+        srcDir,
+        languagePlugin,
+        options.noFutureProofEnums,
+        artifactDirectory,
+        persistedQueryPath,
+      ),
       isGeneratedFile: function isGeneratedFile(filePath) {
-        return filePath.endsWith('.graphql.' + outputExtension) && filePath.includes(generatedDirectoryName);
+        return (
+          filePath.endsWith('.graphql.' + outputExtension) &&
+          filePath.includes(generatedDirectoryName)
+        );
       },
       parser: sourceParserName,
-      baseParsers: ['graphql']
+      baseParsers: ['graphql'],
     });
     var codegenRunner = new CodegenRunner({
       reporter: reporter,
@@ -220,7 +261,7 @@ function _main() {
       writerConfigs: writerConfigs,
       onlyValidate: options.validate,
       // TODO: allow passing in a flag or detect?
-      sourceControl: null
+      sourceControl: null,
     });
 
     if (!options.validate && !options.watch && useWatchman) {
@@ -241,14 +282,20 @@ function _main() {
   return _main.apply(this, arguments);
 }
 
-function getRelayFileWriter(baseDir, languagePlugin, noFutureProofEnums, outputDir, persistedQueryPath) {
-  return function (_ref) {
+function getRelayFileWriter(
+  baseDir,
+  languagePlugin,
+  noFutureProofEnums,
+  outputDir,
+  persistedQueryPath,
+) {
+  return function(_ref) {
     var onlyValidate = _ref.onlyValidate,
-        schema = _ref.schema,
-        documents = _ref.documents,
-        baseDocuments = _ref.baseDocuments,
-        sourceControl = _ref.sourceControl,
-        reporter = _ref.reporter;
+      schema = _ref.schema,
+      documents = _ref.documents,
+      baseDocuments = _ref.baseDocuments,
+      sourceControl = _ref.sourceControl,
+      reporter = _ref.reporter;
     var persistQuery;
     var queryMap;
 
@@ -272,9 +319,20 @@ function getRelayFileWriter(baseDir, languagePlugin, noFutureProofEnums, outputD
           codegenTransforms: codegenTransforms,
           fragmentTransforms: fragmentTransforms,
           printTransforms: printTransforms,
-          queryTransforms: queryTransforms
+          queryTransforms: queryTransforms,
+        },
+        customScalars: {
+          DateTime: 'String',
+          Email: 'String',
+          URI: 'String',
+          IP: 'String',
+          Address: 'String',
+          JSON: 'String',
+          HTML: 'String',
+          Color: 'String',
+          CssJSON: 'String',
+          GeoJSON: 'String',
         },
-        customScalars: {},
         formatModule: languagePlugin.formatModule,
         optionalInputFieldsForFlow: [],
         schemaExtensions: schemaExtensions,
@@ -283,14 +341,14 @@ function getRelayFileWriter(baseDir, languagePlugin, noFutureProofEnums, outputD
         extension: languagePlugin.outputExtension,
         typeGenerator: languagePlugin.typeGenerator,
         outputDir: outputDir,
-        persistQuery: persistQuery
+        persistQuery: persistQuery,
       },
       onlyValidate: onlyValidate,
       schema: schema,
       baseDocuments: baseDocuments,
       documents: documents,
       reporter: reporter,
-      sourceControl: sourceControl
+      sourceControl: sourceControl,
     });
 
     if (queryMap != null && persistedQueryPath != null) {
@@ -300,10 +358,14 @@ function getRelayFileWriter(baseDir, languagePlugin, noFutureProofEnums, outputD
       var _iteratorError = undefined;
 
       try {
-        for (var _iterator = queryMap.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
+        for (
+          var _iterator = queryMap.entries()[Symbol.iterator](), _step;
+          !(_iteratorNormalCompletion = (_step = _iterator.next()).done);
+          _iteratorNormalCompletion = true
+        ) {
           var _step$value = _step.value,
-              key = _step$value[0],
-              value = _step$value[1];
+            key = _step$value[0],
+            value = _step$value[1];
           object[key] = value;
         }
       } catch (err) {
@@ -311,8 +373,8 @@ function getRelayFileWriter(baseDir, languagePlugin, noFutureProofEnums, outputD
         _iteratorError = err;
       } finally {
         try {
-          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
-            _iterator["return"]();
+          if (!_iteratorNormalCompletion && _iterator['return'] != null) {
+            _iterator['return']();
           }
         } finally {
           if (_didIteratorError) {
@@ -337,24 +399,32 @@ function getSchema(schemaPath) {
       source = printSchema(buildClientSchema(JSON.parse(source).data));
     }
 
-    source = "\n  directive @include(if: Boolean) on FRAGMENT_SPREAD | FIELD | INLINE_FRAGMENT\n  directive @skip(if: Boolean) on FRAGMENT_SPREAD | FIELD | INLINE_FRAGMENT\n\n  ".concat(source, "\n  ");
+    source = '\n  directive @include(if: Boolean) on FRAGMENT_SPREAD | FIELD | INLINE_FRAGMENT\n  directive @skip(if: Boolean) on FRAGMENT_SPREAD | FIELD | INLINE_FRAGMENT\n\n  '.concat(
+      source,
+      '\n  ',
+    );
     return buildASTSchema(parse(source), {
-      assumeValid: true
+      assumeValid: true,
     });
   } catch (error) {
-    throw new Error("\nError loading schema. Expected the schema to be a .graphql or a .json\nfile, describing your GraphQL server's API. Error detail:\n\n".concat(error.stack, "\n    ").trim());
+    throw new Error(
+      "\nError loading schema. Expected the schema to be a .graphql or a .json\nfile, describing your GraphQL server's API. Error detail:\n\n"
+        .concat(error.stack, '\n    ')
+        .trim(),
+    );
   }
 } // Ensure that a watchman "root" file exists in the given directory
 // or a parent so that it can be watched
 
-
 var WATCHMAN_ROOT_FILES = ['.git', '.hg', '.watchmanconfig'];
 
 function hasWatchmanRootFile(testPath) {
   while (path.dirname(testPath) !== testPath) {
-    if (WATCHMAN_ROOT_FILES.some(function (file) {
-      return fs.existsSync(path.join(testPath, file));
-    })) {
+    if (
+      WATCHMAN_ROOT_FILES.some(function(file) {
+        return fs.existsSync(path.join(testPath, file));
+      })
+    ) {
       return true;
     }
 
@@ -365,5 +435,5 @@ function hasWatchmanRootFile(testPath) {
 }
 
 module.exports = {
-  main: main
+  main: main,
 };
