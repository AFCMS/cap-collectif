input AddUsersInGroupInput {
  # Users that will be added to the group.
  users: [ID!]!

  # The concerned group id.
  groupId: ID!
  clientMutationId: String
}

type AddUsersInGroupPayload {
  group: Group!
  clientMutationId: String
}

# An argument
type Argument implements Contribution, TrashableContribution, ContributionWithAuthor, EditableContribution {
  # Identifies the date and time when the object was created.
  createdAt: String!

  # Identifies the date and time when the object was last updated.
  updatedAt: String!
  url: String!
  expired: Boolean!
  published: Boolean!
  trashed: Boolean!

  # Date of trash.
  trashedAt: String

  # Reason of trash.
  trashedReason: String

  # The author of the argument.
  author: User!

  # The type.
  type: ArgumentValue!
  votesCount: Int!

  # The content of the argument.
  id: ID!

  # The content of the argument.
  body: String!

  # Return the related contribution if the contribution is related to another.
  related: Contribution

  # The kind of contribution (argument).
  kind: String!
}

# Value of an argument
enum ArgumentValue {
  AGAINST
  FOR
}

input ChangeCollectStatusInput {
  statusId: ID

  # The proposal id
  proposalId: ID!
  clientMutationId: String
}

type ChangeCollectStatusPayload {
  proposal: Proposal!
  clientMutationId: String
}

input ChangeDistrictInput {
  # The district id
  districtId: ID!
  geojson: GeoJSON
  displayedOnMap: Boolean
  name: String
  clientMutationId: String
}

type ChangeDistrictPayload {
  district: District!
  clientMutationId: String
}

input ChangeProposalContentInput {
  # The proposal id
  id: ID!

  # The new proposal title
  title: String

  # The new proposal body
  body: HTML

  # The new proposal summary
  summary: String

  # The author id (ROLE_SUPER_ADMIN allowed only)
  author: ID

  # The theme id (feature themes enabled)
  theme: String

  # The category id
  category: String

  # The district id (feature districts enabled)
  district: String

  # The address geocoded by google
  address: String

  # The custom fields responses
  responses: [ResponseInput]

  # Set this to true to delete the current media
  deleteCurrentMedia: Boolean
  clientMutationId: String
}

type ChangeProposalContentPayload {
  proposal: Proposal!
  clientMutationId: String
}

input ChangeProposalEvaluationInput {
  # The proposal id
  proposalId: ID!
  responses: [ResponseInput!]!
  clientMutationId: String
}

type ChangeProposalEvaluationPayload {
  proposal: Proposal!
  clientMutationId: String
}

input ChangeProposalNotationInput {
  # The proposal id
  proposalId: ID!
  estimation: Int
  likers: [ID!]
  evaluers: [ID!]
  clientMutationId: String
}

type ChangeProposalNotationPayload {
  proposal: Proposal!
  clientMutationId: String
}

input ChangeProposalProgressStepsInput {
  progressSteps: [ProgressStepInput!]!
  proposalId: String!
  clientMutationId: String
}

type ChangeProposalProgressStepsPayload {
  proposal: Proposal!
  clientMutationId: String
}

input ChangeProposalPublicationStatusInput {
  # The new publication status
  publicationStatus: PublicationStatus!

  # Added if you set publicationStatus to TRASHED
  trashedReason: String

  # The proposal id
  proposalId: ID!
  clientMutationId: String
}

type ChangeProposalPublicationStatusPayload {
  proposal: Proposal!
  clientMutationId: String
}

input ChangeSelectionStatusInput {
  stepId: ID!
  proposalId: ID!
  statusId: ID
  clientMutationId: String
}

type ChangeSelectionStatusPayload {
  proposal: Proposal!
  clientMutationId: String
}

type CollectStep implements Step {
  id: ID!
  kind: String!
  title: String!
  statuses: [Status!]!
  voteThreshold: Int
}

# A consultation
type Consultation implements Step {
  kind: String!

  # The id of the consultation.
  id: ID!

  # The id of the related project.
  projectId: String!

  # The title of the consultation.
  title: String!

  # Contributions are allowed right now.
  contribuable: Boolean!

  # List of contributions from any sections.
  contributions: [Opinion]

  # List of sections.
  sections: [Section]
  contributionConnection(
    # Ordering options for contributions returned from the connection.
    orderBy: ContributionOrder

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the first n elements from the list.
    first: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the last n elements from the list.
    last: Int
  ): ContributionConnection
}

# A contribution with an author
interface Contribution {
  id: ID!
  kind: String!

  # Related contribution.
  related: Contribution
}

# A connection to a list of items.
type ContributionConnection {
  totalCount: Int!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # Information to aid in pagination.
  edges: [ContributionEdge]
}

# An edge in a connection.
type ContributionEdge {
  # The item at the end of the edge.
  node: Opinion!

  # A cursor for use in pagination.
  cursor: String!
}

# Ways in which lists of contributions can be ordered upon return.
input ContributionOrder {
  field: ContributionOrderField! = POSITION
  direction: OrderDirection! = DESC
}

# Ordering options for contributions connections.
enum ContributionOrderField {
  POSITION
  RANDOM
  CREATED_AT
  POPULAR
  COMMENT_COUNT
  VOTE_COUNT
}

# A contribution with an author
interface ContributionWithAuthor {
  # The author of the contribution.
  author: User!
}

input CreateGroupInput {
  # The title of the group
  title: String!

  # The description of the group
  description: String
  clientMutationId: String
}

type CreateGroupPayload {
  group: Group!
  clientMutationId: String
}

input CreateProposalFormInput {
  # The proposal form title
  title: String!
  clientMutationId: String
}

type CreateProposalFormPayload {
  proposalForm: ProposalForm!
  clientMutationId: String
}

scalar DateTime

input DeleteGroupInput {
  # The group id
  groupId: ID!
  clientMutationId: String
}

type DeleteGroupPayload {
  deletedGroupTitle: String!
  clientMutationId: String
}

input DeleteProposalInput {
  # The proposal id
  proposalId: ID!
  clientMutationId: String
}

type DeleteProposalPayload {
  proposal: Proposal!
  clientMutationId: String
}

input DeleteUserInGroupInput {
  # The user id
  userId: ID!

  # The group id
  groupId: ID!
  clientMutationId: String
}

type DeleteUserInGroupPayload {
  group: Group!
  clientMutationId: String
}

# A district
type District {
  id: ID!
  name: String!
  geojson: GeoJSON
  displayedOnMap: Boolean!
}

input DistrictInput {
  name: String!
  geojson: GeoJSON
  displayedOnMap: Boolean!
}

# Ordering options for districts.
enum DistrictOrderField {
  ALPHABETICAL
  CREATED_AT
}

# A contribution with an author
interface EditableContribution {
  # Identifies the date and time when the object was last updated.
  updatedAt: String!
}

# A Evaluation form (question)
type EvaluationForm {
  # The id of evaluation form (question)
  id: String!

  # The title of evaluation form (question)
  title: String!

  # List of questions in the evaluation form
  questions: [Question!]
}

scalar GeoJSON

# A list of groups
type Group {
  # The content of the group.
  id: ID!

  # Identifies the group name.
  title: String!

  # Identifies the description of the group.
  description: String
  usersConnection(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the first n elements from the list.
    first: Int = 100

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the last n elements from the list.
    last: Int
  ): UsersConnection!
}

scalar HTML

scalar JSON

# A media
type Media {
  # The id of the media.
  id: ID!

  # The url of the media.
  url: String!
  name: String!
  size: String!
}

# A media question
type MediaQuestion implements Question {
  id: String!
  title: String!
  type: QuestionTypeValue!
  position: Int!
  private: Boolean!
  required: Boolean!
  helpText: String
  kind: String!
  isOtherAllowed: Boolean!
  choices: [QuestionChoice!]
  validationRule: MultipleChoiceQuestionValidationRule
  slug: String!
}

# A response
type MediaResponse implements Response {
  question: Question!

  # Medias
  medias: [Media]!
}

# A multiple choice question
type MultipleChoiceQuestion implements Question {
  id: String!
  title: String!
  type: QuestionTypeValue!
  position: Int!
  private: Boolean!
  required: Boolean!
  helpText: String
  kind: String!
  isOtherAllowed: Boolean!
  choices: [QuestionChoice!]
  validationRule: MultipleChoiceQuestionValidationRule
  slug: String!
}

# Multiple Choice Question Validation Rule
type MultipleChoiceQuestionValidationRule {
  type: String
  number: String
}

type Mutation {
  changeProposalPublicationStatus(input: ChangeProposalPublicationStatusInput!): ChangeProposalPublicationStatusPayload
  changeProposalContent(input: ChangeProposalContentInput!): ChangeProposalContentPayload
  changeProposalNotation(input: ChangeProposalNotationInput!): ChangeProposalNotationPayload
  selectProposal(input: SelectProposalInput!): SelectProposalPayload
  unselectProposal(input: UnselectProposalInput!): UnselectProposalPayload
  changeSelectionStatus(input: ChangeSelectionStatusInput!): ChangeSelectionStatusPayload
  changeCollectStatus(input: ChangeCollectStatusInput!): ChangeCollectStatusPayload
  changeProposalProgressSteps(input: ChangeProposalProgressStepsInput!): ChangeProposalProgressStepsPayload
  deleteProposal(input: DeleteProposalInput!): DeleteProposalPayload
  createProposalForm(input: CreateProposalFormInput!): CreateProposalFormPayload
  changeDistrict(input: ChangeDistrictInput!): ChangeDistrictPayload
  updateProposalForm(input: UpdateProposalFormInput!): UpdateProposalFormPayload
  updateProposalFormNotificationsConfiguration(input: UpdateProposalFormNotificationsConfigurationInput!): UpdateProposalFormNotificationsConfigurationPayload
  setEvaluationFormInProposalForm(input: SetEvaluationFormInProposalFormInput!): SetEvaluationFormInProposalFormPayload
  changeProposalEvaluation(input: ChangeProposalEvaluationInput!): ChangeProposalEvaluationPayload
  createGroup(input: CreateGroupInput!): CreateGroupPayload
  updateGroup(input: UpdateGroupInput!): UpdateGroupPayload
  deleteGroup(input: DeleteGroupInput!): DeleteGroupPayload
  deleteUserInGroup(input: DeleteUserInGroupInput!): DeleteUserInGroupPayload
  addUsersInGroup(input: AddUsersInGroupInput!): AddUsersInGroupPayload
}

# A notifications configuration
type NotificationsConfiguration {
  onCreate: Boolean!
  onUpdate: Boolean!
  onDelete: Boolean!
  onCommentCreate: Boolean!
  onCommentUpdate: Boolean!
  onCommentDelete: Boolean!
}

# A contribution
type Opinion implements Contribution, TrashableContribution, ContributionWithAuthor, EditableContribution {
  # Identifies the date and time when the object was created.
  createdAt: String!

  # Identifies the date and time when the object was last updated.
  updatedAt: String!

  # The HTTP url for this contribution.
  url: URI!

  # The author of the contribution.
  author: User!
  type: OpinionType!

  # true if the contribution is pinned.
  pinned: Boolean!

  # true if the contribution is expired.
  expired: Boolean!
  published: Boolean!

  # true if the contribution is trashed.
  trashed: Boolean!

  # The moment the moderator trashed the contribution.
  trashedAt: String

  # The reason the moderator trashed the contribution.
  trashedReason: String

  # Number of votes.
  votesCount: Int!

  # Number of ok votes.
  votesCountOk: Int!

  # Number of mitige votes.
  votesCountMitige: Int!

  # Number of negative votes.
  votesCountNok: Int!
  connectionsCount: Int!

  # Number of arguments.
  argumentsCount: Int!

  # Number of for arguments.
  argumentsCountFor: Int!

  # Number of against arguments.
  argumentsCountAgainst: Int!

  # Number of versions.
  versionsCount: Int!

  # Number of sources.
  sourcesCount: Int!
  votes(first: Int): [PropositionVote]

  # The content of the contribution.
  id: ID!

  # Return the related contribution if the contribution is related to another.
  related: Contribution

  # The kind of contribution.
  kind: String!

  # Identifies the contribution title.
  title: String!

  # Identifies the body of the contribution.
  body: HTML!

  # Identifies the body of the contribution rendered to text.
  bodyText: String!

  # The arguments related to the contribution.
  arguments(
    # If omitted, returns all arguments. If provided, returns the arguments of this particular type.
    type: ArgumentValue
  ): [Argument]

  # The versions related to the contribution.
  versions: [Version]

  # The sources related to the contribution.
  sources: [Source]

  # Where the proposition has been placed.
  section: Section!
  reportings: [Reporting]
}

union OpinionOrVersion = Opinion | Version

# A type of opinion
type OpinionType implements Contribution, TrashableContribution, ContributionWithAuthor, EditableContribution {
  # Identifies the date and time when the object was created.
  createdAt: String!

  # Identifies the date and time when the object was last updated.
  updatedAt: String!

  # The url of contribution.
  url: String!

  # The author of the contribution.
  author: User!
  type: OpinionType!
  expired: Boolean!
  published: Boolean!
  trashed: Boolean!

  # Date of trash.
  trashedAt: String

  # Reason of trash.
  trashedReason: String

  # Number of votes.
  votesCount: Int!

  # Number of ok votes.
  votesCountOk: Int!

  # Number of mitige votes.
  votesCountMitige: Int!

  # Number of negative votes.
  votesCountNok: Int!

  # Number of arguments.
  argumentsCount: Int!

  # Number of for arguments.
  argumentsCountFor: Int!

  # Number of against arguments.
  argumentsCountAgainst: Int!

  # Number of versions.
  versionsCount: Int!

  # Number of sources.
  sourcesCount: Int!
  votes(first: Int): [PropositionVote]

  # The content of the contribution.
  id: ID!

  # Return the related contribution if the contribution is related to another.
  related: Contribution

  # The kind of contribution.
  kind: String!

  # The title of the contribution.
  title: String!

  # The content of the contribution.
  body: String!

  # The arguments related to the contribution.
  arguments(
    # If omitted, returns all arguments. If provided, returns the arguments of this particular type.
    type: ArgumentValue
  ): [Argument]

  # The versions related to the contribution.
  versions: [Version]

  # The sources related to the contribution.
  sources: [Source]

  # Where the proposition has been placed.
  section: Section!
  reportings: [Reporting]
}

# Possible directions in which to order a list of items when provided an orderBy argument.
enum OrderDirection {
  # Specifies an ascending order for a given orderBy argument.
  ASC

  # Specifies a descending order for a given orderBy argument.
  DESC
}

type OtherStep implements Step {
  id: ID!
  kind: String!
  title: String!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Post {
  id: String!
  title: String!
  abstract: String!
}

type PresentationStep implements Step {
  id: ID!
  kind: String!
  title: String!
}

# A budget contribution
type ProgressStep {
  id: ID!
  title: String!
  startAt: DateTime!
  endAt: DateTime
}

input ProgressStepInput {
  title: String!
  startAt: DateTime!
  endAt: DateTime
}

# A budget contribution
type Project {
  steps: [Step!]!
}

# A budget contribution
type Proposal {
  # The HTTP show url for this contribution.
  show_url: URI!
  progressSteps: [ProgressStep!]!
  evaluers: [Group!]!
  news: [Post!]!
  project: Project!
  status: Status
  selections: [Selection!]!
  likers: [User!]!
  estimation: Int
  responses: [Response]!
  media: Media
  theme: Theme
  category: ProposalCategory
  district: District
  address: JSON

  # The author of the contribution.
  author: User!

  # The delete date.
  deletedAt: DateTime

  # The publication status.
  publicationStatus: PublicationStatus!
  trashedReason: String

  # The content of the contribution.
  id: String!

  # The unique reference of proposal
  reference: String!

  # Identifies the contribution title.
  title: String!

  # Identifies the body of the contribution.
  body: HTML

  # Identifies the body of the contribution rendered to text.
  bodyText: String!

  # Identifies the summary of the contribution.
  summary: String

  # Identifies the preview text of the contribution.
  summaryOrBodyExcerpt: String

  # Identifies the form where the contribution was submitted.
  form: ProposalForm!

  # Identifies the answers to an evaluation form.
  evaluation: ProposalEvaluation

  # Identifies proposals as draft.
  draft: Boolean!

  # Count number of comments for the proposal.
  commentsCount: Int!

  # Identifies the date and time when the object was created.
  createdAt: DateTime!
}

# A proposal category
type ProposalCategory {
  id: ID!
  name: String!
}

input ProposalCategoryInput {
  name: String!
}

# An evaluation for a proposal
type ProposalEvaluation {
  # Identifies the proposal.
  proposal: Proposal!

  # List of responses for the evaluation
  responses: [Response]!
}

# A budget form
type ProposalForm {
  id: ID!
  reference: String!
  description: String
  summaryHelpText: String
  illustrationHelpText: String
  title: String!
  categories: [ProposalCategory!]!
  usingThemes: Boolean!
  themeMandatory: Boolean!
  themeHelpText: String
  usingDistrict: Boolean!
  commentable: Boolean!
  proposalInAZoneRequired: Boolean!
  districts(order: DistrictOrderField = ALPHABETICAL): [District!]!
  districtMandatory: Boolean!
  districtHelpText: String
  usingCategories: Boolean!
  categoryMandatory: Boolean!
  categoryHelpText: String
  usingAddress: Boolean!
  titleHelpText: String
  descriptionHelpText: String
  addressHelpText: String
  questions: [Question!]!
  latMap: Float
  lngMap: Float
  zoomMap: Int

  # The HTTP url for this proposal form.
  url: URI!
  notificationsConfiguration: NotificationsConfiguration!

  # Get the evaluation form of the proposal form
  evaluationForm: EvaluationForm

  # Identifies the step that use the proposal form.
  step: CollectStep
}

type PropositionVote implements YesNoPairedVote, Contribution, ContributionWithAuthor {
  id: ID!

  # The related proposition.
  related: Contribution

  # The author of the contribution.
  author: User!
  value: YesNoPairedVoteValue!

  # If vote is expired, it exists but doesn't count.
  expired: Boolean!

  # Date of vote.
  createdAt: String!

  # Returns 'vote'.
  kind: String!
}

enum PublicationStatus {
  # Was publicly visible, but has expired.
  EXPIRED

  # Normal status, Publicly visible
  PUBLISHED

  # Publicly visible in the trash bin
  TRASHED

  # In the trash bin, content not visible
  TRASHED_NOT_VISIBLE

  # Not publicly visible, deleted by author
  DELETED

  # Draft, not publicly visible, only showed for his author.
  DRAFT

  # Visible only by the author, he is not yet confirmed !
  NOT_ACCOUNTED
}

type Query {
  users(
    # Remove super admin from export.
    superAdmin: Boolean!
  ): [User]
  consultations(
    # If omitted, returns all consultations. If provided, returns the consultation of the particular id.
    id: ID
  ): [Consultation!]!
  groups: [Group!]!

  # Retrieve availables districts for a given address
  availableDistrictsForLocalisation(proposalFormId: ID!, latitude: Float!, longitude: Float!): [District!]!
  votesByContribution(contribution: Int!): [PropositionVote]
  contributions(
    # Returns all contributions of the provided consultation.
    consultation: ID!
  ): [Opinion]
  contributionsBySection(
    sectionId: ID!

    # Max depth.
    limit: Int!
  ): [Opinion]
  section(id: ID!): Section
  proposal(id: ID!): Proposal!
  proposalForm(id: ID!): ProposalForm!
  question(id: Int!): Question!
  availableQuestionnaires: [Questionnaire!]
  draftProposalsForUserInStep(stepId: ID!): [Proposal!]
  group(id: ID!): Group!
}

interface Question {
  id: String!
  title: String!
  type: QuestionTypeValue!
  position: Int!
  private: Boolean!
  required: Boolean!
  isOtherAllowed: Boolean!
  helpText: String
  choices: [QuestionChoice!]
  validationRule: MultipleChoiceQuestionValidationRule
  kind: String!
  slug: String!
}

# A possible choice of a question
type QuestionChoice {
  id: ID!
  title: String!
  description: String
  color: String
}

input QuestionInput {
  # Nullable because of editing and to handle creation.
  id: String
  title: String!
  type: QuestionTypeValue!
  private: Boolean!
  required: Boolean!
  helpText: String
}

# Value of type of question
enum QuestionTypeValue {
  text
  textarea
  editor
  radio
  select
  checkbox
  ranking
  medias
  button
}

type Questionnaire {
  id: String!
  title: String!
  questions: [Question!]!
}

type QuestionnaireAbstractQuestion {
  id: Int!
  position: Int
  question: Question
}

input QuestionnaireAbstractQuestionInput {
  question: QuestionInput!
  position: Int!
}

type RankingStep implements Step {
  id: ID!
  kind: String!
  title: String!
}

# A report
type Reporting implements Contribution, ContributionWithAuthor {
  # Identifies the date and time when the object was created.
  createdAt: String!

  # The author of the reporting.
  author: User!

  # Kind of report.
  type: ReportingType!

  # The content of the argument.
  id: ID!

  # The content of the argument.
  body: String!

  # Return the related contribution if the contribution is related to another.
  related: Contribution

  # Returns 'report'.
  kind: String!
}

# Type of reporting
enum ReportingType {
  SEX
  OFF
  SPAM
  ERROR
  OFF_TOPIC
}

# A contribution with an author
interface Response {
  question: Question!
}

# A response
input ResponseInput {
  # The value
  value: String

  # The question id
  question: String!
}

# A section
type Section {
  # The id of the section.
  id: ID!

  # The slug of the section.
  slug: String!

  # The title of the section.
  title: String!

  # The color of the section.
  color: String!

  # The subtitle of the section.
  subtitle: String
  contributionsCount: Int!
  contributionConnection(
    # Ordering options for contributions returned from the connection.
    orderBy: ContributionOrder

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the first n elements from the list.
    first: Int = 10

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the last n elements from the list.
    last: Int
  ): ContributionConnection!

  # Array of appendix types (possibly empty).
  appendixTypes: [SectionAppendixType]

  # Array of subsections (possibly empty).
  sections: [Section]
  voteWidgetType: Int!
  commentSystem: Int!
  contribuable: Boolean!
  versionable: Boolean!
  sourceable: Boolean!
  linkable: Boolean!

  # The url of the section.
  url: String
}

# A section
type SectionAppendixType {
  id: String
  position: Int!
  title: String
}

input SelectProposalInput {
  # The step where the proposal is selected
  stepId: String!

  # The proposal ID to select.
  proposalId: ID!

  # The selection status.
  statusId: String
  clientMutationId: String
}

type SelectProposalPayload {
  proposal: Proposal!
  clientMutationId: String
}

# A budget contribution
type Selection {
  step: SelectionStep!
  status: Status
}

# A budget contribution
type SelectionStep implements Step {
  id: ID!
  kind: String!
  title: String!
  statuses: [Status!]!

  # Only one selection step inside a project can have realisation steps, true if this one
  allowingProgressSteps: Boolean!
  voteThreshold: Int
}

input SetEvaluationFormInProposalFormInput {
  proposalFormId: ID!
  evaluationFormId: ID
  clientMutationId: String
}

type SetEvaluationFormInProposalFormPayload {
  proposalForm: ProposalForm!
  clientMutationId: String
}

# A simple question
type SimpleQuestion implements Question {
  id: String!
  title: String!
  type: QuestionTypeValue!
  position: Int!
  private: Boolean!
  required: Boolean!
  helpText: String
  kind: String!
  isOtherAllowed: Boolean!
  choices: [QuestionChoice!]
  validationRule: MultipleChoiceQuestionValidationRule
  slug: String!
}

# A source
type Source implements Contribution, TrashableContribution, ContributionWithAuthor, EditableContribution {
  # Identifies the date and time when the object was created.
  createdAt: String!

  # Identifies the date and time when the object was last updated.
  updatedAt: String!
  expired: Boolean!
  published: Boolean!
  trashed: Boolean!

  # Date of trash.
  trashedAt: String

  # Reason of trash.
  trashedReason: String

  # The id of the source.
  id: ID!
  votesCount: Int!

  # The author of the source.
  author: User!

  # The title of the source.
  title: String!

  # The content of the source.
  body: String!

  # Return the related contribution if the contribution is related to another.
  related: Contribution

  # Returns 'source'.
  kind: String!
}

type Status {
  id: ID!
  name: String!
}

# A step in a project
interface Step {
  id: ID!
  kind: String!
  title: String!
}

type SynthesisStep implements Step {
  id: ID!
  kind: String!
  title: String!
}

# A theme
type Theme {
  id: String!
  title: String!
}

# A trashable contribution
interface TrashableContribution {
  trashed: Boolean!

  # Date of trash.
  trashedAt: String

  # Reason of trash.
  trashedReason: String
}

scalar URI

input UnselectProposalInput {
  # The step where the proposal is selected
  stepId: String!

  # The proposal ID to remove from step.
  proposalId: ID!
  clientMutationId: String
}

type UnselectProposalPayload {
  proposal: Proposal!
  clientMutationId: String
}

input UpdateGroupInput {
  groupId: ID!
  title: String!
  description: String
  clientMutationId: String
}

type UpdateGroupPayload {
  group: Group!
  clientMutationId: String
}

input UpdateProposalFormInput {
  proposalFormId: ID!
  title: String
  description: String
  summaryHelpText: String
  illustrationHelpText: String
  usingThemes: Boolean
  themeMandatory: Boolean
  themeHelpText: String
  usingDistrict: Boolean
  districtMandatory: Boolean
  commentable: Boolean
  districtHelpText: String
  usingCategories: Boolean
  categoryMandatory: Boolean
  categoryHelpText: String
  usingAddress: Boolean
  proposalInAZoneRequired: Boolean
  titleHelpText: String
  descriptionHelpText: String
  addressHelpText: String
  latMap: Float
  lngMap: Float
  zoomMap: Int
  categories: [ProposalCategoryInput!]
  districts: [DistrictInput!]
  questions: [QuestionnaireAbstractQuestionInput!]
  clientMutationId: String
}

input UpdateProposalFormNotificationsConfigurationInput {
  proposalFormId: ID!
  onCreate: Boolean!
  onUpdate: Boolean!
  onDelete: Boolean!
  onCommentCreate: Boolean!
  onCommentUpdate: Boolean!
  onCommentDelete: Boolean!
  clientMutationId: String
}

type UpdateProposalFormNotificationsConfigurationPayload {
  proposalForm: ProposalForm!
  clientMutationId: String
}

type UpdateProposalFormPayload {
  proposalForm: ProposalForm!
  clientMutationId: String
}

# An user
type User {
  # The id of the user.
  id: ID!
  vip: Boolean!

  # The profile picture of the user.
  media: Media

  # email.
  email: String!
  displayName: String!

  # Username of the user.
  username: String!

  # URL to user profile, null if the feature profiles is disabled.
  show_url: URI

  # Identifies the date and time when the object was created.
  createdAt: String!

  # Updated date of the user.
  updatedAt: String

  # Last connection of the user.
  lastLogin: String

  # Is user is activated.
  enabled: Boolean!
  locked: Boolean!
  phoneConfirmed: Boolean!
  expiresAt: String
  phoneConfirmationSentAt: String
  gender: String
  firstname: String
  lastname: String
  dateOfBirth: String

  # Unattended roles as array.
  roles: [String]

  # Array of roles converted and translated to string.
  rolesText: String
  website: String
  biography: String
  address: String
  address2: String
  zipCode: String
  city: String
  phone: String
  googleId: String
  facebookId: String
  samlId: String
  opinionsCount: Int!
  opinionVotesCount: Int!
  opinionVersionsCount: Int!
  argumentsCount: Int!
  argumentVotesCount: Int!
  proposalsCount: Int!
  proposalVotesCount: Int!
  commentVotesCount: Int!
  sourcesCount: Int!
  repliesCount: Int!
  ideasCount: Int!
  ideaVotesCount: Int!
  ideaCommentsCount: Int!
  postCommentsCount: Int!
  eventCommentsCount: Int!
  projectsCount: Int!

  # The type of the person.
  userType: UserType

  # Is user accepted the external communication during the registration.
  consentExternalCommunication: Boolean!
}

# A list of users in groups
type UserGroup {
  # The identifier of the group
  id: ID!

  # Identifies the user
  user: User!

  # Identifies the group
  group: Group!
}

# A type of person
type UserType {
  # The name of the type.
  name: String!
}

# A connection to a list of items.
type UsersConnection {
  totalCount: Int!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # Information to aid in pagination.
  edges: [UsersEdge]
}

# An edge in a connection.
type UsersEdge {
  # The item at the end of the edge.
  node: User!

  # A cursor for use in pagination.
  cursor: String!
}

# A response
type ValueResponse implements Response {
  question: Question!

  # The value
  value: String
}

# A version of contribution
type Version implements Contribution, TrashableContribution, ContributionWithAuthor, EditableContribution {
  # Identifies the date and time when the object was created.
  createdAt: String!

  # Identifies the date and time when the object was last updated.
  updatedAt: String!

  # The url of version.
  url: String!

  # The author of the contribution.
  author: User!
  expired: Boolean!
  published: Boolean!
  trashed: Boolean!

  # Date of trash.
  trashedAt: String

  # Reason of trash.
  trashedReason: String

  # Explenation.
  comment: String

  # Number of votes.
  votesCount: Int!

  # Number of ok votes.
  votesCountOk: Int!

  # Number of mitige votes.
  votesCountMitige: Int!

  # Number of negative votes.
  votesCountNok: Int!

  # Number of arguments.
  argumentsCount: Int!

  # Number of for arguments.
  argumentsCountFor: Int!

  # Number of against arguments.
  argumentsCountAgainst: Int!

  # Number of sources.
  sourcesCount: Int!
  votes(first: Int): [VersionVote]

  # The content of the contribution.
  id: ID!

  # Return the related contribution if the contribution is related to another.
  related: Contribution

  # Returns 'version'.
  kind: String!

  # The title of the contribution.
  title: String!

  # The content of the contribution.
  body: HTML!

  # The content of the contribution.
  bodyText: HTML!

  # The arguments related to the contribution.
  arguments(
    # If omitted, returns all arguments. If provided, returns the arguments of this particular type.
    type: ArgumentValue
  ): [Argument]

  # The sources related to the contribution.
  sources: [Source]
  reportings: [Reporting]
}

type VersionVote implements YesNoPairedVote, Contribution, ContributionWithAuthor {
  id: ID!

  # The author of the contribution.
  author: User!
  value: YesNoPairedVoteValue!

  # If vote is expired, it exists but doesn't count.
  expired: Boolean!

  # Date of vote.
  createdAt: String!

  # Return the related contribution if the contribution is related to another.
  related: Contribution

  # Returns 'vote'.
  kind: String!
}

interface YesNoPairedVote {
  id: ID!

  # The author of the contribution.
  author: User!
  value: YesNoPairedVoteValue!

  # If vote is expired, it exists but doesn't count.
  expired: Boolean!

  # Date of vote.
  createdAt: String!
}

enum YesNoPairedVoteValue {
  YES
  NO
  MITIGE
}
