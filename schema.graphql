# An argument
type Argument implements Contribution, TrashableContribution, ContributionWithAuthor, EditableContribution {
  # Identifies the date and time when the object was created.
  createdAt: String!

  # Identifies the date and time when the object was last updated.
  updatedAt: String!
  url: String!
  expired: Boolean!
  published: Boolean!
  trashed: Boolean!

  # Date of trash.
  trashedAt: String

  # Reason of trash.
  trashedReason: String

  # The author of the argument.
  author: User!

  # The type.
  type: ArgumentValue!
  votesCount: Int!

  # The content of the argument.
  id: ID!

  # The content of the argument.
  body: String!

  # Return the related contribution if the contribution is related to another.
  related: Contribution

  # The kind of contribution (argument).
  kind: String!
}

# Value of an argument
enum ArgumentValue {
  AGAINST
  FOR
}

# A consultation
type Consultation {
  # The id of the consultation.
  id: ID!

  # The id of the related project.
  projectId: String!

  # The title of the consultation.
  title: String!

  # Contributions are allowed right now.
  contribuable: Boolean!

  # List of contributions from any sections.
  contributions: [Opinion]

  # List of sections.
  sections: [Section]
  contributionConnection(
    # Ordering options for contributions returned from the connection.
    orderBy: ContributionOrder

    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the first n elements from the list.
    first: Int

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the last n elements from the list.
    last: Int
  ): ContributionConnection
}

# A contribution with an author
interface Contribution {
  id: ID!
  kind: String!

  # Related contribution.
  related: Contribution
}

# A connection to a list of items.
type ContributionConnection {
  totalCount: Int

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # Information to aid in pagination.
  edges: [ContributionEdge]
}

# An edge in a connection.
type ContributionEdge {
  # The item at the end of the edge.
  node: Opinion

  # A cursor for use in pagination.
  cursor: String!
}

# Ways in which lists of contributions can be ordered upon return.
input ContributionOrder {
  field: ContributionOrderField!
  direction: OrderDirection!
}

# Ordering options for contributions connections.
enum ContributionOrderField {
  POSITION
  RANDOM
  CREATED_AT
  POPULAR
  COMMENT_COUNT
  VOTE_COUNT
}

# A contribution with an author
interface ContributionWithAuthor {
  # The author of the contribution.
  author: User!
}

scalar DateTime

# A contribution with an author
interface EditableContribution {
  # Identifies the date and time when the object was last updated.
  updatedAt: String!
}

scalar HTML

# A media
type Media {
  # The id of the media.
  id: ID!

  # The url of the media.
  url: String!
}

# A contribution
type Opinion implements Contribution, TrashableContribution, ContributionWithAuthor, EditableContribution {
  # Identifies the date and time when the object was created.
  createdAt: String!

  # Identifies the date and time when the object was last updated.
  updatedAt: String!

  # The HTTP url for this contribution.
  url: URI!

  # The author of the contribution.
  author: User!
  type: OpinionType!

  # true if the contribution is pinned.
  pinned: Boolean!

  # true if the contribution is expired.
  expired: Boolean!
  published: Boolean!

  # true if the contribution is trashed.
  trashed: Boolean!

  # The moment the moderator trashed the contribution.
  trashedAt: String

  # The reason the moderator trashed the contribution.
  trashedReason: String

  # Number of votes.
  votesCount: Int!

  # Number of ok votes.
  votesCountOk: Int!

  # Number of mitige votes.
  votesCountMitige: Int!

  # Number of negative votes.
  votesCountNok: Int!
  connectionsCount: Int!

  # Number of arguments.
  argumentsCount: Int!

  # Number of for arguments.
  argumentsCountFor: Int!

  # Number of against arguments.
  argumentsCountAgainst: Int!

  # Number of versions.
  versionsCount: Int!

  # Number of sources.
  sourcesCount: Int!
  votes(first: Int): [PropositionVote]

  # The content of the contribution.
  id: ID!

  # Return the related contribution if the contribution is related to another.
  related: Contribution

  # The kind of contribution.
  kind: String!

  # Identifies the contribution title.
  title: String!

  # Identifies the body of the contribution.
  body: HTML!

  # Identifies the body of the contribution rendered to text.
  bodyText: String!

  # The arguments related to the contribution.
  arguments(
    # If omitted, returns all arguments. If provided, returns the arguments of this particular type.
    type: ArgumentValue
  ): [Argument]

  # The versions related to the contribution.
  versions: [Version]

  # The sources related to the contribution.
  sources: [Source]

  # Where the proposition has been placed.
  section: Section!
  reportings: [Reporting]
}

union OpinionOrVersion = Opinion | Version

# A type of opinion
type OpinionType implements Contribution, TrashableContribution, ContributionWithAuthor, EditableContribution {
  # Identifies the date and time when the object was created.
  createdAt: String!

  # Identifies the date and time when the object was last updated.
  updatedAt: String!

  # The url of contribution.
  url: String!

  # The author of the contribution.
  author: User!
  type: OpinionType!
  expired: Boolean!
  published: Boolean!
  trashed: Boolean!

  # Date of trash.
  trashedAt: String

  # Reason of trash.
  trashedReason: String

  # Number of votes.
  votesCount: Int!

  # Number of ok votes.
  votesCountOk: Int!

  # Number of mitige votes.
  votesCountMitige: Int!

  # Number of negative votes.
  votesCountNok: Int!

  # Number of arguments.
  argumentsCount: Int!

  # Number of for arguments.
  argumentsCountFor: Int!

  # Number of against arguments.
  argumentsCountAgainst: Int!

  # Number of versions.
  versionsCount: Int!

  # Number of sources.
  sourcesCount: Int!
  votes(first: Int): [PropositionVote]

  # The content of the contribution.
  id: ID!

  # Return the related contribution if the contribution is related to another.
  related: Contribution

  # The kind of contribution.
  kind: String!

  # The title of the contribution.
  title: String!

  # The content of the contribution.
  body: String!

  # The arguments related to the contribution.
  arguments(
    # If omitted, returns all arguments. If provided, returns the arguments of this particular type.
    type: ArgumentValue
  ): [Argument]

  # The versions related to the contribution.
  versions: [Version]

  # The sources related to the contribution.
  sources: [Source]

  # Where the proposition has been placed.
  section: Section!
  reportings: [Reporting]
}

# Possible directions in which to order a list of items when provided an orderBy argument.
enum OrderDirection {
  # Specifies an ascending order for a given orderBy argument.
  ASC

  # Specifies a descending order for a given orderBy argument.
  DESC
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type PropositionVote implements YesNoPairedVote, Contribution, ContributionWithAuthor {
  id: ID!

  # The related proposition.
  related: Contribution

  # The author of the contribution.
  author: User!
  value: YesNoPairedVoteValue!

  # If vote is expired, it exists but doesn't count.
  expired: Boolean!

  # Date of vote.
  createdAt: String!

  # Returns 'vote'.
  kind: String!
}

type Query {
  users(
    # Remove super admin from export.
    superAdmin: Boolean!
  ): [User]
  consultations(
    # If omitted, returns all consultations. If provided, returns the consultation of the particular id.
    id: ID
  ): [Consultation]
  votesByContribution(contribution: Int!): [PropositionVote]
  contributions(
    # Returns all contributions of the provided consultation.
    consultation: ID!
  ): [Opinion]
  contributionsBySection(
    sectionId: ID!

    # Max depth.
    limit: Int!
  ): [Opinion]
}

# A report
type Reporting implements Contribution, ContributionWithAuthor {
  # Identifies the date and time when the object was created.
  createdAt: String!

  # The author of the reporting.
  author: User!

  # Kind of report.
  type: ReportingType!

  # The content of the argument.
  id: ID!

  # The content of the argument.
  body: String!

  # Return the related contribution if the contribution is related to another.
  related: Contribution

  # Returns 'report'.
  kind: String!
}

# Type of reporting
enum ReportingType {
  SEX
  OFF
  SPAM
  ERROR
  OFF_TOPIC
}

# A section
type Section {
  # The id of the section.
  id: ID!

  # The slug of the section.
  slug: String!

  # The title of the section.
  title: String!

  # The color of the section.
  color: String!

  # The subtitle of the section.
  subtitle: String
  contributionsCount: Int!

  # Array of appendix types (possibly empty).
  appendixTypes: [SectionAppendixType]

  # Array of subsections (possibly empty).
  sections: [Section]
  voteWidgetType: Int!
  commentSystem: Int!
  contribuable: Boolean!
  versionable: Boolean!
  sourceable: Boolean!
  linkable: Boolean!

  # The url of the section.
  url: String
}

# A section
type SectionAppendixType {
  id: String
  position: Int!
  title: String
}

# A source
type Source implements Contribution, TrashableContribution, ContributionWithAuthor, EditableContribution {
  # Identifies the date and time when the object was created.
  createdAt: String!

  # Identifies the date and time when the object was last updated.
  updatedAt: String!
  expired: Boolean!
  published: Boolean!
  trashed: Boolean!

  # Date of trash.
  trashedAt: String

  # Reason of trash.
  trashedReason: String

  # The id of the source.
  id: ID!
  votesCount: Int!

  # The author of the source.
  author: User!

  # The title of the source.
  title: String!

  # The content of the source.
  body: String!

  # Return the related contribution if the contribution is related to another.
  related: Contribution

  # Returns 'source'.
  kind: String!
}

# A trashable contribution
interface TrashableContribution {
  trashed: Boolean!

  # Date of trash.
  trashedAt: String

  # Reason of trash.
  trashedReason: String
}

scalar URI

# An user
type User {
  # The id of the user.
  id: ID!
  vip: Boolean!

  # The profile picture of the user.
  media: Media

  # email.
  email: String!
  displayName: String!

  # Username of the user.
  username: String!

  # Identifies the date and time when the object was created.
  createdAt: String!

  # Updated date of the user.
  updatedAt: String

  # Last connection of the user.
  lastLogin: String

  # Is user is activated.
  enabled: Boolean!
  locked: Boolean!
  phoneConfirmed: Boolean!
  phoneConfirmationSentAt: String
  gender: String
  firstname: String
  lastname: String
  dateOfBirth: String
  userType: String
  website: String
  biography: String
  address: String
  address2: String
  zipCode: String
  city: String
  phone: String
  profileUrl: String
  googleId: String
  facebookId: String
  samlId: String
  opinionsCount: Int!
  opinionVotesCount: Int!
  opinionVersionsCount: Int!
  argumentsCount: Int!
  argumentVotesCount: Int!
  proposalsCount: Int!
  proposalVotesCount: Int!
  commentVotesCount: Int!
  sourcesCount: Int!
  repliesCount: Int!
  ideasCount: Int!
  ideaVotesCount: Int!
  ideaCommentsCount: Int!
  postCommentsCount: Int!
  eventCommentsCount: Int!
  projectsCount: Int!

  # The facultative type of the person.
  type: UserType
}

# A type of person
type UserType {
  # The name of the type.
  name: String!
}

# A version of contribution
type Version implements Contribution, TrashableContribution, ContributionWithAuthor, EditableContribution {
  # Identifies the date and time when the object was created.
  createdAt: String!

  # Identifies the date and time when the object was last updated.
  updatedAt: String!

  # The url of version.
  url: String!

  # The author of the contribution.
  author: User!
  expired: Boolean!
  published: Boolean!
  trashed: Boolean!

  # Date of trash.
  trashedAt: String

  # Reason of trash.
  trashedReason: String

  # Explenation.
  comment: String

  # Number of votes.
  votesCount: Int!

  # Number of ok votes.
  votesCountOk: Int!

  # Number of mitige votes.
  votesCountMitige: Int!

  # Number of negative votes.
  votesCountNok: Int!

  # Number of arguments.
  argumentsCount: Int!

  # Number of for arguments.
  argumentsCountFor: Int!

  # Number of against arguments.
  argumentsCountAgainst: Int!

  # Number of sources.
  sourcesCount: Int!
  votes(first: Int): [VersionVote]

  # The content of the contribution.
  id: ID!

  # Return the related contribution if the contribution is related to another.
  related: Contribution

  # Returns 'version'.
  kind: String!

  # The title of the contribution.
  title: String!

  # The content of the contribution.
  body: HTML!

  # The content of the contribution.
  bodyText: HTML!

  # The arguments related to the contribution.
  arguments(
    # If omitted, returns all arguments. If provided, returns the arguments of this particular type.
    type: ArgumentValue
  ): [Argument]

  # The sources related to the contribution.
  sources: [Source]
  reportings: [Reporting]
}

type VersionVote implements YesNoPairedVote, Contribution, ContributionWithAuthor {
  id: ID!

  # The author of the contribution.
  author: User!
  value: YesNoPairedVoteValue!

  # If vote is expired, it exists but doesn't count.
  expired: Boolean!

  # Date of vote.
  createdAt: String!

  # Return the related contribution if the contribution is related to another.
  related: Contribution

  # Returns 'vote'.
  kind: String!
}

interface YesNoPairedVote {
  id: ID!

  # The author of the contribution.
  author: User!
  value: YesNoPairedVoteValue!

  # If vote is expired, it exists but doesn't count.
  expired: Boolean!

  # Date of vote.
  createdAt: String!
}

enum YesNoPairedVoteValue {
  YES
  NO
  MITIGE
}
