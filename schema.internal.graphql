input AddArgumentInput {
  """The Argumentable ID to argue."""
  argumentableId: ID!

  """The contents of the argument body."""
  body: String!

  """The type of the argument."""
  type: ArgumentValue!
  clientMutationId: String
}

type AddArgumentPayload {
  """The newly created argument."""
  argument: Argument

  """The edge from the argumentable's arguments connection."""
  argumentEdge: ArgumentEdge

  """An unsuccessful mutation will return one or more `UserError` objects."""
  userErrors: [UserError!]!
  clientMutationId: String
}

input AddArgumentVoteInput {
  """The Node ID of the argument to vote."""
  argumentId: ID!
  clientMutationId: String
}

type AddArgumentVotePayload {
  voteEdge: ArgumentVoteEdge
  viewer: User!
  clientMutationId: String
}

input AddCommentInput {
  """The Commentable ID of the subject to comment."""
  commentableId: ID!

  """The contents of the comment."""
  body: String!
  authorName: String
  authorEmail: String
  clientMutationId: String
}

type AddCommentPayload {
  """The edge from the commentable's comment connection."""
  commentEdge: CommentEdge

  """The commentable."""
  commentable: Commentable

  """An unsuccessful mutation will return one or more `UserError` objects."""
  userErrors: [UserError!]!
  clientMutationId: String
}

input AddCommentVoteInput {
  """The Node ID of the comment to vote."""
  commentId: ID!
  clientMutationId: String
}

type AddCommentVotePayload {
  voteEdge: CommentVoteEdge
  viewer: User!
  clientMutationId: String
}

input AddContactFormInput {
  """Title of the contact form."""
  title: String!

  """Interlocutor of the contact form."""
  interlocutor: String!

  """Description of the contact form."""
  body: String

  """Email of the interlocutor of the contact form."""
  email: String!
  clientMutationId: String
}

type AddContactFormPayload {
  """The contact form created."""
  contactForm: ContactForm!
  clientMutationId: String
}

input AddEventInput {
  """The contents of the event title."""
  title: String!

  """The contents of the event body."""
  body: HTML!

  """The contents of the event startAt."""
  startAt: DateTime!

  """The contents of the event endAt."""
  endAt: DateTime

  """Whether or not this event is published."""
  enabled: Boolean = true

  """Media to join to the event"""
  media: ID

  """The metadescription of the event page."""
  metaDescription: String

  """Whether or not this event is commentable."""
  commentable: Boolean

  """The contents of the event link."""
  link: String

  """deprecated Use `addressJson` instead"""
  address: String

  """deprecated Use `addressJson` instead"""
  city: String

  """deprecated Use `addressJson` instead"""
  zipCode: String

  """deprecated Use `addressJson` instead"""
  country: String

  """The contents of the event addressJson."""
  addressJson: String

  """The contents of the event customCode."""
  customCode: String

  """The list of projects associated to this event."""
  projects: [ID]

  """The list of themes associated to this event."""
  themes: [ID]

  """Allow registration for the event"""
  guestListEnabled: Boolean! = false
  clientMutationId: String
}

type AddEventPayload {
  """The edge from the events connection."""
  eventEdge: EventEdge

  """An unsuccessful mutation will return one or more `UserError` objects."""
  userErrors: [UserError!]!
  clientMutationId: String
}

input AddEventsInput {
  """A list of events input to import."""
  events: [EventInput!]!

  """
  This option is useful if you want to test your import. Set it to true if you want to import definitively.
  """
  dryRun: Boolean!
  clientMutationId: String
}

type AddEventsPayload {
  """List of imported events."""
  importedEvents: [Event!]!

  """List of emails that didn't match an existing user."""
  notFoundEmails: [Email]!

  """List of themes ID that didn't match an existing themes."""
  notFoundThemes: [ID]!

  """List of dates that didn't got the good format"""
  brokenDates: [String]!
  clientMutationId: String
}

input AddOpinionVoteInput {
  """The Node ID of the opinion/version to vote."""
  opinionId: ID!

  """The vote value."""
  value: YesNoPairedVoteValue!
  clientMutationId: String
}

type AddOpinionVotePayload {
  vote: YesNoPairedVote
  voteEdge: YesNoPairedVoteEdge
  viewer: User!
  previousVoteId: ID
  clientMutationId: String
}

input AddProposalVoteInput {
  """The Node ID of the proposal to vote."""
  proposalId: ID!

  """The Node ID of the step."""
  stepId: ID!

  """The vote will be anonymous."""
  anonymously: Boolean = false
  clientMutationId: String
}

type AddProposalVotePayload {
  vote: ProposalVote!
  viewer: User!
  voteEdge: ProposalVoteEdge!
  clientMutationId: String
}

input AddReplyInput {
  """The id of the questionnaire"""
  questionnaireId: ID!

  """The responses to the questionnaire questions"""
  responses: [ResponseInput]

  """Anonymous or not."""
  private: Boolean

  """If true will create a draft reply."""
  draft: Boolean! = false
  clientMutationId: String
}

type AddReplyPayload {
  reply: Reply
  questionnaire: Questionnaire
  clientMutationId: String
}

input AddSourceInput {
  """The Sourceable ID to source."""
  sourceableId: ID!

  """The contents of the source body."""
  body: String!

  """The category of the source."""
  category: ID!
  link: URI!
  title: String!
  clientMutationId: String
}

type AddSourcePayload {
  """The newly created source."""
  source: Source

  """The edge from the sourceable's sources connection."""
  sourceEdge: SourceEdge

  """An unsuccessful mutation will return one or more `UserError` objects."""
  userErrors: [UserError!]!
  clientMutationId: String
}

input AddSourceVoteInput {
  """The Node ID of the source to vote."""
  sourceId: ID!
  clientMutationId: String
}

type AddSourceVotePayload {
  voteEdge: SourceVoteEdge
  viewer: User!
  clientMutationId: String
}

input AddUsersInGroupInput {
  """Users that will be added to the group."""
  users: [ID!]!

  """The concerned group id."""
  groupId: ID!
  clientMutationId: String
}

type AddUsersInGroupPayload {
  group: Group!
  clientMutationId: String
}

input AddUsersToGroupFromEmailInput {
  """A list of email(s)."""
  emails: [Email!]!

  """
  This option is useful if you want to test your emails list. Set it to true if you want to import definitively.
  """
  dryRun: Boolean!

  """The Node ID of the group."""
  groupId: ID!
  clientMutationId: String
}

type AddUsersToGroupFromEmailPayload {
  """List of imported users."""
  importedUsers: [User]!

  """List of emails that didn't match an existing user."""
  notFoundEmails: [Email]!

  """
  If an email from your list is already associated to a user who is in the chosen group, it will be in this field.
  """
  alreadyImportedUsers: [User]!
  clientMutationId: String
}

input AddVersionInput {
  """The concerned opinion id."""
  opinionId: ID!
  title: String!
  body: String!
  comment: String
  clientMutationId: String
}

type AddVersionPayload {
  version: Version
  versionEdge: VersionEdge

  """An unsuccessful mutation will return one or more `UserError` objects."""
  userErrors: [UserError]
  clientMutationId: String
}

"""A contribution"""
type Answer {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Identifies the contribution title."""
  title: String

  """Identifies the body of the contribution."""
  body: HTML
  author: User
}

union AnswerOrPost = Answer | Post

"""A contribution"""
type Appendix {
  """Identifies the body of the contribution."""
  body: HTML

  """Identifies the body of the contribution rendered to text."""
  bodyText: String
  appendixType: AppendixType!
}

"""An AppendixType"""
type AppendixType {
  title: String!
}

"""An argument"""
type Argument implements Node & Publishable & Contribution & Reportable & Trashable & ContributionWithAuthor & EditableContribution & UniformResourceLocatable {
  """The ID of an object"""
  id: ID!

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason

  """The kind of contribution (argument)."""
  kind: String!

  """
  Return the related contribution if the contribution is related to another.
  """
  related: Contribution

  """The URL to this resource."""
  url: URI!

  """Does the viewer already submitted a report ?"""
  viewerHasReport: Boolean!

  """The reportings related to the reportable."""
  reportings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
    orderBy: ReportingOrder = {field: CREATED_AT, direction: DESC}
  ): ReportingConnection!

  """Whether or not the contribution is trashed."""
  trashed: Boolean!

  """Identifies the trashed visibility."""
  trashedStatus: TrashableStatus

  """Identifies the moment the moderator trashed the contribution."""
  trashedAt: DateTime

  """Identifies the reason why the moderator trashed the contribution."""
  trashedReason: String

  """The author of the contribution."""
  author: User!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """The type."""
  type: ArgumentValue!
  votes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): ArgumentVoteConnection!

  """The content of the argument."""
  body: String!
  viewerHasVote: Boolean!
  viewerVote: ArgumentVote
  contribuable: Boolean!
  step: ConsultationStep!
}

"""A connection to a list of items."""
type ArgumentConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ArgumentEdge]
}

"""An edge in a connection."""
type ArgumentEdge {
  """The item at the end of the edge."""
  node: Argument

  """A cursor for use in pagination."""
  cursor: String!
}

"""Ways in which argument connections can be ordered."""
input ArgumentOrder {
  """The field in which to order nodes by."""
  field: ArgumentOrderField!

  """The direction in which to order nodes."""
  direction: OrderDirection! = ASC
}

"""Properties by which argument connections can be ordered"""
enum ArgumentOrderField {
  """Allows ordering a list of arguments by when they were published."""
  PUBLISHED_AT

  """Allows ordering a list of arguments by the number of votes it have."""
  VOTES
}

"""Value of an argument"""
enum ArgumentValue {
  """AGAINST argument"""
  AGAINST

  """FOR argument"""
  FOR
}

"""Entities that can be published."""
type ArgumentVote implements Vote & Publishable {
  """The ID of an object"""
  id: ID!

  """The date of the vote."""
  createdAt: DateTime!

  """The author of the contribution."""
  author: User

  """
  Return the related contribution if the contribution is related to another.
  """
  related: Argument

  """Returns Type of vote"""
  kind: String!

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason
}

"""A connection to a list of items."""
type ArgumentVoteConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ArgumentVoteEdge]
}

"""An edge in a connection."""
type ArgumentVoteEdge {
  """The item at the end of the edge."""
  node: ArgumentVote

  """A cursor for use in pagination."""
  cursor: String!
}

"""An argumentable"""
interface Argumentable {
  """The ID of an object"""
  id: ID!
  contribuable: Boolean!

  """The arguments related to the argumentable."""
  arguments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
    orderBy: ArgumentOrder = {field: PUBLISHED_AT, direction: DESC}

    """If provided, returns the arguments of this particular type."""
    type: ArgumentValue

    """The connection will return the trashed results too."""
    includeTrashed: Boolean = false
  ): ArgumentConnection!

  """The unpublished arguments of to the viewer."""
  viewerArgumentsUnpublished(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int

    """If provided, returns the arguments of this particular type."""
    type: ArgumentValue
  ): ArgumentConnection
}

input BackgroundStyleInput {
  enabled: Boolean
  color: Color
  opacity: Float
}

input BorderStyleInput {
  enabled: Boolean
  color: Color
  opacity: Float
  size: Int
}

"""Ordering options for categories returned from the connection."""
enum CategoryOrderField {
  """Allows ordering a list of categories in an alphabetical order."""
  ALPHABETICAL
}

input ChangeArgumentInput {
  """The argument Node id."""
  argumentId: ID!

  """The contents of the argument body."""
  body: String!
  clientMutationId: String
}

type ChangeArgumentPayload {
  argument: Argument!
  clientMutationId: String
}

input ChangeCollectStatusInput {
  statusId: ID

  """The proposal id"""
  proposalId: ID!
  clientMutationId: String
}

type ChangeCollectStatusPayload {
  proposal: Proposal!
  clientMutationId: String
}

input ChangeDistrictInput {
  """The district id"""
  districtId: ID!
  geojson: GeoJSON
  displayedOnMap: Boolean
  name: String
  clientMutationId: String
}

type ChangeDistrictPayload {
  district: ProposalDistrict!
  clientMutationId: String
}

input ChangeEventInput {
  """The contents of the event title."""
  title: String!

  """The contents of the event body."""
  body: HTML!

  """The contents of the event startAt."""
  startAt: DateTime!

  """The contents of the event endAt."""
  endAt: DateTime

  """Whether or not this event is published."""
  enabled: Boolean = true

  """Media to join to the event"""
  media: ID

  """The metadescription of the event page."""
  metaDescription: String

  """Whether or not this event is commentable."""
  commentable: Boolean

  """The contents of the event link."""
  link: String

  """deprecated Use `addressJson` instead"""
  address: String

  """deprecated Use `addressJson` instead"""
  city: String

  """deprecated Use `addressJson` instead"""
  zipCode: String

  """deprecated Use `addressJson` instead"""
  country: String

  """The contents of the event addressJson."""
  addressJson: String

  """The contents of the event customCode."""
  customCode: String

  """The list of projects associated to this event."""
  projects: [ID]

  """The list of themes associated to this event."""
  themes: [ID]

  """Allow registration for the event"""
  guestListEnabled: Boolean! = false
  clientMutationId: String

  """The id of the event to update."""
  id: ID!
}

type ChangeEventPayload {
  """The edge from the events connection."""
  event: Event

  """An unsuccessful mutation will return one or more `UserError` objects."""
  userErrors: [UserError!]!
  clientMutationId: String
}

input ChangeMapProviderTokenInput {
  """The name of the provider the new token will be set"""
  provider: MapTokenProvider!

  """The new public token"""
  publicToken: String

  """The new secret token"""
  secretToken: String
  clientMutationId: String
}

type ChangeMapProviderTokenPayload {
  """The newly map token"""
  mapToken: MapToken
  clientMutationId: String
}

input ChangeMapStyleInput {
  """The ID of the map token to modify the style"""
  mapTokenId: ID!

  """The new style owner"""
  styleOwner: String!

  """The new style ID"""
  styleId: ID!
  clientMutationId: String
}

type ChangeMapStylePayload {
  """The newly map token"""
  mapToken: MapToken
  clientMutationId: String
}

input ChangeProposalContentInput {
  """The proposal id"""
  id: ID!

  """
  Pass 'true' to keep your proposal in draft state, otherwise we admit that you want to publish it.
  """
  draft: Boolean

  """The new proposal title"""
  title: String

  """The new proposal body"""
  body: HTML

  """The new proposal summary"""
  summary: String

  """The author id (ROLE_SUPER_ADMIN allowed only)"""
  author: ID

  """The theme id (feature themes enabled)"""
  theme: String

  """The category id"""
  category: String

  """The district id (feature districts enabled)"""
  district: String

  """The address geocoded by google"""
  address: String

  """The custom fields responses"""
  responses: [ResponseInput]

  """Current media id"""
  media: ID
  clientMutationId: String
}

type ChangeProposalContentPayload {
  proposal: Proposal!
  clientMutationId: String
}

input ChangeProposalEvaluationInput {
  """The proposal id"""
  proposalId: ID!

  """The revision number of the evaluation"""
  version: Int!
  responses: [ResponseInput!]!
  clientMutationId: String
}

type ChangeProposalEvaluationPayload {
  proposal: Proposal!
  clientMutationId: String
}

input ChangeProposalEvaluersInput {
  """The proposal id"""
  proposalId: ID!
  evaluers: [ID!]
  clientMutationId: String
}

type ChangeProposalEvaluersPayload {
  proposal: Proposal!
  clientMutationId: String
}

input ChangeProposalNotationInput {
  """The proposal id"""
  proposalId: ID!
  estimation: Int
  likers: [ID!]
  clientMutationId: String
}

type ChangeProposalNotationPayload {
  proposal: Proposal!
  clientMutationId: String
}

input ChangeProposalProgressStepsInput {
  progressSteps: [ProgressStepInput!]!
  proposalId: String!
  clientMutationId: String
}

type ChangeProposalProgressStepsPayload {
  proposal: Proposal!
  clientMutationId: String
}

input ChangeProposalPublicationStatusInput {
  """The new publication status"""
  publicationStatus: ProposalPublicationStatus!

  """Added if you set publicationStatus to TRASHED"""
  trashedReason: String

  """The proposal id"""
  proposalId: ID!
  clientMutationId: String
}

type ChangeProposalPublicationStatusPayload {
  proposal: Proposal!
  clientMutationId: String
}

input ChangeSelectionStatusInput {
  stepId: ID!
  proposalId: ID!
  statusId: ID
  clientMutationId: String
}

type ChangeSelectionStatusPayload {
  proposal: Proposal!
  clientMutationId: String
}

input ChangeSourceInput {
  """The source id."""
  sourceId: ID!

  """The contents of the source body."""
  body: String

  """The contents of the source category."""
  category: ID

  """The contents of the source title."""
  title: String

  """The contents of the source link."""
  link: URI
  clientMutationId: String
}

type ChangeSourcePayload {
  source: Source
  clientMutationId: String
}

input ChangeUserNotificationsConfigurationInput {
  """The new proposal comment notification value"""
  onProposalCommentMail: Boolean!

  """The new external consent for communication"""
  consentExternalCommunication: Boolean!

  """The new internal consent for communication"""
  consentInternalCommunication: Boolean!
  clientMutationId: String
}

type ChangeUserNotificationsConfigurationPayload {
  user: User!
  clientMutationId: String
}

input ChangeVersionInput {
  """The version Node id."""
  versionId: ID!

  """Updated version body."""
  body: String

  """Updated version title."""
  title: String

  """Updated version comment."""
  comment: String
  clientMutationId: String
}

type ChangeVersionPayload {
  version: Version
  clientMutationId: String
}

"""Requires the viewer to check a box"""
type CheckboxRequirement implements Node & Requirement {
  """The ID of an object"""
  id: ID!

  """Does the viewer meets the requirement ?"""
  viewerMeetsTheRequirement: Boolean!

  """The condition set by the requirement."""
  label: String!
}

"""A proposal step"""
type CollectStep implements Node & Step & ProposalStep & RequirementStep {
  """The ID of an object."""
  id: ID!

  """When the time interval begins or ends."""
  timeRange: TimeRange!

  """The URL to this resource."""
  url: URI!

  """The title of the step."""
  title: String!

  """The kind of the step"""
  kind: String!

  """The status of the step"""
  status: StepStatus

  """The type of the step"""
  type: String

  """Does the step have a end date ?"""
  timeless: Boolean

  """The introduction text of the step."""
  body: HTML

  """A list of proposals associated to the object."""
  proposals(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int

    """
    If non-null, filters proposals with the given trashed status (eg: visible, not visible).
    """
    trashedStatus: ProposalTrashedStatus = NOT_TRASHED

    """
    ID of a User to filter by. If non-null, only proposals authored by this user will be returned.
    """
    author: ID

    """Ordering options for proposals returned from the connection."""
    orderBy: ProposalOrder = {field: PUBLISHED_AT, direction: ASC}

    """
    ID of a ProposalDistrict to filter by. If non-null, filters proposals with the given district.
    """
    district: ID

    """
    ID of a UserType to filter by. If non-null, filters proposals with the given type of author.
    """
    userType: ID

    """
    ID of a ProposalCategory to filter by. If non-null, filters proposals with the given category.
    """
    category: ID

    """
    ID of a ProposalStatus to filter by. If non-null, filters proposals with the given status.
    """
    status: ID

    """
    ID of a Theme to filter by. If non-null, filters proposals with the given theme.
    """
    theme: ID

    """If non-null, filters proposals with the given string to look for."""
    term: String

    """Affiliation options for proposals returned from the connection."""
    affiliations: [ProposalAffiliation]

    """(ROLE_SUPER_ADMIN only) Select also unpublished proposals."""
    includeUnpublished: Boolean = false

    """Select also draft proposals"""
    includeDraft: Boolean = false
  ): ProposalConnection!

  """The viewer unpublished proposals (only visible by viewer)."""
  viewerProposalsUnpublished(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): ProposalConnection

  """The requirements to vote on this step."""
  requirements(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): RequirementConnection!
  project: Project
  votesLimit: Int
  budget: Int
  voteType: ProposalStepVoteType!
  votable: Boolean!
  votesHelpText: String
  voteThreshold: Int
  statuses: [Status!]!
  defaultSort: String
  open: Boolean!

  """If enabled, allow voters to order their votes by preferences."""
  votesRanking: Boolean!

  """A list of viewer votes associated with the step."""
  viewerVotes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
    orderBy: ProposalVotesOrder = {direction: DESC}
  ): ProposalVoteConnection!
  form: ProposalForm!
  private: Boolean!

  """A list of contributor associated with the step."""
  contributors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): UserConnection!
  viewerProposalDrafts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): ProposalConnection!
}

"""A color on hexadecimal format (#DDDDDD)."""
scalar Color

"""A comment"""
type Comment implements Node & Publishable & Reportable & Contribution & Commentable & UniformResourceLocatable {
  """The ID of an object"""
  id: ID!

  """Whether or not the contribution is trashed."""
  trashed: Boolean!

  """Identifies the trashed visibility."""
  trashedStatus: TrashableStatus

  """Identifies the moment the moderator trashed the contribution."""
  trashedAt: DateTime

  """Identifies the reason why the moderator trashed the contribution."""
  trashedReason: String

  """Does the viewer already submitted a report ?"""
  viewerHasReport: Boolean!

  """The reportings related to the reportable."""
  reportings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
    orderBy: ReportingOrder = {field: CREATED_AT, direction: DESC}
  ): ReportingConnection!

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason

  """The kind of contribution."""
  kind: String!

  """
  Return the related contribution if the contribution is related to another.
  """
  related: Contribution

  """The URL to this resource."""
  url: URI!

  """The comments related to the commentable."""
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
    orderBy: CommentOrder = {field: PUBLISHED_AT, direction: DESC}
  ): CommentConnection!

  """Expose Primary Key, do not use it, except for testing purpose."""
  _id: ID!
  body: String!
  createdAt: DateTime!
  updatedAt: DateTime
  author: User
  parent: Comment
  pinned: Boolean!
  contribuable: Boolean!
  answers: [Comment!]!
  authorName: String
  authorEmail: String
  authorIp: IP
  publicationStatus: CommentPublicationStatus!
  votes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
    orderBy: VoteOrder = {field: PUBLISHED_AT, direction: DESC}
  ): CommentVoteConnection!
  viewerHasVote: Boolean!
  viewerVote: CommentVote
  editUrl: URI
  commentable: Commentable
}

"""A connection to a list of items."""
type CommentConnection {
  totalCount: Int!
  totalCountWithAnswers: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [CommentEdge]
}

"""An edge in a connection."""
type CommentEdge {
  """The item at the end of the edge."""
  node: Comment!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Ways in which lists of comments can be ordered upon return."""
input CommentOrder {
  """The field in which to order nodes by."""
  field: CommentOrderField! = PUBLISHED_AT

  """The direction in which to order nodes."""
  direction: OrderDirection! = DESC
}

"""Ordering options for comments returned from the connection."""
enum CommentOrderField {
  """Allows ordering a list of comments by when they were published."""
  PUBLISHED_AT

  """Allows ordering a list of comments by when they were updated."""
  UPDATED_AT

  """Allows ordering a list of comments by there likes."""
  POPULARITY
}

"""Available statuses"""
enum CommentPublicationStatus {
  """Visible by author only."""
  UNPUBLISHED

  """Normal status, Publicly visible"""
  PUBLISHED

  """Publicly visible in the trash bin"""
  TRASHED

  """In the trash bin, content not visible"""
  TRASHED_NOT_VISIBLE
}

"""Entities that can be published."""
type CommentVote implements Node & Vote & Publishable {
  """The ID of an object"""
  id: ID!

  """The date of the vote."""
  createdAt: DateTime!

  """The author of the contribution."""
  author: User

  """The contribution that was voted."""
  related: Contribution

  """Returns 'commentVote'."""
  kind: String!

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason
  contribution: Comment!
}

"""A connection to a list of items."""
type CommentVoteConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [CommentVoteEdge]
}

"""An edge in a connection."""
type CommentVoteEdge {
  """The item at the end of the edge."""
  node: CommentVote!

  """A cursor for use in pagination."""
  cursor: String!
}

"""A commentable"""
interface Commentable {
  """The ID of an object"""
  id: ID!

  """The comments related to the commentable."""
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
    orderBy: CommentOrder = {field: PUBLISHED_AT, direction: DESC}
  ): CommentConnection!
}

"""A consultation"""
type Consultation implements Node {
  """Expose Primary Key, do not use it, except for testing purpose."""
  _id: ID!

  """The ID of an object."""
  id: ID!

  """The title of the consultation."""
  title: String!

  """A list of contributor associated with the consultation."""
  contributors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): UserConnection!

  """
  Whether the user has vote for a contribution in the related step of this consultation.
  """
  userHasVote(
    """The user's login (for example, an email)."""
    login: String!
  ): Boolean!

  """The number of votes in the related step of this consultation."""
  votesCount: Int @deprecated(reason: "Field `votesCount` will be removed. Use `votes.totalCount` instead. In preparation for an upcoming change to the way we expose counters, this field will only be available inside a connection. Removal on 2019-09-01 UTC.")

  """List of sections."""
  sections: [Section]
  viewerOpinionsUnpublished(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): OpinionConnection

  """Contributions are allowed right now."""
  contribuable: Boolean!
  opinionCountShownBySection: Int
  titleHelpText: String
  descriptionHelpText: String

  """The associated consultation step in which belongs this consultation"""
  step: ConsultationStep!
  contributionConnection(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int

    """Ordering options for contributions returned from the connection."""
    orderBy: ContributionOrder = {field: POSITION, direction: DESC}

    """The connection will return the trashed results too."""
    includeTrashed: Boolean = false
  ): ContributionConnection @deprecated(reason: "Field `contributionConnection` will be removed. Use `contributions` instead. This field use a deprecated name. Removal on 2019-09-01 UTC.")
  contributions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int

    """Ordering options for contributions returned from the connection."""
    orderBy: ContributionOrder = {field: POSITION, direction: DESC}

    """The connection will return the trashed results too."""
    includeTrashed: Boolean = false
  ): ContributionConnection
}

"""A connection to a list of items."""
type ConsultationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ConsultationEdge]
}

"""An edge in a connection."""
type ConsultationEdge {
  """The item at the end of the edge."""
  node: Consultation!

  """A cursor for use in pagination."""
  cursor: String!
}

"""A consultation step"""
type ConsultationStep implements Node & Step & RequirementStep {
  """Expose Primary Key, do not use it, except for testing purpose."""
  _id: ID!

  """The ID of an object."""
  id: ID!

  """The requirements to vote on this step."""
  requirements(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): RequirementConnection!

  """When the time interval begins or ends."""
  timeRange: TimeRange!

  """The URL to this resource."""
  url: URI!

  """The title of the step."""
  title: String!

  """The type of step. Returns "consultation"."""
  kind: String!

  """The status of the step"""
  status: StepStatus

  """The type of the step"""
  type: String

  """Does the step have a end date ?"""
  timeless: Boolean

  """The introduction text of the step."""
  body: HTML

  """A list of contributor associated with the consultation step."""
  contributors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): UserConnection!

  """The number of votes in this consultation."""
  votesCount: Int @deprecated(reason: "Field `votesCount` will be removed. Use `votes.totalCount` instead. In preparation for an upcoming change to the way we expose counters, this field will only be available inside a connection. Removal on 2019-09-01 UTC.")

  """
  Whether the user has vote for a contribution in this consultation step.
  """
  userHasVote(
    """The user's login (for example, an email)."""
    login: String!
  ): Boolean!

  """The project"""
  project: Project!

  """Contributions are allowed right now."""
  contribuable: Boolean!

  """Get the associated consultations of this consultation step"""
  consultations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): ConsultationConnection!
  contributionConnection(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int

    """Ordering options for contributions returned from the connection."""
    orderBy: ContributionOrder = {field: POSITION, direction: DESC}

    """The connection will return the trashed results too."""
    includeTrashed: Boolean = false
  ): ContributionConnection @deprecated(reason: "Field `contributionConnection` will be removed. Use `contributions` instead. This field use a deprecated name. Removal on 2019-09-01 UTC.")
  contributions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int

    """Ordering options for contributions returned from the connection."""
    orderBy: ContributionOrder = {field: POSITION, direction: DESC}

    """The connection will return the trashed results too."""
    includeTrashed: Boolean = false
  ): ContributionConnection
}

"""Fetches an object given its ID"""
type ContactForm implements Node {
  """The title of the contact Form"""
  id: ID!

  """The title of the contact Form"""
  title: String!

  """The interlocutor of the contact Form"""
  interlocutor: String!

  """The body of the contact Form"""
  body: String!

  """The mail to send the contact Form"""
  email: String!
}

"""A contribution with an author"""
interface Contribution {
  """The ID of an object"""
  id: ID!

  """The kind of contribution."""
  kind: String!

  """
  Return the related contribution if the contribution is related to another.
  """
  related: Contribution

  """Url of the contribution"""
  url: URI!
}

"""A connection to a list of items."""
type ContributionConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ContributionEdge]
}

"""An edge in a connection."""
type ContributionEdge {
  """The item at the end of the edge."""
  node: Contribution!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Ways in which lists of contributions can be ordered upon return."""
input ContributionOrder {
  field: ContributionOrderField! = POSITION
  direction: OrderDirection! = DESC
}

"""Ordering options for contributions connections."""
enum ContributionOrderField {
  """Allows ordering a list of contributions by there number of comments."""
  COMMENT_COUNT

  """Allows ordering a list of contributions by there number of votes ok."""
  POPULAR

  """Allows ordering a list of contributions by there position."""
  POSITION

  """Allows ordering a list of contributions by when they were published."""
  PUBLISHED_AT

  """Allows ordering a list of contributions randomly."""
  RANDOM

  """Allows ordering a list of contributions by there number of votes."""
  VOTE_COUNT
}

"""Different contribution type"""
enum ContributionType {
  """Get contributions that are an opnion"""
  OPINION

  """Get contributions that are an opnion version"""
  OPINIONVERSION

  """Get contributions that are a comment"""
  COMMENT

  """Get contributions that are an argument"""
  ARGUMENT

  """Get contributions that are a source"""
  SOURCE

  """Get contributions that are a proposal"""
  PROPOSAL

  """Get contributions that are a reply"""
  REPLY
}

"""A contribution with an author"""
interface ContributionWithAuthor {
  """The author of the contribution."""
  author: User!
}

input CreateGroupInput {
  """The title of the group"""
  title: String!

  """The description of the group"""
  description: String
  clientMutationId: String
}

type CreateGroupPayload {
  group: Group!
  clientMutationId: String
}

input CreateProjectDistrictInput {
  name: String!
  geojson: GeoJSON
  displayedOnMap: Boolean = false
  border: BorderStyleInput
  background: BackgroundStyleInput
}

type CreateProjectDistrictPayload {
  district: ProjectDistrict

  """The edge from the project district connection."""
  districtEdge: ProjectDistrictEdge

  """An unsuccessful mutation will return one or more `UserError` objects."""
  userErrors: [UserError!]!
  clientMutationId: String
}

input CreateProjectInput {
  """The project's title"""
  title: String!

  """The project's authors, accept IDs of User"""
  authors: [ID!]!

  """The project's opinion term"""
  opinionTerm: Int!

  """The project's type"""
  projectType: String
  clientMutationId: String
}

type CreateProjectPayload {
  """The created project"""
  project: Project
  clientMutationId: String
}

input CreateProposalFormInput {
  """The proposal form title"""
  title: String!
  clientMutationId: String
}

type CreateProposalFormPayload {
  proposalForm: ProposalForm!
  clientMutationId: String
}

input CreateProposalFusionInput {
  """Proposal ids from which the fusion is created"""
  fromProposals: [ID!]!
  clientMutationId: String
}

type CreateProposalFusionPayload {
  proposal: Proposal
  clientMutationId: String
}

input CreateProposalInput {
  """The id of the form form proposal"""
  proposalFormId: ID!

  """If true will create a draft proposal, otherwise a published proposal."""
  draft: Boolean

  """The proposal title"""
  title: String

  """The proposal body"""
  body: HTML

  """The proposal summary"""
  summary: String

  """The theme id (feature themes must be enabled)"""
  theme: ID

  """The category id"""
  category: ID

  """The district id (feature districts must be enabled)"""
  district: ID

  """The address geocoded by google"""
  address: String

  """The responses to the form questions"""
  responses: [ResponseInput]

  """The media id to illustrate"""
  media: ID
  clientMutationId: String
}

type CreateProposalPayload {
  """The created proposal, if everything goes well !"""
  proposal: Proposal

  """An unsuccessful mutation will return one or more `UserError` objects."""
  userErrors: [UserError!]
  clientMutationId: String
}

input CreateQuestionnaireInput {
  """The questionnaire form title"""
  title: String!

  """The questionnaire type"""
  type: QuestionnaireType! = QUESTIONNAIRE
  clientMutationId: String
}

type CreateQuestionnairePayload {
  questionnaire: Questionnaire
  clientMutationId: String
}

input CreateUserInput {
  """The user's username"""
  username: String!

  """The user's email"""
  email: String!

  """The user's password"""
  plainPassword: String

  """Unattended roles as array."""
  roles: [UserRole]
  locked: Boolean
  vip: Boolean
  enabled: Boolean
  clientMutationId: String
}

type CreateUserPayload {
  """The created user, if everything goes well !"""
  user: User
  clientMutationId: String
}

"""A string containing CSS."""
scalar CssJSON

"""Require a date of birth"""
type DateOfBirthRequirement implements Node & Requirement {
  """The ID of an object"""
  id: ID!

  """Does the viewer meets the requirement ?"""
  viewerMeetsTheRequirement: Boolean!

  """The date of birth of the viewer."""
  viewerDateOfBirth: DateTime
}

"""A string containing a datetime."""
scalar DateTime

input DeleteAccountInput {
  """You must chose a strategy to delete your account"""
  type: DeleteAccountType!

  """(ROLE_SUPER_ADMIN only) The user to delete"""
  userId: ID
  clientMutationId: String
}

type DeleteAccountPayload {
  """user id"""
  userId: ID!
  clientMutationId: String
}

"""Differents strategies to delete an account"""
enum DeleteAccountType {
  """Anonymize the user and delete his content only on active steps"""
  SOFT

  """Anonymize the user and delete his content"""
  HARD
}

input DeleteArgumentInput {
  argumentId: ID!
  clientMutationId: String
}

type DeleteArgumentPayload {
  deletedArgumentId: ID
  argumentable: Argumentable!
  clientMutationId: String
}

input DeleteCommentInput {
  """The ID of the comment to delete."""
  id: ID!
  clientMutationId: String
}

type DeleteCommentPayload {
  deletedCommentId: ID
  commentable: Commentable

  """An unsuccessful mutation will return one or more `UserError` objects."""
  userErrors: [UserError]
  clientMutationId: String
}

input DeleteEventInput {
  """The ID of the event"""
  eventId: ID!
  clientMutationId: String
}

type DeleteEventPayload {
  deletedEventId: ID
  clientMutationId: String
}

input DeleteGroupInput {
  """The group id"""
  groupId: ID!
  clientMutationId: String
}

type DeleteGroupPayload {
  deletedGroupTitle: String!
  clientMutationId: String
}

input DeleteOpinionInput {
  """The opinion id"""
  opinionId: ID!
  clientMutationId: String
}

type DeleteOpinionPayload {
  """The deleted ID."""
  deletedOpinionId: ID
  clientMutationId: String
}

input DeleteProjectDistrictInput {
  id: ID!
}

type DeleteProjectDistrictPayload {
  deletedDistrictId: ID

  """An unsuccessful mutation will return one or more `UserError` objects."""
  userErrors: [UserError!]!
  clientMutationId: String
}

input DeleteProposalInput {
  """The proposal id"""
  proposalId: ID!
  clientMutationId: String
}

type DeleteProposalPayload {
  proposal: Proposal!
  step: CollectStep!
  clientMutationId: String
}

input DeleteReplyInput {
  """The id of the reply"""
  id: ID!
  clientMutationId: String
}

type DeleteReplyPayload {
  questionnaire: Questionnaire!
  clientMutationId: String
}

input DeleteSourceInput {
  """The ID to delete."""
  sourceId: ID!
  clientMutationId: String
}

type DeleteSourcePayload {
  """The deleted ID."""
  deletedSourceId: ID

  """The parent of the deleted source."""
  sourceable: Sourceable
  clientMutationId: String
}

input DeleteUserInGroupInput {
  """The user id"""
  userId: ID!

  """The group id"""
  groupId: ID!
  clientMutationId: String
}

type DeleteUserInGroupPayload {
  group: Group!
  clientMutationId: String
}

input DeleteVersionInput {
  """The version id"""
  versionId: ID!
  clientMutationId: String
}

type DeleteVersionPayload {
  """The deleted ID."""
  deletedVersionId: ID

  """The parent of the deleted `Version`."""
  opinion: Opinion
  clientMutationId: String
}

"""A district"""
interface District {
  id: ID!
  name: String!
  geojson: GeoJSON
  geojsonStyle: CssJSON
  displayedOnMap: Boolean!
  border: Style
  background: Style
}

input DistrictInput {
  id: ID
  name: String!
  geojson: GeoJSON
  displayedOnMap: Boolean = false
  border: BorderStyleInput
  background: BackgroundStyleInput
}

"""Ordering options for districts returned from the connection."""
enum DistrictOrderField {
  """Allows ordering a list of districts in an alphabetical order."""
  ALPHABETICAL

  """Allows ordering a list of districts by when they were created."""
  CREATED_AT
}

"""Entities that can be drafted."""
interface Draftable {
  """The ID of an object"""
  id: ID!

  """Is the object a draft."""
  draft: Boolean!
}

"""A contribution with an author"""
interface EditableContribution {
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime
}

"""A string containing an email."""
scalar Email

"""Fetches an object given its ID"""
type EmailDomain implements Node {
  """The ID of an object"""
  id: ID!

  """The email domain value"""
  value: String!

  """The associated registration form for this email domain"""
  registrationForm: RegistrationForm
}

"""A Evaluation form (question)"""
type EvaluationForm {
  """The ID of an object"""
  id: ID!

  """The title of evaluation form (question)"""
  title: String!

  """The description of evaluation form"""
  description: String

  """List of questions in the evaluation form"""
  questions: [Question!]!
}

"""An event."""
type Event implements Node & UniformResourceLocatable & Commentable {
  """The ID of an object."""
  id: ID!

  """The URL to this resource."""
  url: URI!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """When the time interval begins or ends."""
  timeRange: TimeRange!

  """Identifies the author of the event."""
  author: User

  """Identifies the title of the event."""
  title: String!

  """The start date of the event."""
  startAt: DateTime! @deprecated(reason: "Field `startAt` will be removed. Use `timeRange` instead. This field has been replaced by timeRange Removal on 2020-03-01 UTC.")

  """The end date of the event."""
  endAt: DateTime @deprecated(reason: "Field `endAt` will be removed. Use `timeRange` instead. This field has been replaced by timeRange Removal on 2020-03-01 UTC.")

  """Identifies the body of the event."""
  body: HTML!

  """Whether or not this event is published."""
  enabled: Boolean!

  """Identifies the latitude of the event."""
  lat: Float @deprecated(reason: "Field `lat` will be removed.  This field use a deprecated name. Removal on 2019-09-01 UTC.")

  """Identifies the longitude of the event."""
  lng: Float @deprecated(reason: "Field `lng` will be removed.  This field use a deprecated name. Removal on 2019-09-01 UTC.")

  """Identifies the registration link of the event."""
  link: URI @deprecated(reason: "Field `link` will be removed.  This field use a deprecated name. Removal on 2019-09-01 UTC.")

  """Identifies the zip code of the event."""
  zipCode: String @deprecated(reason: "Field `zipCode` will be removed.  This field use a deprecated name. Removal on 2019-09-01 UTC.")

  """Identifies the address of the event."""
  fullAddress: String @deprecated(reason: "Field `fullAddress` will be removed.  This field use a deprecated name. Removal on 2019-09-01 UTC.")

  """The comments related to the commentable."""
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
    orderBy: CommentOrder = {field: PUBLISHED_AT, direction: DESC}
  ): CommentConnection!

  """Expose Primary Key, do not use it, except for testing purpose."""
  _id: ID!

  """A list of Users that are participating to the event."""
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): ParticipantConnection!
  themes: [Theme!]!
  projects: [Project!]!
  commentable: Boolean!
  media: Media
  address: String
  city: String
  country: String
  guestListEnabled: Boolean!
  metaDescription: String
  customCode: String
}

"""A connection to a list of items."""
type EventConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [EventEdge]
}

"""An edge in a connection."""
type EventEdge {
  """The item at the end of the edge."""
  node: Event!

  """A cursor for use in pagination."""
  cursor: String!
}

input EventInput {
  title: String!
  body: String!
  startAt: String
  endAt: String
  authorEmail: String!
  themes: [ID!]!
  projects: [ID!]!
  link: String
  guestListEnabled: Boolean!
  enabled: Boolean!
  commentable: Boolean!
  zipCode: String
  address: String
  metaDescription: String
  customCode: String
  city: String
  country: String
}

"""Ways in which lists of events can be ordered upon return."""
input EventOrder {
  """The field in which to order nodes by."""
  field: EventOrderField! = START_AT

  """The direction in which to order nodes."""
  direction: OrderDirection! = DESC
}

"""Ordering options for events returned from the connection."""
enum EventOrderField {
  """Order by the end date of the time range."""
  END_AT

  """Order by the start date of the time range."""
  START_AT
}

"""Require a firstname"""
type FirstnameRequirement implements Node & Requirement {
  """The ID of an object"""
  id: ID!

  """Does the viewer meets the requirement ?"""
  viewerMeetsTheRequirement: Boolean!

  """The firstname of the viewer."""
  viewerValue: String
}

input FollowOpinionInput {
  """The opinion id"""
  opinionId: ID!

  """The type of notification"""
  notifiedOf: SubscriptionTypeValue!
  clientMutationId: String
}

type FollowOpinionPayload {
  opinion: Opinion
  followerEdge: FollowerEdge
  clientMutationId: String
}

input FollowProposalInput {
  """The proposal id"""
  proposalId: ID!

  """The type of notification"""
  notifiedOf: SubscriptionTypeValue!
  clientMutationId: String
}

type FollowProposalPayload {
  proposal: Proposal
  followerEdge: FollowerEdge
  clientMutationId: String
}

"""A follower"""
type Follower {
  proposal: Proposal
  opinion: Opinion
  user: User!
  notifiedOf: SubscriptionTypeValue
}

"""A connection to a list of items."""
type FollowerConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [FollowerEdge]
}

"""An edge in a connection."""
type FollowerEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Ways in which follower connections can be ordered."""
input FollowerOrder {
  """The field in which to order nodes by."""
  field: FollowerOrderField!

  """The direction in which to order nodes."""
  direction: OrderDirection! = ASC
}

"""Properties by which follower connections can be ordered"""
enum FollowerOrderField {
  """Allows ordering a list of followers namely."""
  NAME

  """Allows ordering a list of followers by when they were followed."""
  FOLLOWED_AT

  """Allows ordering a list of followers randomly."""
  RANDOM
}

"""France Connect SSO Configuration."""
type FranceConnectSSOConfiguration implements Node & SSOConfiguration {
  """The ID of an object."""
  id: ID!

  """The name of configured SSO."""
  name: String!

  """Does this configuration is enabled?"""
  enabled: Boolean!

  """Profile URL on the SSO side."""
  profileUrl: URI

  """Color in hexadecimal of SSO button."""
  buttonColor: Color!

  """Color in hexadecimal of label SSO button."""
  labelColor: Color!

  """Client ID."""
  clientId: String

  """Secret key."""
  secret: String

  """Authorization URL."""
  authorizationUrl: URI!

  """Access token URL."""
  accessTokenUrl: URI!

  """User info URL."""
  userInfoUrl: URI!

  """Logout URL."""
  logoutUrl: URI

  """Environment mode."""
  environment: SSOEnvironment!

  """Redirect URI callback."""
  redirectUri: URI!
}

"""3 possible values"""
enum GenderValue {
  MALE
  FEMALE
  OTHER
}

"""A string containing GeoJSON code."""
scalar GeoJSON

"""An address from Google Maps."""
type GoogleMapsAddress {
  """The raw response from the Google Maps API that describes an address"""
  json: String!

  """A human-readable address string."""
  formatted: String

  """
  The available types for this address. A type indicate the accuracy of the address on Google Maps.
  """
  types: [GoogleMapsAddressType!]!

  """The latitude of this address."""
  lat: Float!

  """The longitude of this address."""
  lng: Float!
}

"""A list of possible types for a given address from Google Maps."""
enum GoogleMapsAddressType {
  """
  Returns only the addresses for which Google has location information accurate down to street address precision.
  """
  ROOFTOP

  """
  Returns only the addresses that reflect an approximation (usually on a road)
  interpolated between two precise points (such as intersections). An
  interpolated range generally indicates that rooftop geocodes are unavailable
  for a street address.
  """
  RANGE_INTERPOLATED

  """
  Returns only geometric centers of a location such as a polyline (for example, a street) or polygon (region).
  """
  GEOMETRIC_CENTER

  """Returns only the addresses that are characterized as approximate"""
  APPROXIMATE
}

"""A group of User"""
type Group implements Node {
  """The id of the group."""
  id: ID!

  """Identifies the group name."""
  title: String

  """Identifies the description of the group."""
  description: String

  """Get all users of the group."""
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): UserConnection!
  createdAt: DateTime!
  updatedAt: DateTime
}

"""A connection to a list of items."""
type GroupConnection {
  totalCount: Int!
  totalUserCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [GroupEdge]
}

"""An edge in a connection."""
type GroupEdge {
  """The item at the end of the edge."""
  node: Group!

  """A cursor for use in pagination."""
  cursor: String!
}

"""A string containing HTML code."""
scalar HTML

"""A string containing an IP address."""
scalar IP

input InternalChangeSiteFaviconInput {
  """The media id to associate for the website favicon"""
  mediaId: ID!
  clientMutationId: String
}

type InternalChangeSiteFaviconPayload {
  """The newly updated site image favicon"""
  siteFavicon: SiteImage!
  clientMutationId: String
}

input InternalCreateOauth2SSOConfigurationInput {
  """Client ID."""
  clientId: String!

  """Secret key."""
  secret: String!

  """Authorization URL."""
  authorizationUrl: URI!

  """Access token URL."""
  accessTokenUrl: URI!

  """User info URL."""
  userInfoUrl: URI!

  """Logout URL."""
  logoutUrl: URI

  """Profile URL on the SSO side."""
  profileUrl: URI

  """Specify if this SSO configuration is active or not."""
  enabled: Boolean!

  """The name of your SSO provider."""
  name: String!

  """Color in hexadecimal of SSO button."""
  buttonColor: Color!

  """Color in hexadecimal of label SSO button."""
  labelColor: Color!
  clientMutationId: String
}

type InternalCreateOauth2SSOConfigurationPayload {
  """The created oauth2 configuration."""
  ssoConfiguration: Oauth2SSOConfiguration
  clientMutationId: String
}

input InternalDeleteSSOConfigurationInput {
  """The ID of SSO Configuration that needs to be deleted."""
  id: ID!
  clientMutationId: String
}

type InternalDeleteSSOConfigurationPayload {
  deletedSsoConfigurationId: ID
  userErrors: [UserError]
  clientMutationId: String
}

input InternalRemoveSiteFaviconInput {
  clientMutationId: String
}

type InternalRemoveSiteFaviconPayload {
  """The newly updated site image favicon"""
  siteFavicon: SiteImage!
  clientMutationId: String
}

"""A connection to a list of items."""
type InternalSSOConfigurationConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [InternalSSOConfigurationEdge]
}

"""An edge in a connection."""
type InternalSSOConfigurationEdge {
  """The item at the end of the edge."""
  node: SSOConfiguration

  """A cursor for use in pagination."""
  cursor: String!
}

input InternalToggleSSOConfigurationStatusInput {
  ssoConfigurationId: ID!
  clientMutationId: String
}

type InternalToggleSSOConfigurationStatusPayload {
  ssoConfiguration: SSOConfiguration!
  clientMutationId: String
}

input InternalUpdateFranceConnectSSOConfigurationInput {
  """Client ID."""
  clientId: String!

  """Secret key."""
  secret: String!

  """Environment mode."""
  environment: SSOEnvironment!
  clientMutationId: String
}

type InternalUpdateFranceConnectSSOConfigurationPayload {
  """The updated France Connect configuration."""
  fcConfiguration: FranceConnectSSOConfiguration
  clientMutationId: String
}

input InternalUpdateOauth2SSOConfigurationInput {
  """Client ID."""
  clientId: String!

  """Secret key."""
  secret: String!

  """Authorization URL."""
  authorizationUrl: URI!

  """Access token URL."""
  accessTokenUrl: URI!

  """User info URL."""
  userInfoUrl: URI!

  """Logout URL."""
  logoutUrl: URI

  """Profile URL on the SSO side."""
  profileUrl: URI

  """Specify if this SSO configuration is active or not."""
  enabled: Boolean!

  """The name of your SSO provider."""
  name: String!

  """Color in hexadecimal of SSO button."""
  buttonColor: Color!

  """Color in hexadecimal of label SSO button."""
  labelColor: Color!

  """The ID of oauth2 configuration that needs to be updated."""
  id: ID!
  clientMutationId: String
}

type InternalUpdateOauth2SSOConfigurationPayload {
  """The updated oauth2 configuration."""
  ssoConfiguration: Oauth2SSOConfiguration
  clientMutationId: String
}

input InternalUpdateShieldAdminFormInput {
  """Enable or disable shield mode."""
  shieldMode: Boolean!

  """Introduction text to show on shield page."""
  introduction: HTML

  """The image id to associate for the shield image."""
  mediaId: ID
  clientMutationId: String
}

"""A string containing JSON code."""
scalar JSON

"""Ways in which a question jump can be ordered."""
input JumpsOrder {
  """The field in which to order jumps by."""
  field: JumpsOrderField

  """The direction in which to order jumps."""
  direction: OrderDirection
}

"""Properties by which question jumps can be ordered"""
enum JumpsOrderField {
  """Allows ordering a list of question jumps by its position."""
  POSITION
}

"""Requires a lastname"""
type LastnameRequirement implements Node & Requirement {
  """The ID of an object"""
  id: ID!

  """Does the viewer meets the requirement ?"""
  viewerMeetsTheRequirement: Boolean!

  """The lastname of the viewer."""
  viewerValue: String
}

"""A logic jump in a question."""
type LogicJump {
  id: ID

  """Return the question that trigger this logic jump."""
  origin: Question!

  """Return the question which this logic jump leads to."""
  destination: Question!

  """
  Return the necessited conditions that needs to be fullfiled to trigger this logic jump.
  """
  conditions: [LogicJumpCondition]

  """Return the position of this logic jump."""
  position: Int!
}

"""A particular condition in a logic jump."""
interface LogicJumpCondition {
  id: ID

  """Return the operator for this condition."""
  operator: LogicJumpConditionOperator!

  """
  Return the question which is going to be tested against the condition.
  """
  question: Question!
}

"""A particular condition in a logic jump."""
input LogicJumpConditionInput {
  id: ID

  """The operator used to check the condition"""
  operator: LogicJumpConditionOperator!

  """The id of the question you want to have a condition"""
  question: ID!

  """The answer the selected question should have to trigger the condition"""
  value: String
}

"""Possible operator for a logic jump condition"""
enum LogicJumpConditionOperator {
  """Allows to test an equality."""
  IS

  """Allows to test the opposite of an equality test."""
  IS_NOT
}

input LogicJumpInput {
  id: ID
  always: Boolean

  """The id of the question where the logic jump start"""
  origin: ID!

  """
  The id of the question where the logic jump end if the conditions are fulfilled
  """
  destination: ID!

  """
  A collection of conditions that you have to fulfill for displaying the destination question
  """
  conditions: [LogicJumpConditionInput]
}

"""A map token used for connecting external services with our maps"""
type MapToken implements Node {
  """The ID of an object"""
  id: ID!

  """Expose Primary Key, do not use it, except for testing purpose."""
  _id: ID!

  """The public token"""
  publicToken: String!

  """The secret token"""
  secretToken: String

  """The corresponding provider in which belongs the token"""
  provider: MapTokenProvider

  """
  The style id associated to this map token (available only if a style is applied)
  """
  styleId: ID

  """
  The style owner associated to this map token (available only if a style is applied)
  """
  styleOwner: String

  """The available styles associated to this map token"""
  styles(
    """Filter the styles by its visibility"""
    visibility: MapTokenStyleVisibility
  ): [MapTokenStyle]
  createdAt: DateTime!
  updatedAt: DateTime
}

"""The provider for a map token"""
enum MapTokenProvider {
  """Used for Mapbox service provider"""
  MAPBOX
}

"""A map token style"""
type MapTokenStyle {
  id: ID!

  """The name of the style"""
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime

  """The version of the style"""
  version: Int!

  """The preview url of the style"""
  previewUrl: URI!

  """Does the style is the current one applied to the whole website?"""
  isCurrent: Boolean!

  """The owner of the style"""
  owner: String!

  """The visibility of the style"""
  visibility: MapTokenStyleVisibility!
}

"""The visibility of a style for a map token"""
enum MapTokenStyleVisibility {
  """The style is public"""
  PUBLIC

  """The style is private"""
  PRIVATE
}

"""A media"""
type Media implements UniformResourceLocatable {
  """The URL to this resource."""
  url(
    """The format of the media"""
    format: String
  ): URI!

  """The id of the media."""
  id: ID!
  name: String!
  size: String!
  enabled: Boolean!
  authorName: String
  description: String
  copyright: String
  contentType: String!
  providerReference: String!
}

"""A media question."""
type MediaQuestion implements Question & Node {
  """The ID of an object"""
  id: ID!

  """Identifies the question title."""
  title: String!

  """Return responses on this questions."""
  responses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int

    """Get responses with user not confirmed"""
    withNotConfirmedUser: Boolean = false
  ): ResponseConnection!
  number: Int!
  type: QuestionTypeValue!

  """The position of the question"""
  position: Int!
  private: Boolean!
  required: Boolean!
  helpText: String
  description: String
  kind: String!
  slug: String!

  """Return users who answered the question"""
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int

    """Get participant with user not confirmed"""
    withNotConfirmedUser: Boolean = false
  ): ParticipantConnection!

  """The associated logic jumps to this question."""
  jumps(
    """Ordering options for question jumps."""
    orderBy: JumpsOrder = {field: POSITION, direction: ASC}
  ): [LogicJump]

  """The destination of the always jump (the else case) of this question."""
  alwaysJumpDestinationQuestion: Question
}

"""A response"""
type MediaResponse implements Response {
  """Nullable ID in case of empty response."""
  id: String

  """Identifies the question of the response."""
  question: Question!

  """Medias"""
  medias: [Media!]!
}

"""A multiple choice question"""
type MultipleChoiceQuestion implements Question & Node {
  """The ID of an object"""
  id: ID!

  """Identifies the question title."""
  title: String!

  """Return responses on this questions."""
  responses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int

    """Get responses with user not confirmed"""
    withNotConfirmedUser: Boolean = false
  ): ResponseConnection!
  number: Int!
  type: QuestionTypeValue!

  """The position of the question"""
  position: Int!
  private: Boolean!
  required: Boolean!
  helpText: String
  description: String
  kind: String!
  slug: String!

  """Return users who answered the question"""
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int

    """Get participant with user not confirmed"""
    withNotConfirmedUser: Boolean = false
  ): ParticipantConnection!

  """The associated logic jumps to this question."""
  jumps(
    """Ordering options for question jumps."""
    orderBy: JumpsOrder = {field: POSITION, direction: ASC}
  ): [LogicJump]

  """The destination of the always jump (the else case) of this question."""
  alwaysJumpDestinationQuestion: Question
  isOtherAllowed: Boolean!

  """Responses of the `other` question choice."""
  otherResponses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): ResponseConnection!
  choices(
    """
    If the question has `randomQuestionChoices: true` will return choices in a random order.
    """
    allowRandomize: Boolean = false
  ): [QuestionChoice!]!
  validationRule: MultipleChoiceQuestionValidationRule
  randomQuestionChoices: Boolean!
}

"""A particular condition in a logic jump in a multiple choice question."""
type MultipleChoiceQuestionLogicJumpCondition implements LogicJumpCondition {
  id: ID

  """Return the operator for this condition."""
  operator: LogicJumpConditionOperator!

  """
  Return the question which is going to be tested against the condition.
  """
  question: Question!

  """
  The value that the condition should meet to be fullfiled (depending on the operator).
  """
  value: QuestionChoice
}

"""Multiple Choice Question Validation Rule"""
type MultipleChoiceQuestionValidationRule {
  type: MultipleChoiceQuestionValidationRulesTypes!
  number: Int!
}

input MultipleChoiceQuestionValidationRuleInput {
  type: MultipleChoiceQuestionValidationRulesTypes!
  number: Int!
}

"""Available types of validation rules"""
enum MultipleChoiceQuestionValidationRulesTypes {
  MIN
  EQUAL
  MAX
}

"""This is the entry point into performing writes in the schema."""
type Mutation {
  addEvent(input: AddEventInput!): AddEventPayload
  changeEvent(input: ChangeEventInput!): ChangeEventPayload
  deleteEvent(input: DeleteEventInput!): DeleteEventPayload
  changeMapProviderToken(input: ChangeMapProviderTokenInput!): ChangeMapProviderTokenPayload
  changeMapStyle(input: ChangeMapStyleInput!): ChangeMapStylePayload
  removeSiteFavicon(input: InternalRemoveSiteFaviconInput!): InternalRemoveSiteFaviconPayload
  changeSiteFavicon(input: InternalChangeSiteFaviconInput!): InternalChangeSiteFaviconPayload
  addEvents(input: AddEventsInput!): AddEventsPayload
  addComment(input: AddCommentInput!): AddCommentPayload
  addSourceVote(input: AddSourceVoteInput!): AddSourceVotePayload
  addCommentVote(input: AddCommentVoteInput!): AddCommentVotePayload
  addArgument(input: AddArgumentInput!): AddArgumentPayload
  addArgumentVote(input: AddArgumentVoteInput!): AddArgumentVotePayload
  addSource(input: AddSourceInput!): AddSourcePayload
  addVersion(input: AddVersionInput!): AddVersionPayload
  changeArgument(input: ChangeArgumentInput!): ChangeArgumentPayload
  changeVersion(input: ChangeVersionInput!): ChangeVersionPayload
  changeSource(input: ChangeSourceInput!): ChangeSourcePayload
  deleteArgument(input: DeleteArgumentInput!): DeleteArgumentPayload
  deleteComment(input: DeleteCommentInput!): DeleteCommentPayload
  deleteSource(input: DeleteSourceInput!): DeleteSourcePayload
  deleteOpinion(input: DeleteOpinionInput!): DeleteOpinionPayload
  deleteVersion(input: DeleteVersionInput!): DeleteVersionPayload
  addReply(input: AddReplyInput!): AddReplyPayload
  updateReply(input: UpdateReplyInput!): UpdateReplyPayload
  deleteReply(input: DeleteReplyInput!): DeleteReplyPayload
  changeUserNotificationsConfiguration(input: ChangeUserNotificationsConfigurationInput!): ChangeUserNotificationsConfigurationPayload
  addOpinionVote(input: AddOpinionVoteInput!): AddOpinionVotePayload
  removeOpinionVote(input: RemoveOpinionVoteInput!): RemoveOpinionVotePayload
  removeArgumentVote(input: RemoveArgumentVoteInput!): RemoveArgumentVotePayload
  removeCommentVote(input: RemoveCommentVoteInput!): RemoveCommentVotePayload
  removeSourceVote(input: RemoveSourceVoteInput!): RemoveSourceVotePayload
  addProposalVote(input: AddProposalVoteInput!): AddProposalVotePayload
  removeProposalVote(input: RemoveProposalVoteInput!): RemoveProposalVotePayload
  updateProposalVotes(input: UpdateProposalVotesInput!): UpdateProposalVotesPayload
  requestUserArchive(input: RequestUserArchiveInput!): RequestUserArchivePayload
  changeProposalPublicationStatus(input: ChangeProposalPublicationStatusInput!): ChangeProposalPublicationStatusPayload
  changeProposalContent(input: ChangeProposalContentInput!): ChangeProposalContentPayload
  createProposal(input: CreateProposalInput!): CreateProposalPayload
  createProposalFusion(input: CreateProposalFusionInput!): CreateProposalFusionPayload
  updateProposalFusion(input: UpdateProposalFusionInput!): UpdateProposalFusionPayload
  changeProposalNotation(input: ChangeProposalNotationInput!): ChangeProposalNotationPayload
  changeProposalEvaluers(input: ChangeProposalEvaluersInput!): ChangeProposalEvaluersPayload
  followProposal(input: FollowProposalInput!): FollowProposalPayload
  followOpinion(input: FollowOpinionInput!): FollowOpinionPayload
  updateFollowProposal(input: UpdateFollowProposalInput!): UpdateFollowProposalPayload
  updateFollowOpinion(input: UpdateFollowOpinionInput!): UpdateFollowOpinionPayload
  unfollowProposal(input: UnfollowProposalInput!): UnfollowProposalPayload
  unfollowOpinion(input: UnfollowOpinionInput!): UnfollowOpinionPayload
  selectProposal(input: SelectProposalInput!): SelectProposalPayload
  unselectProposal(input: UnselectProposalInput!): UnselectProposalPayload
  changeSelectionStatus(input: ChangeSelectionStatusInput!): ChangeSelectionStatusPayload
  changeCollectStatus(input: ChangeCollectStatusInput!): ChangeCollectStatusPayload
  changeProposalProgressSteps(input: ChangeProposalProgressStepsInput!): ChangeProposalProgressStepsPayload
  deleteProposal(input: DeleteProposalInput!): DeleteProposalPayload
  updateRegistrationForm(input: UpdateRegistrationFormQuestionsInput!): UpdateRegistrationFormQuestionsPayload
  createProposalForm(input: CreateProposalFormInput!): CreateProposalFormPayload
  changeDistrict(input: ChangeDistrictInput!): ChangeDistrictPayload
  updateProposalForm(input: UpdateProposalFormInput!): UpdateProposalFormPayload
  updateProposalFormNotificationsConfiguration(input: UpdateProposalFormNotificationsConfigurationInput!): UpdateProposalFormNotificationsConfigurationPayload
  setEvaluationFormInProposalForm(input: SetEvaluationFormInProposalFormInput!): SetEvaluationFormInProposalFormPayload
  changeProposalEvaluation(input: ChangeProposalEvaluationInput!): ChangeProposalEvaluationPayload
  updateContactPage(input: UpdateContactPageInput!): UpdateContactPagePayload
  sendContactForm(input: SendContactFormInput!): SendContactFormPayload
  addContactForm(input: AddContactFormInput!): AddContactFormPayload
  removeContactForm(input: RemoveContactFormInput!): RemoveContactFormPayload
  updateContactForm(input: UpdateContactFormInput!): UpdateContactFormPayload
  createGroup(input: CreateGroupInput!): CreateGroupPayload
  updateGroup(input: UpdateGroupInput!): UpdateGroupPayload
  deleteGroup(input: DeleteGroupInput!): DeleteGroupPayload
  deleteUserInGroup(input: DeleteUserInGroupInput!): DeleteUserInGroupPayload
  addUsersInGroup(input: AddUsersInGroupInput!): AddUsersInGroupPayload
  updateProfile(input: UpdateProfileInput!): UpdateProfilePayload
  updateProfilePassword(input: UpdateProfilePasswordInput!): UpdateProfilePasswordPayload
  updateProfilePersonalData(input: UpdateProfilePersonalDataInput!): UpdateProfilePersonalDataPayload
  updateProfilePublicData(input: UpdateProfilePublicDataInput!): UpdateProfilePublicDataPayload
  deleteAccount(input: DeleteAccountInput!): DeleteAccountPayload
  updateRequirement(input: UpdateRequirementInput!): UpdateRequirementPayload
  createUser(input: CreateUserInput!): CreateUserPayload
  updateUserAccount(input: UpdateUserAccountInput!): UpdateUserAccountPayload
  addUsersToGroupFromEmail(input: AddUsersToGroupFromEmailInput!): AddUsersToGroupFromEmailPayload
  createQuestionnaire(input: CreateQuestionnaireInput!): CreateQuestionnairePayload
  updateQuestionnaireParameters(input: UpdateQuestionnaireParametersInput!): UpdateQuestionnaireParametersPayload
  updateQuestionnaireConfiguration(input: UpdateQuestionnaireConfigurationInput!): UpdateQuestionnaireConfigurationPayload
  createProject(input: CreateProjectInput!): CreateProjectPayload
  updateProject(input: UpdateProjectInput!): UpdateProjectPayload
  createProjectDistrict(input: CreateProjectDistrictInput!): CreateProjectDistrictPayload
  deleteProjectDistrict(input: DeleteProjectDistrictInput!): DeleteProjectDistrictPayload
  updateProjectDistrict(input: UpdateProjectDistrictInput!): CreateProjectDistrictPayload
  updateShieldAdminForm(input: InternalUpdateShieldAdminFormInput!): UpdateShieldAdminFormPayload
  createOauth2SSOConfiguration(input: InternalCreateOauth2SSOConfigurationInput!): InternalCreateOauth2SSOConfigurationPayload
  updateOauth2SSOConfiguration(input: InternalUpdateOauth2SSOConfigurationInput!): InternalUpdateOauth2SSOConfigurationPayload
  deleteSSOConfiguration(input: InternalDeleteSSOConfigurationInput!): InternalDeleteSSOConfigurationPayload
  toggleSSOConfigurationStatus(input: InternalToggleSSOConfigurationStatusInput!): InternalToggleSSOConfigurationStatusPayload
  updateFranceConnectSSOConfiguration(input: InternalUpdateFranceConnectSSOConfigurationInput!): InternalUpdateFranceConnectSSOConfigurationPayload
}

"""A connection to a list of items."""
type NewsConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [NewsEdge]
}

"""An edge in a connection."""
type NewsEdge {
  """The item at the end of the edge."""
  node: Post!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Fetches an object given its ID"""
interface Node {
  """The ID of an object"""
  id: ID!
}

"""Possible reason that a `Publishable` is not published."""
enum NotPublishedReason {
  """Author account was confirmed after the step has ended."""
  AUTHOR_CONFIRMED_TOO_LATE

  """Author account isn't confirmed and the step has ended."""
  AUTHOR_NOT_CONFIRMED

  """Author account isn't confirmed yet."""
  WAITING_AUTHOR_CONFIRMATION
}

"""A user without account."""
type NotRegistered {
  """Email of the user."""
  email: String

  """Username of the user."""
  username: String
}

"""A notifications configuration"""
type NotificationsConfiguration {
  onCreate: Boolean!
  onUpdate: Boolean!
  onDelete: Boolean!
  onCommentCreate: Boolean!
  onCommentUpdate: Boolean!
  onCommentDelete: Boolean!
}

"""Oauth2 SSO Configuration."""
type Oauth2SSOConfiguration implements Node & SSOConfiguration {
  """The ID of an object."""
  id: ID!

  """The name of configured SSO."""
  name: String!

  """Does this configuration is enabled?"""
  enabled: Boolean!

  """Profile URL on the SSO side."""
  profileUrl: URI

  """Color in hexadecimal of SSO button."""
  buttonColor: Color!

  """Color in hexadecimal of label SSO button."""
  labelColor: Color!

  """Client ID."""
  clientId: String

  """Secret key."""
  secret: String

  """Authorization URL."""
  authorizationUrl: URI!

  """Access token URL."""
  accessTokenUrl: URI!

  """User info URL."""
  userInfoUrl: URI!

  """Logout URL."""
  logoutUrl: URI

  """Redirect URI callback."""
  redirectUri: URI!
}

"""A contribution"""
type Opinion implements Node & Publishable & Argumentable & Sourceable & Reportable & Contribution & Trashable & ContributionWithAuthor & EditableContribution {
  """The ID of an object"""
  id: ID!

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason
  contribuable: Boolean!

  """The arguments related to the argumentable."""
  arguments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
    orderBy: ArgumentOrder = {field: PUBLISHED_AT, direction: DESC}

    """If provided, returns the arguments of this particular type."""
    type: ArgumentValue

    """The connection will return the trashed results too."""
    includeTrashed: Boolean = false
  ): ArgumentConnection!

  """The unpublished arguments of to the viewer."""
  viewerArgumentsUnpublished(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int

    """If provided, returns the arguments of this particular type."""
    type: ArgumentValue
  ): ArgumentConnection
  step: ConsultationStep!

  """The sources related to the sourceable."""
  sources(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
    orderBy: SourceOrder = {field: PUBLISHED_AT, direction: DESC}
  ): SourceConnection!

  """
  The viewer unpublished sources related to the sourceable (only visible by viewer).
  """
  viewerSourcesUnpublished(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): SourceConnection!

  """The available sources categories of to the sourceable."""
  availableSourceCategories: [SourceCategory]

  """Does the viewer already submitted a report ?"""
  viewerHasReport: Boolean!

  """The reportings related to the reportable."""
  reportings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
    orderBy: ReportingOrder = {field: CREATED_AT, direction: DESC}
  ): ReportingConnection!

  """The kind of contribution."""
  kind: String!

  """
  Return the related contribution if the contribution is related to another.
  """
  related: Contribution

  """Url of the contribution"""
  url: URI!

  """Whether or not the contribution is trashed."""
  trashed: Boolean!

  """Identifies the trashed visibility."""
  trashedStatus: TrashableStatus

  """Identifies the moment the moderator trashed the contribution."""
  trashedAt: DateTime

  """Identifies the reason why the moderator trashed the contribution."""
  trashedReason: String

  """The author of the contribution."""
  author: User!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """Followers connection"""
  followers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
    orderBy: FollowerOrder = {field: FOLLOWED_AT, direction: DESC}
  ): FollowerConnection

  """Identifies the viewer following configuration on the entity."""
  viewerFollowingConfiguration: SubscriptionTypeValue

  """Identifies if the viewer is following the entity."""
  viewerIsFollowing: Boolean!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """true if the contribution is pinned."""
  pinned: Boolean!

  """The viewer vote."""
  viewerVote: OpinionVote
  votes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
    orderBy: ProposalVotesOrder = {field: PUBLISHED_AT, direction: DESC}

    """Filters vote by value"""
    value: YesNoPairedVoteValue
  ): YesNoPairedVoteConnection!

  """Identifies the contribution title."""
  title: String!

  """Identifies the body of the contribution."""
  body: HTML!

  """Identifies the body of the contribution rendered to text."""
  bodyText: String!

  """The versions related to the contribution."""
  versions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
    orderBy: VersionOrder = {field: PUBLISHED_AT, direction: DESC}
  ): VersionConnection!

  """The viewer versions related to the contribution."""
  viewerVersionsUnpublished(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
    orderBy: VersionOrder = {field: PUBLISHED_AT, direction: DESC}
  ): VersionConnection!

  """Where the proposition has been placed."""
  section: Section!
  answer: Answer
  ranking: Int
  modals: [OpinionModal]
  appendices: [Appendix]

  """The related project."""
  project: Project
}

"""A connection to a list of items."""
type OpinionConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [OpinionEdge]
}

"""An edge in a connection."""
type OpinionEdge {
  """The item at the end of the edge."""
  node: Opinion!

  """A cursor for use in pagination."""
  cursor: String!
}

"""A contribution"""
type OpinionModal {
  """Identifies the contribution title."""
  key: String!

  """Identifies the contribution title."""
  after: String!

  """Identifies the contribution title."""
  before: String!
  title: String!
  diff: HTML
}

union OpinionOrVersion = Opinion | Version

"""Ways in which opinion connections can be ordered."""
input OpinionOrder {
  """The field in which to order nodes by."""
  field: OpinionOrderField!

  """The direction in which to order nodes."""
  direction: OrderDirection! = ASC
}

"""Properties by which opinion connections can be ordered"""
enum OpinionOrderField {
  """Allows ordering a list of opinions by position."""
  POSITIONS

  """Allows ordering a list of opinions randomly."""
  RANDOM

  """Allows ordering a list of opinions by when they were created."""
  PUBLISHED_AT

  """Allows ordering a list of opinions by the number of votes it have."""
  VOTES

  """Allows ordering a list of opinions by the number of votes OK it have."""
  VOTES_OK

  """Allows ordering a list of opinions by the number of comments it have."""
  COMMENTS
}

"""Entities that can be published."""
type OpinionVote implements YesNoPairedVote & Publishable & Vote {
  """The ID of an object"""
  id: ID!

  """The date of the vote."""
  createdAt: DateTime!

  """The author of the contribution."""
  author: User

  """The contribution that was voted."""
  related: Contribution

  """Returns 'opinionVote'."""
  kind: String!

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason
  value: YesNoPairedVoteValue!
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC

  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}

"""A step inside a project."""
type OtherStep implements Step {
  """The ID of an object"""
  id: ID!

  """When the time interval begins or ends."""
  timeRange: TimeRange!

  """The URL to this resource."""
  url: URI!

  """The title of the step."""
  title: String!

  """The kind of the step"""
  kind: String!

  """The status of the step"""
  status: StepStatus

  """The type of the step"""
  type: String

  """Does the step have a end date ?"""
  timeless: Boolean

  """The introduction text of the step."""
  body: HTML
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""User and NotRegistered"""
union Participant = User | NotRegistered

"""A connection to a list of items."""
type ParticipantConnection {
  """Identifies the total count of items in the connection."""
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ParticipantEdge]
}

"""An edge in a connection."""
type ParticipantEdge {
  registeredAt: DateTime!
  registeredAnonymously: Boolean!

  """The item at the end of the edge."""
  node: Participant!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Requires a phone"""
type PhoneRequirement implements Node & Requirement {
  """The ID of an object"""
  id: ID!

  """Does the viewer meets the requirement ?"""
  viewerMeetsTheRequirement: Boolean!

  """The phone of the viewer."""
  viewerValue: String
}

"""Represents a type that can be retrieved by a URL on the admin."""
type Post implements Node & Commentable & UniformResourceLocatable & UniformResourceAdminLocatable {
  """The ID of an object"""
  id: ID!

  """The comments related to the commentable."""
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
    orderBy: CommentOrder = {field: PUBLISHED_AT, direction: DESC}
  ): CommentConnection!

  """The URL to this resource."""
  url: URI!

  """The admin url for this post."""
  adminUrl: URI!
  title: String
  relatedContent: [PostRelatedContent!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime
  authors: [User!]!

  """The publication status for this post."""
  publicationStatus: PostPublicationStatus!
  commentable: Boolean!
  displayedOnBlog: Boolean!
  abstract: String!
  media: Media
  themes: [Theme!]!
  body: HTML
}

"""Available statuses"""
enum PostPublicationStatus {
  """Normal status, publicly visible"""
  PUBLISHED

  """Not publicly visible"""
  NOT_PUBLISHED
}

"""A related content for a post"""
union PostRelatedContent = Theme | Proposal | Project

"""A step inside a project."""
type PresentationStep implements Step {
  """The ID of an object"""
  id: ID!

  """When the time interval begins or ends."""
  timeRange: TimeRange!

  """The URL to this resource."""
  url: URI!

  """The title of the step."""
  title: String!

  """The kind of the step"""
  kind: String!

  """The status of the step"""
  status: StepStatus

  """The type of the step"""
  type: String

  """Does the step have a end date ?"""
  timeless: Boolean

  """The introduction text of the step."""
  body: HTML
}

"""A vote that can be anonymous."""
interface PrivatableVote {
  """Whether the author of the vote is anonymous or not."""
  private: Boolean @deprecated(reason: "Field `private` will be removed. Use `anonymous` instead. This field has been renamed. Removal on 2019-09-01 UTC.")

  """Whether the author of the vote is anonymous or not."""
  anonymous: Boolean!
}

"""A budget contribution"""
type ProgressStep {
  id: ID!
  title: String!
  startAt: DateTime!
  endAt: DateTime
}

input ProgressStepInput {
  title: String!
  startAt: DateTime!
  endAt: DateTime
}

"""A participatory project."""
type Project implements Node & UniformResourceLocatable & UniformResourceAdminLocatable {
  """The ID of an object."""
  id: ID!

  """The URL to this resource."""
  url: URI!

  """Identifies the title of the project."""
  title: String!

  """Identifies when the project was published at."""
  publishedAt: DateTime!

  """A list of votes associated with the project."""
  votes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): VoteConnection!

  """A list of contributors associated with the project."""
  contributors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): UserConnection!

  """Count of contributions associated with the project."""
  contributionsCount: Int! @deprecated(reason: "Field `contributionsCount` will be removed. Use `contributions.totalCount` instead when it will be published. In preparation for an upcoming change to the way we expose counters, this field will only be available inside a connection. Removal on 2020-01-01 UTC.")

  """The cover image associated with the project."""
  cover: Media

  """The type associated with the project."""
  type: ProjectType

  """The different steps associated with the project."""
  steps: [Step!]!

  """The list of users who authored the project."""
  authors: [User!]!

  """The admin URL to this resource."""
  adminUrl: URI!

  """A list of proposals associated to the object."""
  proposals(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int

    """
    If non-null, filters proposals with the given trashed status (eg: visible, not visible).
    """
    trashedStatus: ProposalTrashedStatus = NOT_TRASHED

    """
    ID of a User to filter by. If non-null, only proposals authored by this user will be returned.
    """
    author: ID

    """Ordering options for proposals returned from the connection."""
    orderBy: ProposalOrder = {field: PUBLISHED_AT, direction: ASC}

    """
    ID of a ProposalDistrict to filter by. If non-null, filters proposals with the given district.
    """
    district: ID

    """
    ID of a UserType to filter by. If non-null, filters proposals with the given type of author.
    """
    userType: ID

    """
    ID of a ProposalCategory to filter by. If non-null, filters proposals with the given category.
    """
    category: ID

    """
    ID of a ProposalStatus to filter by. If non-null, filters proposals with the given status.
    """
    status: ID

    """
    ID of a Theme to filter by. If non-null, filters proposals with the given theme.
    """
    theme: ID

    """If non-null, filters proposals with the given string to look for."""
    term: String

    """Affiliation options for proposals returned from the connection."""
    affiliations: [ProposalAffiliation]

    """(ROLE_SUPER_ADMIN only) Select also unpublished proposals."""
    includeUnpublished: Boolean = false

    """Select also draft proposals"""
    includeDraft: Boolean = false
  ): ProposalConnection!

  """The viewer unpublished proposals (only visible by viewer)."""
  viewerProposalsUnpublished(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): ProposalConnection

  """Expose Primary Key, do not use it, except for testing purpose."""
  _id: ID!

  """Slug of a project"""
  slug: String!
  video: String
  hasParticipativeStep: Boolean!
  themes: [Theme!]
  votableSteps: [ProposalStep!]!

  """The visibility of the project."""
  visibility: ProjectVisibility!

  """State of activation of Opinion subscription."""
  opinionCanBeFollowed: Boolean!

  """Viewers that can access the project, null otherwise."""
  restrictedViewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): GroupConnection

  """The districts related to the project."""
  districts: [ProjectDistrict!]!

  """The comments related to the project."""
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int

    """The connection will return only the trashed results."""
    onlyTrashed: Boolean = false
    orderBy: CommentOrder = {field: PUBLISHED_AT, direction: DESC}
  ): CommentConnection!
  isVotesCounterDisplayable: Boolean!
  isContributionsCounterDisplayable: Boolean!
  isParticipantsCounterDisplayable: Boolean!

  """Whether it's an external project or not."""
  isExternal: Boolean!

  """URL of the external project."""
  externalLink: URI

  """Opinion term of the project."""
  opinionTerm: Int!
}

"""A connection to a list of items."""
type ProjectConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ProjectEdge]
}

"""A project district"""
type ProjectDistrict implements District {
  id: ID!
  name: String!
  geojson: GeoJSON
  geojsonStyle: CssJSON
  displayedOnMap: Boolean!
  border: Style
  background: Style
}

"""A connection to a list of items."""
type ProjectDistrictConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ProjectDistrictEdge]
}

"""An edge in a connection."""
type ProjectDistrictEdge {
  """The item at the end of the edge."""
  node: ProjectDistrict!

  """A cursor for use in pagination."""
  cursor: String!
}

"""An edge in a connection."""
type ProjectEdge {
  """The item at the end of the edge."""
  node: Project!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Ways in which project can be ordered."""
input ProjectOrder {
  """The field in which to order nodes by."""
  field: ProjectOrderField

  """The direction in which to order nodes."""
  direction: OrderDirection
}

"""Ordering options for projects returned from the connection."""
enum ProjectOrderField {
  """Allows ordering a list of projects by when they were published."""
  LATEST

  """Allows ordering a list of projects by their number of contributions."""
  POPULAR
}

"""Label of a Project."""
type ProjectType {
  """Id of project Type"""
  id: ID!

  """Title of project Type"""
  title: String!

  """Slug of project Type"""
  slug: String!

  """Color of project Type"""
  color: String!
}

"""4 possible values"""
enum ProjectVisibility {
  """visible for group admin"""
  ADMIN

  """the project is restricted to users groups"""
  CUSTOM

  """visible for me only"""
  ME

  """visible for all"""
  PUBLIC
}

"""Represents a type that can be retrieved by a URL on the admin."""
type Proposal implements Node & Publishable & UniformResourceLocatable & Trashable & Contribution & Commentable & Draftable & Reportable & UniformResourceAdminLocatable {
  """The ID of an object."""
  id: ID!

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason

  """Url of the contribution"""
  url: URI!

  """Whether or not the contribution is trashed."""
  trashed: Boolean!

  """Identifies the trashed visibility."""
  trashedStatus: TrashableStatus

  """Identifies the moment the moderator trashed the contribution."""
  trashedAt: DateTime

  """Identifies the reason why the moderator trashed the contribution."""
  trashedReason: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Identifies the proposal title."""
  title: String!

  """Identifies the author of the contribution."""
  author: User!

  """Identifies the body of the proposal."""
  body: HTML

  """Identifies the responses of the proposal."""
  responses: [Response]!

  """Identifies the unique reference of the proposal."""
  reference: String!

  """The kind of contribution."""
  kind: String!

  """
  Return the related contribution if the contribution is related to another.
  """
  related: Contribution

  """The comments related to the commentable."""
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
    orderBy: CommentOrder = {field: PUBLISHED_AT, direction: DESC}
  ): CommentConnection!

  """Identifies proposals as draft."""
  draft: Boolean!

  """Does the viewer already submitted a report ?"""
  viewerHasReport: Boolean!

  """The reportings related to the reportable."""
  reportings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
    orderBy: ReportingOrder = {field: CREATED_AT, direction: DESC}
  ): ReportingConnection!

  """Followers connection"""
  followers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int

    """Ordering options for followers returning from the connection"""
    orderBy: FollowerOrder = {field: FOLLOWED_AT, direction: DESC}
  ): UserConnection!

  """Identifies the viewer following configuration on the entity."""
  viewerFollowingConfiguration: SubscriptionTypeValue

  """View follow current proposal"""
  viewerIsFollowing: Boolean!

  """The admin URL to this resource."""
  adminUrl: URI!
  progressSteps: [ProgressStep!]!
  evaluers: [Group!]!
  currentVotableStep: ProposalStep
  viewerIsAnEvaluer: Boolean!
  news(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
    orderBy: ProposalOrder = {field: PUBLISHED_AT, direction: DESC}
  ): NewsConnection!

  """The related project."""
  project: Project
  status(
    """Used to get the status on a selection step."""
    step: ID
  ): Status
  selections: [Selection!]!
  likers: [User!]!
  estimation: Int
  media: Media
  theme: Theme
  category: ProposalCategory
  district: ProposalDistrict
  address: GoogleMapsAddress

  """The delete date."""
  deletedAt: DateTime

  """The update user."""
  updatedBy: User

  """The publication status for this proposal."""
  publicationStatus: ProposalPublicationStatus!

  """Identifies the body of the contribution rendered to text."""
  bodyText: String!

  """Identifies the summary of the contribution."""
  summary: String

  """Identifies the preview text of the contribution."""
  summaryOrBodyExcerpt: String

  """Identifies the form where the contribution was submitted."""
  form: ProposalForm!

  """Identifies the answers to an evaluation form."""
  evaluation: ProposalEvaluation
  votes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
    orderBy: ProposalVotesOrder = {field: PUBLISHED_AT, direction: DESC}

    """If provided, retrieve only in this step."""
    stepId: ID

    """(ROLE_SUPER_ADMIN only) Select also unpublished votes."""
    includeUnpublished: Boolean = false
  ): ProposalVoteConnection!

  """If the proposal is a fusion, contains the list of merged proposals."""
  mergedFrom: [Proposal!]!

  """If the proposal listed in a fusion, contains the list of fusions."""
  mergedIn: [Proposal!]!
  postsCount: Int!
  viewerCanSeeEvaluation: Boolean!
  viewerHasVote(
    """The concerned step."""
    step: ID!
  ): Boolean!
  viewerVote(
    """The concerned step."""
    step: ID!
  ): ProposalVote
  votableSteps: [ProposalStep!]!
}

"""The affiliation of a user to a proposal"""
enum ProposalAffiliation {
  """Show only the proposals where the current user is an owner"""
  OWNER

  """Show only the proposals where the current user is an evaluer"""
  EVALUER
}

"""A proposal category"""
type ProposalCategory {
  id: ID!
  name: String!
}

input ProposalCategoryInput {
  id: ID
  name: String!
}

"""A connection to a list of items."""
type ProposalConnection {
  totalCount: Int!
  fusionCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ProposalEdge]
}

"""A proposal district"""
type ProposalDistrict implements District {
  id: ID!
  name: String!
  geojson: GeoJSON
  geojsonStyle: CssJSON
  displayedOnMap: Boolean!
  border: Style
  background: Style
}

"""An edge in a connection."""
type ProposalEdge {
  """The item at the end of the edge."""
  node: Proposal!

  """A cursor for use in pagination."""
  cursor: String!
}

"""An evaluation for a proposal"""
type ProposalEvaluation {
  """Identifies the proposal."""
  proposal: Proposal!

  """The revision number of the evaluation"""
  version: Int!

  """List of responses for the evaluation"""
  responses: [Response]!
}

"""A budget form"""
type ProposalForm implements Node & UniformResourceLocatable {
  """The ID of an object"""
  id: ID!

  """A list of proposals associated to the object."""
  proposals(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int

    """
    If non-null, filters proposals with the given trashed status (eg: visible, not visible).
    """
    trashedStatus: ProposalTrashedStatus = NOT_TRASHED

    """
    ID of a User to filter by. If non-null, only proposals authored by this user will be returned.
    """
    author: ID

    """Ordering options for proposals returned from the connection."""
    orderBy: ProposalOrder = {field: PUBLISHED_AT, direction: ASC}

    """
    ID of a ProposalDistrict to filter by. If non-null, filters proposals with the given district.
    """
    district: ID

    """
    ID of a UserType to filter by. If non-null, filters proposals with the given type of author.
    """
    userType: ID

    """
    ID of a ProposalCategory to filter by. If non-null, filters proposals with the given category.
    """
    category: ID

    """
    ID of a ProposalStatus to filter by. If non-null, filters proposals with the given status.
    """
    status: ID

    """
    ID of a Theme to filter by. If non-null, filters proposals with the given theme.
    """
    theme: ID

    """If non-null, filters proposals with the given string to look for."""
    term: String

    """Affiliation options for proposals returned from the connection."""
    affiliations: [ProposalAffiliation]

    """(ROLE_SUPER_ADMIN only) Select also unpublished proposals."""
    includeUnpublished: Boolean = false

    """Select also draft proposals"""
    includeDraft: Boolean = false
  ): ProposalConnection!

  """The viewer unpublished proposals (only visible by viewer)."""
  viewerProposalsUnpublished(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): ProposalConnection

  """The URL to this resource."""
  url: URI!
  reference: String!
  description: String
  summaryHelpText: String
  illustrationHelpText: String
  title: String!

  """Available categories for proposals of this form."""
  categories(order: CategoryOrderField): [ProposalCategory!]!
  usingThemes: Boolean!

  """Viewer can contribute to the form"""
  contribuable: Boolean!
  themeMandatory: Boolean!
  themeHelpText: String
  usingDistrict: Boolean!
  commentable: Boolean!
  costable: Boolean!
  proposalInAZoneRequired: Boolean!
  districts(order: DistrictOrderField): [ProposalDistrict!]!
  districtMandatory: Boolean!
  districtHelpText: String
  usingCategories: Boolean!
  categoryMandatory: Boolean!
  categoryHelpText: String
  usingAddress: Boolean!
  titleHelpText: String
  descriptionHelpText: String
  addressHelpText: String
  questions: [Question!]!
  latMap: Float
  lngMap: Float
  zoomMap: Int
  notificationsConfiguration: NotificationsConfiguration!

  """Get the evaluation form of the proposal form"""
  evaluationForm: EvaluationForm

  """Identifies the step that use the proposal form."""
  step: CollectStep
  allowAknowledge: Boolean!

  """Proposal form is type of Proposal or Question"""
  isProposalForm: Boolean!

  """Proposal form using description field"""
  usingDescription: Boolean!

  """Proposal form using illustration field"""
  usingIllustration: Boolean!

  """Proposal form using summary field"""
  usingSummary: Boolean!

  """Proposal form is description field is mandatory or not"""
  descriptionMandatory: Boolean!

  """
  When a user is creating a proposal, suggest similar to avoid duplicate.
  """
  suggestingSimilarProposals: Boolean!
}

"""Ways in which proposal connections can be ordered."""
input ProposalOrder {
  """The field in which to order nodes by."""
  field: ProposalOrderField!

  """The direction in which to order nodes."""
  direction: OrderDirection! = ASC
}

"""Properties by which proposal connections can be ordered."""
enum ProposalOrderField {
  """
  Allows ordering a list of proposals by the number of comments it have.
  """
  COMMENTS

  """
  Allows ordering a list of proposals by the cost it have been estimated.
  """
  COST

  """Allows ordering a list of proposals by when they were published."""
  PUBLISHED_AT

  """Allows randomizing a list of proposals."""
  RANDOM

  """Allows ordering a list of proposals by the number of votes it have."""
  VOTES
}

"""Available statuses"""
enum ProposalPublicationStatus {
  """Publicly visible"""
  PUBLISHED

  """Publicly visible in the trash bin"""
  TRASHED

  """In the trash bin, content not visible"""
  TRASHED_NOT_VISIBLE

  """Not publicly visible, deleted by author"""
  DELETED

  """Draft, not publicly visible, only showed for his author."""
  DRAFT

  """Visible by author only."""
  UNPUBLISHED
}

"""A proposal step"""
interface ProposalStep {
  """The ID of an object"""
  id: ID!

  """When the time interval begins or ends."""
  timeRange: TimeRange!

  """The URL to this resource."""
  url: URI!

  """The title of the step."""
  title: String!

  """The kind of the step"""
  kind: String!

  """The status of the step"""
  status: StepStatus

  """The type of the step"""
  type: String

  """Does the step have a end date ?"""
  timeless: Boolean

  """The introduction text of the step."""
  body: HTML

  """A list of proposals associated to the object."""
  proposals(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int

    """
    If non-null, filters proposals with the given trashed status (eg: visible, not visible).
    """
    trashedStatus: ProposalTrashedStatus = NOT_TRASHED

    """
    ID of a User to filter by. If non-null, only proposals authored by this user will be returned.
    """
    author: ID

    """Ordering options for proposals returned from the connection."""
    orderBy: ProposalOrder = {field: PUBLISHED_AT, direction: ASC}

    """
    ID of a ProposalDistrict to filter by. If non-null, filters proposals with the given district.
    """
    district: ID

    """
    ID of a UserType to filter by. If non-null, filters proposals with the given type of author.
    """
    userType: ID

    """
    ID of a ProposalCategory to filter by. If non-null, filters proposals with the given category.
    """
    category: ID

    """
    ID of a ProposalStatus to filter by. If non-null, filters proposals with the given status.
    """
    status: ID

    """
    ID of a Theme to filter by. If non-null, filters proposals with the given theme.
    """
    theme: ID

    """If non-null, filters proposals with the given string to look for."""
    term: String

    """Affiliation options for proposals returned from the connection."""
    affiliations: [ProposalAffiliation]

    """(ROLE_SUPER_ADMIN only) Select also unpublished proposals."""
    includeUnpublished: Boolean = false

    """Select also draft proposals"""
    includeDraft: Boolean = false
  ): ProposalConnection!

  """The viewer unpublished proposals (only visible by viewer)."""
  viewerProposalsUnpublished(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): ProposalConnection

  """The requirements to vote on this step."""
  requirements(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): RequirementConnection!
  project: Project
  votesLimit: Int
  budget: Int
  voteType: ProposalStepVoteType!
  votable: Boolean!
  votesHelpText: String
  voteThreshold: Int
  statuses: [Status!]!
  defaultSort: String
  open: Boolean!

  """If enabled, allow voters to order their votes by preferences."""
  votesRanking: Boolean!

  """A list of viewer votes associated with the step."""
  viewerVotes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
    orderBy: ProposalVotesOrder = {direction: DESC}
  ): ProposalVoteConnection!
  form: ProposalForm!
}

"""Type of vote."""
enum ProposalStepVoteType {
  DISABLED
  SIMPLE
  BUDGET
}

"""Possible trashed status for a `Proposal`."""
enum ProposalTrashedStatus {
  """`NOT_TRASHED` status to inclide the non trashed proposal."""
  NOT_TRASHED

  """`TRASHED` status to include the trashed proposal."""
  TRASHED
}

"""A vote that can be anonymous."""
type ProposalVote implements Vote & Publishable & PrivatableVote {
  """The ID of an object"""
  id: ID!

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason

  """The date of the vote."""
  createdAt: DateTime!

  """The author of the contribution. If null, the vote is anonymous."""
  author: User

  """The contribution that was voted."""
  related: Contribution

  """Returns 'proposalVote'."""
  kind: String!

  """Whether the author of the vote is anonymous or not."""
  private: Boolean @deprecated(reason: "Field `private` will be removed. Use `anonymous` instead. This field has been renamed. Removal on 2019-09-01 UTC.")

  """Whether the author of the vote is anonymous or not."""
  anonymous: Boolean!

  """Return the proposal."""
  proposal: Proposal!

  """Return the step."""
  step: ProposalStep!

  """Return the ranking of the vote (if any)"""
  ranking: Int
}

"""A connection to a list of items."""
type ProposalVoteConnection {
  totalCount: Int!
  creditsLeft: Int
  creditsSpent: Int

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ProposalVoteEdge]
}

"""An edge in a connection."""
type ProposalVoteEdge {
  """The item at the end of the edge."""
  node: ProposalVote!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Ways in which lists of votes can be ordered upon return."""
input ProposalVotesOrder {
  field: VoteOrderField! = PUBLISHED_AT
  direction: OrderDirection! = DESC
}

"""Entities that can be published."""
interface Publishable {
  """The ID of an object"""
  id: ID!

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason
}

"""Root of the schema."""
type Query {
  """The currently authenticated user."""
  viewer: User!

  """Lookup a node by its ID."""
  node(
    """The ID of an object."""
    id: ID!
  ): Node

  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!

  """Lookup projects."""
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int

    """Ordering options for projects returning from the connection."""
    orderBy: ProjectOrder = {field: LATEST, direction: DESC}

    """
    ID of a User to filter by. If non-null, only projects authored by this user will be returned.
    """
    author: ID

    """If provided, searches projects by title."""
    term: String

    """
    ID of a Status to filter by. If non-null, filter projects by statuses.
    """
    status: ID

    """ID of a Theme to filter by. If non-null, filter projects by themes"""
    theme: ID

    """
    ID of a ProjectType to filter by. If non-null, filter projects by types
    """
    type: ID

    """
    ID of a ProjectDistrict to filter by. If non-null, filter projects by district
    """
    district: ID

    """If true, only projects with at least 1 event will be returned."""
    withEventOnly: Boolean = false

    """If true, only projects with public visibility will be returned."""
    onlyPublic: Boolean = false
  ): ProjectConnection!

  """Lookup events."""
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int

    """Ordering options for events returning from the connection."""
    orderBy: EventOrder = {field: START_AT, direction: DESC}

    """
    ID of a Project to filter by. If non-null, only events belonging to the project will be returned.
    """
    project: ID

    """If provided, searches events by title and description."""
    search: String

    """If non-null, filters events by comparing the start date with present."""
    isFuture: Boolean

    """If non-null, filters events with the given theme."""
    theme: ID

    """If non-null, filters events with the given author."""
    author: ID

    """If non-null, filters events with the given author type."""
    userType: ID

    """
    If true, filter the events with registration link or internal registration
    enable, if false  filter the events with both registration type at false
    """
    isRegistrable: Boolean
  ): EventConnection!

  """Lookup users."""
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int

    """Remove super admin from export."""
    superAdmin: Boolean = false
    orderBy: UserOrder = {field: CREATED_AT, direction: DESC}
  ): UserConnection!

  """Lookup themes."""
  themes: [Theme!]!

  """Get the available map tokens"""
  mapTokens: [MapToken!]!

  """Search a particular map token by its provider"""
  mapToken(
    """The map provider"""
    provider: MapTokenProvider!
  ): MapToken

  """Get the current favicon"""
  siteFavicon: SiteImage!

  """Get a site image"""
  siteImage(
    """The site image keyname"""
    keyname: String!
  ): SiteImage

  """Get the current registration form"""
  registrationForm: RegistrationForm

  """Validate the registration credentials"""
  passwordComplexityScore(
    """The username of the user"""
    username: String

    """The email of the user"""
    email: String

    """The password of the user"""
    password: String!
  ): Int

  """Get any connection attempt"""
  connectionAttempt(
    """Email of the user"""
    email: String

    """Date of the attempt"""
    datetime: String

    """Ip address of the user"""
    ipAddress: String
  ): Int

  """Get the contact forms"""
  contactForms: [ContactForm!]
  projectAuthors: [User!]!
  projectTypes(
    """If true, filter the projectTypes only used by the projects"""
    onlyUsedByProjects: Boolean = false
  ): [ProjectType!]!
  userSearch(
    """Filter by displayName."""
    displayName: String = null

    """Return all users except the ones in the array."""
    notInIds: [String] = null

    """If true, retrieve only users that created an event."""
    authorsOfEventOnly: Boolean = false
  ): [User]
  consultationSteps(
    """
    If omitted, returns all consultations steps. If provided, returns the consultation step of the particular id.
    """
    id: ID
  ): [ConsultationStep!]!
  consultations(
    """
    If omitted, returns all consultations. If provided, returns the consultation of the particular id.
    """
    id: ID
  ): [Consultation!]!

  """Lookup groups."""
  groups: [Group!]!

  """Lookup forms."""
  proposalForms: [ProposalForm]!

  """Lookup availables districts on a proposalForm for a given address."""
  availableDistrictsForLocalisation(proposalFormId: ID!, latitude: Float!, longitude: Float!): [ProposalDistrict!]!

  """TO BE REMOVED"""
  contributions(
    """Returns all contributions of the provided consultation."""
    consultation: ID!
  ): [Opinion!]!

  """TO BE REMOVED"""
  question(id: Int!): Question!
  availableQuestionnaires: [Questionnaire!]!

  """List all the district project in the platform."""
  projectDistricts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): ProjectDistrictConnection!

  """List all the contributors in the platform."""
  allContributors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): UserConnection!

  """Return the number of contributions in the platform."""
  allContributions: Int!

  """List all the votes in the platform."""
  votes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): VoteConnection!

  """Get the current shield admin form."""
  shieldAdminForm: ShieldAdminForm!

  """List all SSO Configurations."""
  ssoConfigurations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): InternalSSOConfigurationConnection!

  """List all sections."""
  sections(
    """Filter by contributor of section."""
    user: ID
  ): [Section!]!
}

"""Fetches an object given its ID"""
interface Question {
  """The ID of an object"""
  id: ID!

  """Identifies the question title."""
  title: String!

  """Return responses on this questions."""
  responses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int

    """Get responses with user not confirmed"""
    withNotConfirmedUser: Boolean = false
  ): ResponseConnection!
  number: Int!
  type: QuestionTypeValue!

  """The position of the question"""
  position: Int!
  private: Boolean!
  required: Boolean!
  helpText: String
  description: String
  kind: String!
  slug: String!

  """Return users who answered the question"""
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int

    """Get participant with user not confirmed"""
    withNotConfirmedUser: Boolean = false
  ): ParticipantConnection!

  """The associated logic jumps to this question."""
  jumps(
    """Ordering options for question jumps."""
    orderBy: JumpsOrder = {field: POSITION, direction: ASC}
  ): [LogicJump]

  """The destination of the always jump (the else case) of this question."""
  alwaysJumpDestinationQuestion: Question
}

"""A possible choice of a question."""
type QuestionChoice implements Node {
  """The ID of an object"""
  id: ID!

  """Identifies the question choice title."""
  title: String!

  """Identifies the responses of the question choice."""
  responses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): ResponseConnection!
  description: String
  color: QuestionChoiceColor
  image: Media

  """Return the ranking of the given question choice"""
  ranking: [QuestionChoiceRanking]
}

"""Available colors for a question choice"""
enum QuestionChoiceColor {
  PRIMARY
  SUCCESS
  INFO
  WARNING
  DANGER
}

"""A possible choice of a question"""
input QuestionChoiceInput {
  id: ID
  title: String!
  description: String
  color: QuestionChoiceColor
  image: ID
}

"""The choice ranking"""
type QuestionChoiceRanking {
  """Identifies the position of the choice"""
  position: Int!

  """Identifies the responses of the choice."""
  responses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): ResponseConnection!
}

input QuestionInput {
  """If null, a new question will be created."""
  id: String
  alwaysJumpDestinationQuestion: ID
  title: String!
  type: QuestionTypeValue!
  private: Boolean! = false
  required: Boolean! = false
  helpText: String
  randomQuestionChoices: Boolean
  otherAllowed: Boolean
  validationRule: MultipleChoiceQuestionValidationRuleInput
  choices: [QuestionChoiceInput]
  description: String
  jumps: [LogicJumpInput]
}

"""Value of type of question"""
enum QuestionTypeValue {
  text
  textarea
  editor
  radio
  select
  checkbox
  ranking
  medias
  button
  number
  section
}

"""A questionnaire is a series of questions that users can answer."""
type Questionnaire implements Node {
  """The ID of an object."""
  id: ID!

  """Identifies the questionnaire title."""
  title: String!

  """Whether the user has reply to a questionnaire."""
  userHasReply(
    """The user's login (for example, an email)."""
    login: String!
  ): Boolean!

  """A list of users that have replied to the questionnaire."""
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): UserConnection!

  """The list of questions of the questionnaire."""
  questions: [Question!]!

  """A list of replies to the questionnaire."""
  replies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): ReplyConnection!

  """Expose Primary Key, do not use it, except for testing purpose."""
  _id: ID!
  step: QuestionnaireStep
  anonymousAllowed: Boolean!
  description: String
  multipleRepliesAllowed: Boolean!

  """accept answers or not"""
  contribuable: Boolean!
  phoneConfirmationRequired: Boolean!
  viewerReplies: [Reply!]!
  acknowledgeReplies: Boolean!

  """The questionnaire type"""
  type: QuestionnaireType!
  phoneConfirmation: Boolean!

  """Notify when a response is created for this questionnaire"""
  notifyResponseCreate: Boolean!

  """Notify when a response is updated for this questionnaire"""
  notifyResponseUpdate: Boolean!

  """Notify when a response is deleted for this questionnaire"""
  notifyResponseDelete: Boolean!

  """Results of survey are private"""
  privateResult: Boolean!
  exportResultsUrl: URI!
}

input QuestionnaireAbstractQuestionInput {
  question: QuestionInput!
}

"""A step inside a project."""
type QuestionnaireStep implements Node & Step {
  """The ID of an object"""
  id: ID!

  """When the time interval begins or ends."""
  timeRange: TimeRange!

  """The URL to this resource."""
  url: URI!

  """The title of the step."""
  title: String!

  """The kind of the step"""
  kind: String!

  """The status of the step"""
  status: StepStatus

  """The type of the step"""
  type: String

  """Does the step have a end date ?"""
  timeless: Boolean

  """The introduction text of the step."""
  body: HTML
  footer: String

  """A list of contributor associated with the step."""
  contributors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): UserConnection!
}

"""Available questionnaire types."""
enum QuestionnaireType {
  """Draft are allowed."""
  QUESTIONNAIRE

  """Draft are not allowed."""
  VOTING
}

"""A step inside a project."""
type RankingStep implements Step {
  """The ID of an object"""
  id: ID!

  """When the time interval begins or ends."""
  timeRange: TimeRange!

  """The URL to this resource."""
  url: URI!

  """The title of the step."""
  title: String!

  """The kind of the step"""
  kind: String!

  """The status of the step"""
  status: StepStatus

  """The type of the step"""
  type: String

  """Does the step have a end date ?"""
  timeless: Boolean

  """The introduction text of the step."""
  body: HTML
}

"""Fetches an object given its ID"""
type RegistrationForm implements Node {
  """The ID of an object"""
  id: ID!

  """Does the bottom text is displayed?"""
  bottomTextDisplayed: Boolean!

  """Does the top text is displayed?"""
  topTextDisplayed: Boolean!

  """The bottom text to display"""
  topText: String

  """The bottom text to display"""
  bottomText: String

  """A whitelist of authorized domains that can register"""
  domains: [EmailDomain!]

  """The available questions"""
  questions: [Question!]!
}

input RemoveArgumentVoteInput {
  """The Node ID of the argument to unvote."""
  argumentId: ID!
  clientMutationId: String
}

type RemoveArgumentVotePayload {
  deletedVoteId: ID
  contribution: Argument
  viewer: User!
  clientMutationId: String
}

input RemoveCommentVoteInput {
  """The Node ID of the comment to unvote."""
  commentId: ID!
  clientMutationId: String
}

type RemoveCommentVotePayload {
  deletedVoteId: ID
  contribution: Comment
  viewer: User!
  clientMutationId: String
}

input RemoveContactFormInput {
  """ID of the contact form to delete."""
  id: ID!
  clientMutationId: String
}

type RemoveContactFormPayload {
  """Id of the deleted contact form."""
  deletedContactFormId: ID!
  clientMutationId: String
}

input RemoveOpinionVoteInput {
  """The Node ID of the opinion to unvote."""
  opinionId: ID!
  clientMutationId: String
}

type RemoveOpinionVotePayload {
  deletedVoteId: ID
  contribution: Contribution
  viewer: User!
  clientMutationId: String
}

input RemoveProposalVoteInput {
  """The Node ID of the proposal to unvote."""
  proposalId: ID!

  """The Node ID of the contribuable step."""
  stepId: ID!
  clientMutationId: String
}

type RemoveProposalVotePayload {
  step: ProposalStep!
  proposal: Proposal!
  viewer: User!
  previousVoteId: ID
  clientMutationId: String
}

input RemoveSourceVoteInput {
  """The Node ID of the source to unvote."""
  sourceId: ID!
  clientMutationId: String
}

type RemoveSourceVotePayload {
  deletedVoteId: ID
  contribution: Source
  viewer: User!
  clientMutationId: String
}

"""Represents a type that can be retrieved by a URL."""
type Reply implements Node & Publishable & Draftable & Contribution & UniformResourceLocatable {
  """The ID of an object."""
  id: ID!

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """The responses of the reply."""
  responses: [Response]!

  """The author of the contribution."""
  author: User!

  """Is the object a draft."""
  draft: Boolean!

  """The kind of contribution."""
  kind: String!

  """
  Return the related contribution if the contribution is related to another.
  """
  related: Contribution

  """The URL to this resource."""
  url: URI!
  private: Boolean!

  """The reply status."""
  publicationStatus: ReplyPublicationStatus!

  """Identifies the form where the contribution was submitted."""
  questionnaire: Questionnaire!
  viewerCanUpdate: Boolean!
  viewerCanDelete: Boolean!
}

"""A connection to a list of items."""
type ReplyConnection {
  """Identifies the total count of items in the connection."""
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ReplyEdge]
}

"""An edge in a connection."""
type ReplyEdge {
  """The item at the end of the edge."""
  node: Reply!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Available statuses"""
enum ReplyPublicationStatus {
  """Publicly visible"""
  PUBLISHED

  """Draft, not publicly visible, only showed for his author."""
  DRAFT
}

"""A connection to a list of items."""
type ReportConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ReportEdge]
}

"""An edge in a connection."""
type ReportEdge {
  """The item at the end of the edge."""
  node: Reporting!

  """A cursor for use in pagination."""
  cursor: String!
}

"""A reportable"""
interface Reportable {
  """Does the viewer already submitted a report ?"""
  viewerHasReport: Boolean!

  """The reportings related to the reportable."""
  reportings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
    orderBy: ReportingOrder = {field: CREATED_AT, direction: DESC}
  ): ReportingConnection!
}

"""A report"""
type Reporting implements Contribution & ContributionWithAuthor {
  """The ID of an object"""
  id: ID!

  """The kind of contribution."""
  kind: String!

  """
  Return the related contribution if the contribution is related to another.
  """
  related: Contribution

  """Url of the contribution"""
  url: URI!

  """The author of the contribution."""
  author: User!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """The escaped content of the argument."""
  bodyText: String!

  """Kind of report."""
  type: ReportingType!

  """The content of the argument."""
  body: String!
}

"""A connection to a list of items."""
type ReportingConnection {
  """Identifies the total count of items in the connection."""
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ReportingEdge]
}

"""An edge in a connection."""
type ReportingEdge {
  """The item at the end of the edge."""
  node: Reporting!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Ways in which lists of reportings can be ordered upon return."""
input ReportingOrder {
  field: ReportingOrderField! = CREATED_AT
  direction: OrderDirection! = DESC
}

"""Properties by which report connections can be ordered"""
enum ReportingOrderField {
  """Allows ordering a list of reports by when they were created."""
  CREATED_AT
}

"""Type of reporting"""
enum ReportingType {
  """The associated contribution has been flagged as sexual content"""
  SEX

  """The associated contribution has been flagged as offending content"""
  OFF

  """The associated contribution has been flagged as spam"""
  SPAM

  """The associated contribution has been flagged as erroneous"""
  ERROR

  """The associated contribution has been flagged as off topic"""
  OFF_TOPIC
}

input RequestUserArchiveInput {
  clientMutationId: String
}

type RequestUserArchivePayload {
  viewer: User!
  clientMutationId: String
}

"""A requirement"""
interface Requirement {
  """The ID of an object"""
  id: ID!

  """Does the viewer meets the requirement ?"""
  viewerMeetsTheRequirement: Boolean!
}

"""A connection to a list of items."""
type RequirementConnection {
  """Identifies the total count of items in the connection."""
  totalCount: Int!

  """Does the viewer meets all the requirements ?"""
  viewerMeetsTheRequirements: Boolean!

  """The reason for requirements."""
  reason: String

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [RequirementEdge]
}

"""An edge in a connection."""
type RequirementEdge {
  """The item at the end of the edge."""
  node: Requirement!

  """A cursor for use in pagination."""
  cursor: String!
}

interface RequirementStep {
  """The requirements to vote on this step."""
  requirements(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): RequirementConnection!
}

"""A response to a question."""
interface Response {
  """Nullable ID in case of empty response."""
  id: String

  """Identifies the question of the response."""
  question: Question!
}

"""A connection to a list of items."""
type ResponseConnection {
  """Identifies the total count of items in the connection."""
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ResponseEdge]
}

"""An edge in a connection."""
type ResponseEdge {
  """The item at the end of the edge."""
  node: Response!

  """A cursor for use in pagination."""
  cursor: String!
}

"""A response"""
input ResponseInput {
  """If related to a value question"""
  value: JSON

  """The question id"""
  question: String!

  """If related to a media question"""
  medias: [ID!]
}

"""A SSO Configuration"""
interface SSOConfiguration {
  """The ID of an object"""
  id: ID!

  """The name of configured SSO."""
  name: String!

  """Does this configuration is enabled?"""
  enabled: Boolean!

  """Profile URL on the SSO side."""
  profileUrl: URI

  """Color in hexadecimal of SSO button."""
  buttonColor: Color!

  """Color in hexadecimal of label SSO button."""
  labelColor: Color!
}

"""Possible environment for a SSO Configuration."""
enum SSOEnvironment {
  """Integration mode for resource owner validation."""
  TESTING

  """Production mode."""
  PRODUCTION
}

"""A section"""
type Section implements Node & UniformResourceLocatable {
  """The URL to this resource."""
  url: URI!

  """The id of the section."""
  id: ID!

  """Get the associated consultation of this section"""
  consultation: Consultation

  """The slug of the section."""
  slug: String!

  """The title of the section."""
  title: String!

  """The color of the section."""
  color: String!

  """The subtitle of the section."""
  subtitle: String

  """The description of the section."""
  description: HTML
  contributionsCount: Int!
  contributionConnection(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int

    """Ordering options for contributions returned from the connection."""
    orderBy: ContributionOrder
  ): ContributionConnection!

  """Array of appendix types (possibly empty)."""
  appendixTypes: [SectionAppendixType]

  """Array of subsections (possibly empty)."""
  sections: [Section]
  voteWidgetType: Int!
  commentSystem: Int!
  contribuable: Boolean!
  versionable: Boolean!
  sourceable: Boolean!
  linkable: Boolean!
  votesHelpText: String
  votesThreshold: Int
  votesThresholdHelpText: String
  defaultOrderBy: SectionOrderBy
  opinions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int

    """Filter by author of opinion."""
    author: ID

    """Ordering options for followers returning from the connection"""
    orderBy: OpinionOrder = {field: PUBLISHED_AT, direction: DESC}

    """Include trashed opinion or not"""
    includeTrashed: Boolean = false
  ): OpinionConnection!
}

"""A section"""
type SectionAppendixType {
  id: String
  position: Int!
  title: String
  helpText: String
}

enum SectionOrderBy {
  positions
  random
  last
  old
  favorable
  votes
  comments
}

"""A section is just a title in a quiz without any possible answer."""
type SectionQuestion implements Question & Node {
  """The ID of an object"""
  id: ID!

  """Identifies the question title."""
  title: String!

  """Return responses on this questions."""
  responses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int

    """Get responses with user not confirmed"""
    withNotConfirmedUser: Boolean = false
  ): ResponseConnection!
  number: Int!
  type: QuestionTypeValue!

  """The position of the question"""
  position: Int!
  private: Boolean!
  required: Boolean!
  helpText: String
  description: String
  kind: String!
  slug: String!

  """Return users who answered the question"""
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int

    """Get participant with user not confirmed"""
    withNotConfirmedUser: Boolean = false
  ): ParticipantConnection!

  """The associated logic jumps to this question."""
  jumps(
    """Ordering options for question jumps."""
    orderBy: JumpsOrder = {field: POSITION, direction: ASC}
  ): [LogicJump]

  """The destination of the always jump (the else case) of this question."""
  alwaysJumpDestinationQuestion: Question
}

input SelectProposalInput {
  """The step where the proposal is selected"""
  stepId: String!

  """The proposal ID to select."""
  proposalId: ID!

  """The selection status."""
  statusId: String
  clientMutationId: String
}

type SelectProposalPayload {
  proposal: Proposal!
  clientMutationId: String
}

"""A budget contribution"""
type Selection {
  step: SelectionStep!
  status: Status
}

"""A budget contribution"""
type SelectionStep implements Node & Step & ProposalStep & RequirementStep {
  """The ID of an object"""
  id: ID!

  """When the time interval begins or ends."""
  timeRange: TimeRange!

  """The URL to this resource."""
  url: URI!

  """The title of the step."""
  title: String!

  """The kind of the step"""
  kind: String!

  """The status of the step"""
  status: StepStatus

  """The type of the step"""
  type: String

  """Does the step have a end date ?"""
  timeless: Boolean

  """The introduction text of the step."""
  body: HTML

  """A list of proposals associated to the object."""
  proposals(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int

    """
    If non-null, filters proposals with the given trashed status (eg: visible, not visible).
    """
    trashedStatus: ProposalTrashedStatus = NOT_TRASHED

    """
    ID of a User to filter by. If non-null, only proposals authored by this user will be returned.
    """
    author: ID

    """Ordering options for proposals returned from the connection."""
    orderBy: ProposalOrder = {field: PUBLISHED_AT, direction: ASC}

    """
    ID of a ProposalDistrict to filter by. If non-null, filters proposals with the given district.
    """
    district: ID

    """
    ID of a UserType to filter by. If non-null, filters proposals with the given type of author.
    """
    userType: ID

    """
    ID of a ProposalCategory to filter by. If non-null, filters proposals with the given category.
    """
    category: ID

    """
    ID of a ProposalStatus to filter by. If non-null, filters proposals with the given status.
    """
    status: ID

    """
    ID of a Theme to filter by. If non-null, filters proposals with the given theme.
    """
    theme: ID

    """If non-null, filters proposals with the given string to look for."""
    term: String

    """Affiliation options for proposals returned from the connection."""
    affiliations: [ProposalAffiliation]

    """(ROLE_SUPER_ADMIN only) Select also unpublished proposals."""
    includeUnpublished: Boolean = false

    """Select also draft proposals"""
    includeDraft: Boolean = false
  ): ProposalConnection!

  """The viewer unpublished proposals (only visible by viewer)."""
  viewerProposalsUnpublished(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): ProposalConnection

  """The requirements to vote on this step."""
  requirements(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): RequirementConnection!
  project: Project
  votesLimit: Int
  budget: Int
  voteType: ProposalStepVoteType!
  votable: Boolean!
  votesHelpText: String
  voteThreshold: Int
  statuses: [Status!]!
  defaultSort: String
  open: Boolean!

  """If enabled, allow voters to order their votes by preferences."""
  votesRanking: Boolean!

  """A list of viewer votes associated with the step."""
  viewerVotes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
    orderBy: ProposalVotesOrder = {direction: DESC}
  ): ProposalVoteConnection!
  form: ProposalForm!
  position: Int!

  """
  Only one selection step inside a project can have realisation steps, true if this one
  """
  allowingProgressSteps: Boolean!

  """A list of contributor associated with the consultation."""
  contributors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): UserConnection!
}

input SendContactFormInput {
  """The ID of the contact form."""
  idContactForm: ID!

  """The title of the contact form."""
  title: String!

  """The body of the contact form."""
  body: String!

  """The email of the contact."""
  email: String!

  """The captcha of the form."""
  name: String

  """The captcha verification."""
  captcha: String
  clientMutationId: String
}

type SendContactFormPayload {
  """The contact form submited."""
  contactForm: ContactForm!
  clientMutationId: String
}

input SetEvaluationFormInProposalFormInput {
  proposalFormId: ID!
  evaluationFormId: ID
  clientMutationId: String
}

type SetEvaluationFormInProposalFormPayload {
  proposalForm: ProposalForm!
  clientMutationId: String
}

type ShieldAdminForm {
  """Is shield mode is active?"""
  shieldMode: Boolean!

  """Introduction text to show in shield page."""
  introduction: HTML

  """Image to show in shield page."""
  media: Media
}

"""A simple question"""
type SimpleQuestion implements Question & Node {
  """The ID of an object"""
  id: ID!

  """Identifies the question title."""
  title: String!

  """Return responses on this questions."""
  responses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int

    """Get responses with user not confirmed"""
    withNotConfirmedUser: Boolean = false
  ): ResponseConnection!
  number: Int!
  type: QuestionTypeValue!

  """The position of the question"""
  position: Int!
  private: Boolean!
  required: Boolean!
  helpText: String
  description: String
  kind: String!
  slug: String!

  """Return users who answered the question"""
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int

    """Get participant with user not confirmed"""
    withNotConfirmedUser: Boolean = false
  ): ParticipantConnection!

  """The associated logic jumps to this question."""
  jumps(
    """Ordering options for question jumps."""
    orderBy: JumpsOrder = {field: POSITION, direction: ASC}
  ): [LogicJump]

  """The destination of the always jump (the else case) of this question."""
  alwaysJumpDestinationQuestion: Question
}

"""A site image"""
type SiteImage {
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!

  """A unique key to distinguish site image"""
  keyname: String!

  """Does the site image is currently enabled?"""
  isEnabled: Boolean!

  """The position of the site image"""
  position: Int!

  """The category of the site image"""
  category: String!

  """The associated media of the site image"""
  media: Media
}

"""A source"""
type Source implements Node & Publishable & Contribution & Reportable & Trashable & ContributionWithAuthor & EditableContribution & UniformResourceLocatable {
  """The ID of an object"""
  id: ID!

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason

  """The kind of contribution."""
  kind: String!

  """
  Return the related contribution if the contribution is related to another.
  """
  related: Contribution

  """The URL to this resource."""
  url: URI!

  """Does the viewer already submitted a report ?"""
  viewerHasReport: Boolean!

  """The reportings related to the reportable."""
  reportings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
    orderBy: ReportingOrder = {field: CREATED_AT, direction: DESC}
  ): ReportingConnection!

  """Whether or not the contribution is trashed."""
  trashed: Boolean!

  """Identifies the trashed visibility."""
  trashedStatus: TrashableStatus

  """Identifies the moment the moderator trashed the contribution."""
  trashedAt: DateTime

  """Identifies the reason why the moderator trashed the contribution."""
  trashedReason: String

  """The author of the contribution."""
  author: User!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime
  step: ConsultationStep!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  votes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): SourceVoteConnection
  contribuable: Boolean!
  viewerHasVote: Boolean!
  viewerVote: SourceVote
  category: SourceCategory

  """The link of the source."""
  link: URI!

  """The title of the source."""
  title: String!

  """The content of the source."""
  body: String!
}

"""A source category."""
type SourceCategory {
  id: ID!
  title: String!
}

"""A connection to a list of items."""
type SourceConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [SourceEdge]
}

"""An edge in a connection."""
type SourceEdge {
  """The item at the end of the edge."""
  node: Source!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Ways in which source connections can be ordered."""
input SourceOrder {
  """The field in which to order nodes by."""
  field: SourceOrderField!

  """The direction in which to order nodes."""
  direction: OrderDirection! = ASC
}

"""Properties by which source connections can be ordered"""
enum SourceOrderField {
  """Allows ordering a list of sources by when they were published."""
  PUBLISHED_AT

  """Allows ordering a list of sources by the number of votes it have."""
  VOTES
}

"""Entities that can be published."""
type SourceVote implements Vote & Publishable {
  """The ID of an object"""
  id: ID!

  """The date of the vote."""
  createdAt: DateTime!

  """The author of the contribution."""
  author: User

  """The contribution that was voted."""
  related: Contribution

  """Returns 'sourceVote'."""
  kind: String!

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason
}

"""A connection to a list of items."""
type SourceVoteConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [SourceVoteEdge]
}

"""An edge in a connection."""
type SourceVoteEdge {
  """The item at the end of the edge."""
  node: SourceVote!

  """A cursor for use in pagination."""
  cursor: String!
}

"""A sourceable"""
interface Sourceable {
  id: ID!
  contribuable: Boolean!
  step: ConsultationStep!

  """The sources related to the sourceable."""
  sources(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
    orderBy: SourceOrder = {field: PUBLISHED_AT, direction: DESC}
  ): SourceConnection!

  """
  The viewer unpublished sources related to the sourceable (only visible by viewer).
  """
  viewerSourcesUnpublished(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): SourceConnection!

  """The available sources categories of to the sourceable."""
  availableSourceCategories: [SourceCategory]
}

type Status {
  id: ID!
  name: String!
  color: StatusColor!
}

"""Different status type"""
enum StatusColor {
  info
  primary
  success
  warning
  danger
  default
}

"""A step inside a project."""
interface Step {
  """The ID of an object"""
  id: ID!

  """When the time interval begins or ends."""
  timeRange: TimeRange!

  """The URL to this resource."""
  url: URI!

  """The title of the step."""
  title: String!

  """The kind of the step"""
  kind: String!

  """The status of the step"""
  status: StepStatus

  """The type of the step"""
  type: String

  """Does the step have a end date ?"""
  timeless: Boolean

  """The introduction text of the step."""
  body: HTML
}

"""Step statuses"""
enum StepStatus {
  """The step has not started yet."""
  FUTURE

  """The step is currently open."""
  OPENED

  """The step has been closed."""
  CLOSED
}

"""A object style."""
type Style {
  id: ID

  """Specify if the style is activated or not."""
  enabled: Boolean!

  """The color value in hexadecimal format for the border or background."""
  color: Color

  """The value of the opacity of the border or the background."""
  opacity: Float

  """The value of the border size."""
  size: Int
}

"""3 possible values for a subscription."""
enum SubscriptionTypeValue {
  """Get all notifications for this subscription"""
  ALL

  """Get essentials notifications for this subscription"""
  ESSENTIAL

  """Get minimal notifications for this subscription"""
  MINIMAL
}

"""A theme"""
type Theme implements UniformResourceLocatable {
  """The URL to this resource."""
  url: URI!
  id: ID!
  title: String!
}

"""A time range that contains start date and end date."""
type TimeRange {
  """The start date of the time range."""
  startAt: DateTime

  """The end date of the time range"""
  endAt: DateTime
}

"""Entities that can be trashed."""
interface Trashable {
  """Whether or not the contribution is trashed."""
  trashed: Boolean!

  """Identifies the trashed visibility."""
  trashedStatus: TrashableStatus

  """Identifies the moment the moderator trashed the contribution."""
  trashedAt: DateTime

  """Identifies the reason why the moderator trashed the contribution."""
  trashedReason: String
}

"""Different trashable status."""
enum TrashableStatus {
  """Content is not visible."""
  INVISIBLE

  """Content is visible."""
  VISIBLE
}

"""An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string."""
scalar URI

input UnfollowOpinionInput {
  """The opinion id"""
  opinionId: ID

  """Array of opinion id"""
  idsOpinion: [ID!]
  clientMutationId: String
}

type UnfollowOpinionPayload {
  opinion: Opinion
  unfollowerId: ID
  clientMutationId: String
}

input UnfollowProposalInput {
  """The proposal id"""
  proposalId: ID

  """Array of proposal id"""
  idsProposal: [ID!]
  clientMutationId: String
}

type UnfollowProposalPayload {
  proposal: Proposal
  unfollowerId: ID
  clientMutationId: String
}

"""Represents a type that can be retrieved by a URL on the admin."""
interface UniformResourceAdminLocatable {
  """The admin URL to this resource."""
  adminUrl: URI!
}

"""Represents a type that can be retrieved by a URL."""
interface UniformResourceLocatable {
  """The URL to this resource."""
  url: URI!
}

input UnselectProposalInput {
  """The step where the proposal is selected"""
  stepId: String!

  """The proposal ID to remove from step."""
  proposalId: ID!
  clientMutationId: String
}

type UnselectProposalPayload {
  proposal: Proposal!
  clientMutationId: String
}

input UpdateContactFormInput {
  """ID of the contact form to update."""
  id: ID!

  """Title of the contact form."""
  title: String!

  """Interlocutor of the contact form."""
  interlocutor: String!

  """Description of the contact form."""
  body: String

  """Email of the interlocutor of the contact form."""
  email: String!
  clientMutationId: String
}

type UpdateContactFormPayload {
  """The contact form updated."""
  contactForm: ContactForm
  clientMutationId: String
}

input UpdateContactPageInput {
  """The title of the contact page."""
  title: String

  """The description of the contact page."""
  description: HTML

  """The picto of the contact page."""
  picto: ID

  """The metadescription of the contact page."""
  metadescription: String

  """The customcode of the contact page."""
  customcode: String
  clientMutationId: String
}

type UpdateContactPagePayload {
  """The title of the contact page."""
  title: String!

  """The description of the contact page."""
  description: HTML

  """The picto of the contact page."""
  picto: SiteImage

  """The metadescription of the contact page."""
  metadescription: String

  """The customcode of the contact page."""
  customcode: String
  clientMutationId: String
}

input UpdateFollowOpinionInput {
  """The opinion id"""
  opinionId: ID!
  notifiedOf: SubscriptionTypeValue!
  clientMutationId: String
}

type UpdateFollowOpinionPayload {
  follower: Follower
  followerEdge: FollowerEdge
  opinion: Opinion
  clientMutationId: String
}

input UpdateFollowProposalInput {
  """The proposal id"""
  proposalId: ID!
  notifiedOf: SubscriptionTypeValue!
  clientMutationId: String
}

type UpdateFollowProposalPayload {
  follower: Follower
  followerEdge: FollowerEdge
  proposal: Proposal
  clientMutationId: String
}

input UpdateGroupInput {
  groupId: ID!
  title: String!
  description: String
  clientMutationId: String
}

type UpdateGroupPayload {
  group: Group!
  clientMutationId: String
}

input UpdateProfileInput {
  username: String
  clientMutationId: String
}

input UpdateProfilePasswordInput {
  """The current password"""
  current_password: String!

  """The new password"""
  new: String!
  clientMutationId: String
}

type UpdateProfilePasswordPayload {
  """The user who just have been updated"""
  user: User!

  """The error"""
  error: String
  clientMutationId: String
}

type UpdateProfilePayload {
  """The viewer"""
  viewer: User!
  clientMutationId: String
}

input UpdateProfilePersonalDataInput {
  """
  (ROLE_SUPER_ADMIN only) the user to update, if not provided the viewer is updated.
  """
  userId: ID

  """Your firstname"""
  firstname: String

  """Your lastname"""
  lastname: String

  """Your gender"""
  gender: GenderValue

  """Your phone number"""
  phone: String

  """Your address"""
  address: String

  """Your complementary address"""
  address2: String

  """Your city"""
  city: String

  """Your zipcode"""
  zipCode: String

  """Your date of birth"""
  dateOfBirth: String

  """Is your phone confirmed ?"""
  phoneConfirmed: Boolean

  """Your email"""
  email: String
  clientMutationId: String
}

type UpdateProfilePersonalDataPayload {
  """The user who just have been updated"""
  user: User!
  clientMutationId: String
}

input UpdateProfilePublicDataInput {
  """
  (ROLE_SUPER_ADMIN only) the user to update, if not provided the viewer is updated.
  """
  userId: ID

  """Your username"""
  username: String!

  """Your user type"""
  userType: ID

  """Your biography"""
  biography: String

  """Your neighborhood"""
  neighborhood: String

  """Your website"""
  websiteUrl: URI

  """Your linkedIn"""
  linkedInUrl: String

  """Your facebook"""
  facebookUrl: String

  """Your twitter"""
  twitterUrl: String

  """Do you want to be indexed in web search engine ?"""
  profilePageIndexed: Boolean

  """Current media id"""
  media: ID
  clientMutationId: String
}

type UpdateProfilePublicDataPayload {
  """The user who just have been updated"""
  user: User!
  clientMutationId: String
}

input UpdateProjectDistrictInput {
  id: ID!

  """The new name of the district."""
  name: String!

  """A GeoJSON format to display in map after."""
  geojson: GeoJSON

  """Should I display this on map?"""
  displayedOnMap: Boolean = false

  """The border style attached to this district."""
  border: BorderStyleInput

  """The background style attached to this district."""
  background: BackgroundStyleInput
}

input UpdateProjectInput {
  """The project's ID"""
  id: ID!

  """The project's title"""
  title: String!

  """The project's authors"""
  authors: [ID!]!

  """The project's opinion term"""
  opinionTerm: Int!

  """The project's type"""
  projectType: String
  clientMutationId: String
}

type UpdateProjectPayload {
  """The created project"""
  project: Project
  clientMutationId: String
}

input UpdateProposalFormInput {
  proposalFormId: ID!
  title: String
  description: String
  summaryHelpText: String
  illustrationHelpText: String
  usingThemes: Boolean
  themeMandatory: Boolean
  themeHelpText: String
  usingDistrict: Boolean
  districtMandatory: Boolean
  commentable: Boolean
  costable: Boolean
  districtHelpText: String
  usingCategories: Boolean
  categoryMandatory: Boolean
  categoryHelpText: String
  usingAddress: Boolean
  proposalInAZoneRequired: Boolean
  titleHelpText: String
  descriptionHelpText: String
  addressHelpText: String
  latMap: Float
  lngMap: Float
  zoomMap: Int
  categories: [ProposalCategoryInput!]
  districts: [DistrictInput!]
  questions: [QuestionnaireAbstractQuestionInput!]
  allowAknowledge: Boolean

  """Proposal form is type of Proposal or Question"""
  isProposalForm: Boolean

  """Proposal form using description field"""
  usingDescription: Boolean

  """Proposal form using illustration field"""
  usingIllustration: Boolean

  """Proposal form using summary field"""
  usingSummary: Boolean
  suggestingSimilarProposals: Boolean

  """Proposal form is description field is mandatory or not"""
  descriptionMandatory: Boolean
  clientMutationId: String
}

input UpdateProposalFormNotificationsConfigurationInput {
  proposalFormId: ID!
  onCreate: Boolean!
  onUpdate: Boolean!
  onDelete: Boolean!
  onCommentCreate: Boolean!
  onCommentUpdate: Boolean!
  onCommentDelete: Boolean!
  clientMutationId: String
}

type UpdateProposalFormNotificationsConfigurationPayload {
  proposalForm: ProposalForm!
  clientMutationId: String
}

type UpdateProposalFormPayload {
  proposalForm: ProposalForm!
  clientMutationId: String
}

input UpdateProposalFusionInput {
  """The proposal to update."""
  proposalId: ID!

  """Proposal ids that are merged."""
  fromProposals: [ID!]!
  clientMutationId: String
}

type UpdateProposalFusionPayload {
  """The updated proposal"""
  proposal: Proposal

  """The proposals that have been removed from the fusion."""
  removedMergedFrom: [Proposal]!
  clientMutationId: String
}

input UpdateProposalVotesInput {
  """The step."""
  step: ID!

  """The votes."""
  votes: [VoteInput!]!
  clientMutationId: String
}

type UpdateProposalVotesPayload {
  step: ProposalStep!
  clientMutationId: String
}

input UpdateQuestionnaireConfigurationInput {
  questionnaireId: ID!

  """The new title of the questionnaire."""
  title: String

  """The new description of the questionnaire."""
  description: String

  """Do we notify when a response is created?"""
  notifyResponseCreate: Boolean

  """Do we notify when a response is updated?"""
  notifyResponseUpdate: Boolean

  """Do we notify when a response is deleted?"""
  notifyResponseDelete: Boolean

  """The new list of available questions for this questionnaire"""
  questions: [QuestionnaireAbstractQuestionInput!]
  clientMutationId: String
}

type UpdateQuestionnaireConfigurationPayload {
  questionnaire: Questionnaire
  clientMutationId: String
}

input UpdateQuestionnaireParametersInput {
  questionnaireId: ID!
  acknowledgeReplies: Boolean
  anonymousAllowed: Boolean
  multipleRepliesAllowed: Boolean
  phoneConfirmation: Boolean
  privateResult: Boolean
  clientMutationId: String
}

type UpdateQuestionnaireParametersPayload {
  questionnaire: Questionnaire
  clientMutationId: String
}

input UpdateRegistrationFormQuestionsInput {
  questions: [QuestionnaireAbstractQuestionInput!]
  clientMutationId: String
}

type UpdateRegistrationFormQuestionsPayload {
  registrationForm: RegistrationForm
  clientMutationId: String
}

input UpdateReplyInput {
  """The id of the reply"""
  replyId: ID!

  """The responses to the questionnaire questions"""
  responses: [ResponseInput]

  """If true will create a draft reply."""
  draft: Boolean! = false
  clientMutationId: String
}

type UpdateReplyPayload {
  """Update a reply"""
  reply: Reply
  clientMutationId: String
}

input UpdateRequirementInput {
  """The Node ID of the requirement to modify."""
  requirement: ID!

  """The updated value of the requirement."""
  value: Boolean!
  clientMutationId: String
}

type UpdateRequirementPayload {
  viewer: User
  requirement: Requirement
  clientMutationId: String
}

type UpdateShieldAdminFormPayload {
  """The shield admin form."""
  shieldAdminForm: ShieldAdminForm!
  clientMutationId: String
}

input UpdateUserAccountInput {
  userId: ID!

  """Unattended roles as array."""
  roles: [UserRole]
  locked: Boolean
  vip: Boolean
  enabled: Boolean
  clientMutationId: String
}

type UpdateUserAccountPayload {
  user: User!
  clientMutationId: String
}

"""A user is an individual's account."""
type User implements Node & UniformResourceLocatable {
  """The ID of an object."""
  id: ID!

  """The URL to this resource."""
  url: URI!

  """The user's public name."""
  username: String

  """Whether or not this user is the authenticated user."""
  isViewer: Boolean!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """A URL pointing to the user's Facebook account."""
  facebookUrl: URI

  """A URL pointing to the user's Twitter account."""
  twitterUrl: URI

  """A URL pointing to the user's LinkedIn account."""
  linkedInUrl: URI

  """A URL pointing to the user's public website/blog."""
  websiteUrl: URI

  """The user's public profile biography."""
  biography: String

  """Identifies the date and time when this user account was deleted."""
  deletedAccountAt: DateTime

  """The type of the person."""
  userType: UserType

  """The responses answered by user."""
  responses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): ResponseConnection!

  """The user's personal email."""
  email: Email

  """Whether or not this user consent internal communication."""
  consentInternalCommunication: Boolean

  """The user's public avatar URL."""
  avatarUrl: URI

  """Whether or not this user has a confirmed account."""
  enabled: Boolean!

  """Expose Primary Key, do not use it, except for testing purpose."""
  _id: ID!

  """The user's public avatar file."""
  media: Media

  """The user's public profile name."""
  displayName: String!

  """Whether or not this user is a VIP."""
  vip: Boolean!

  """The user's slug (unique)."""
  slug: String!

  """Last connection of the user."""
  lastLogin: DateTime

  """A user notifications preferences"""
  notificationsConfiguration: UserNotificationsConfiguration!
  locked: Boolean!
  phoneConfirmed: Boolean!
  phoneConfirmationSentAt: DateTime
  gender: GenderValue
  firstname: String
  lastname: String
  dateOfBirth: DateTime

  """Unattended roles as array."""
  roles: [UserRole!]!

  """Array of roles converted and translated to string."""
  rolesText: String

  """Is the personal archive of the user has been deleted"""
  isArchiveDeleted: Boolean!

  """Is the personal archive of the user is ready?"""
  isArchiveReady: Boolean!

  """
  Is the personal archive of the user is being asked for the first time?
  """
  firstArchive: Boolean!
  address: String
  address2: String
  zipCode: String
  city: String
  phone: String
  googleId: String
  facebookId: String
  samlId: String

  """Get all sources of the user"""
  sources(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): SourceConnection!
  opinionVotesCount: Int!
  opinionVersionsCount: Int!
  argumentsCount: Int!
  argumentVotesCount: Int!

  """Get all proposals of the user."""
  proposals(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): ProposalConnection!
  proposalVotesCount: Int!

  """Get all comment votes of the user."""
  commentVotes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): CommentVoteConnection!

  """
  Provisional number of contributions who will be totally deleted if the user chose to delete his account.
  """
  contributionsToDeleteCount: Int!

  """A list of replies associated to the user."""
  replies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): ReplyConnection!

  """Get all comments of the user."""
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): CommentConnection!

  """Whether or not this user consent external communication."""
  consentExternalCommunication: Boolean!

  """Array of proposals followed by current user."""
  followingProposals(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 32

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int

    """Ordering options for followers returning from the connection"""
    orderBy: String
  ): ProposalConnection!

  """Array of opinions followed by current user."""
  followingOpinions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int

    """Ordering options for followers returning from the connection"""
    orderBy: String
  ): OpinionConnection!

  """Array of opinions by current user."""
  opinions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first n elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): OpinionConnection!

  """Total of contributions count"""
  contributionsCount: Int!

  """Whether or not this user profile page is indexed."""
  profilePageIndexed: Boolean

  """Your localisation"""
  neighborhood: String
  proposalVotes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
    orderBy: ProposalVotesOrder = {field: PUBLISHED_AT, direction: DESC}
    stepId: ID

    """(ROLE_SUPER_ADMIN only) Select also unpublished votes."""
    includeUnpublished: Boolean = false
  ): ProposalVoteConnection!

  """Get all medias the user has published."""
  medias: [Media]!

  """Get all votes of the user."""
  votes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): VoteConnection!

  """Get all groups where the user is."""
  groups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): GroupConnection!

  """Get all reports the user has done."""
  reports(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): ReportConnection!

  """Get all events the user has created."""
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
    orderBy: EventOrder = {field: START_AT, direction: DESC}
  ): EventConnection!

  """Return the user's contributions of the type requested."""
  contributions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int

    """Type of contribustion requested"""
    type: ContributionType
  ): ContributionConnection!

  """Is user subscribed to the newsletter ?"""
  isSubscribedToNewsLetter: Boolean!

  """When the user subscribed to the newsletter."""
  subscribedToNewsLetterAt: DateTime

  """Has the user confirmed his email address ?"""
  isEmailConfirmed: Boolean

  """When the user email confirmation was sent."""
  emailConfirmationSentAt: DateTime

  """The arguments created by user."""
  arguments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): ArgumentConnection!

  """Get all projects the user has created."""
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first n elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): ProjectConnection!
}

"""A connection to a list of items."""
type UserConnection {
  """Identifies the total count of items in the connection."""
  totalCount: Int!

  """
  Identifies the total count of anonymous items in the connection. (Not fetched from connection)
  """
  anonymousCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [UserEdge]
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

"""A business-level error."""
type UserError {
  """The reason which caused the error."""
  message: String

  """Path to input field which caused the error."""
  field: [String!]
}

"""A user's notifications configuration"""
type UserNotificationsConfiguration {
  """
  A boolean representing if the user wants to receive notifications by mail when someone commented his proposal
  """
  onProposalCommentMail: Boolean!
}

"""Ways in which lists of users can be ordered upon return."""
input UserOrder {
  """The field to order users by."""
  field: UserOrderField! = CREATED_AT

  """The ordering direction."""
  direction: OrderDirection! = DESC
}

"""Properties by which users connections can be ordered"""
enum UserOrderField {
  """Allows ordering a list of users by when they were created."""
  CREATED_AT
}

"""3 possible values"""
enum UserRole {
  """Represents a user."""
  ROLE_USER

  """Represents an administrator."""
  ROLE_ADMIN

  """Represents Cap Collectif account."""
  ROLE_SUPER_ADMIN
}

"""A type of person"""
type UserType {
  """The id of the type."""
  id: ID!

  """The name of the type."""
  name: String!
}

"""A response"""
type ValueResponse implements Response {
  """Nullable ID in case of empty response."""
  id: String

  """The question."""
  question: Question!

  """The response value which can be a string or a JSON."""
  value: String

  """The response value formatted."""
  formattedValue: String
}

"""A version of contribution"""
type Version implements Node & Contribution & Sourceable & Reportable & Publishable & Argumentable & Trashable & ContributionWithAuthor & EditableContribution & UniformResourceLocatable {
  """The ID of an object"""
  id: ID!

  """The kind of contribution."""
  kind: String!

  """
  Return the related contribution if the contribution is related to another.
  """
  related: Contribution

  """The URL to this resource."""
  url: URI!
  contribuable: Boolean!
  step: ConsultationStep!

  """The sources related to the sourceable."""
  sources(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
    orderBy: SourceOrder = {field: PUBLISHED_AT, direction: DESC}
  ): SourceConnection!

  """
  The viewer unpublished sources related to the sourceable (only visible by viewer).
  """
  viewerSourcesUnpublished(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
  ): SourceConnection!

  """The available sources categories of to the sourceable."""
  availableSourceCategories: [SourceCategory]

  """Does the viewer already submitted a report ?"""
  viewerHasReport: Boolean!

  """The reportings related to the reportable."""
  reportings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
    orderBy: ReportingOrder = {field: CREATED_AT, direction: DESC}
  ): ReportingConnection!

  """The arguments related to the argumentable."""
  arguments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
    orderBy: ArgumentOrder = {field: PUBLISHED_AT, direction: DESC}

    """If provided, returns the arguments of this particular type."""
    type: ArgumentValue

    """The connection will return the trashed results too."""
    includeTrashed: Boolean = false
  ): ArgumentConnection!

  """The unpublished arguments of to the viewer."""
  viewerArgumentsUnpublished(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int

    """If provided, returns the arguments of this particular type."""
    type: ArgumentValue
  ): ArgumentConnection

  """Whether or not the contribution is trashed."""
  trashed: Boolean!

  """Identifies the trashed visibility."""
  trashedStatus: TrashableStatus

  """Identifies the moment the moderator trashed the contribution."""
  trashedAt: DateTime

  """Identifies the reason why the moderator trashed the contribution."""
  trashedReason: String

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason

  """The author of the contribution."""
  author: User!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Explenation."""
  comment: String
  votes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the last `n` elements from the list."""
    last: Int
    orderBy: ProposalVotesOrder = {field: PUBLISHED_AT, direction: DESC}

    """Filters vote by value"""
    value: YesNoPairedVoteValue
  ): YesNoPairedVoteConnection!

  """The title of the contribution."""
  title: String!

  """The content of the contribution."""
  body: HTML!

  """The content of the contribution."""
  bodyText: HTML!

  """The section of the parent opinion."""
  section: Section!
  answer: Answer
  parent: Opinion!

  """The viewer vote."""
  viewerVote: OpinionVote
  diff: HTML

  """The related project."""
  project: Project
}

"""A connection to a list of items."""
type VersionConnection {
  """Identifies the total count of items in the connection."""
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [VersionEdge]
}

"""An edge in a connection."""
type VersionEdge {
  """The item at the end of the edge."""
  node: Version!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Ways in which version connections can be ordered."""
input VersionOrder {
  """The field in which to order nodes by."""
  field: VersionOrderField!

  """The ordering direction."""
  direction: OrderDirection! = ASC
}

"""Properties by which version connections can be ordered"""
enum VersionOrderField {
  """Allows ordering a list of versions by when they were published."""
  PUBLISHED_AT

  """Allows ordering a list of versions by the number of votes it have."""
  VOTES

  """
  Allows ordering a list of versions by the number of arguments it have.
  """
  ARGUMENTS

  """Allows ordering a list of versions by the number of votes ok it have."""
  VOTES_OK

  """Allows ordering a list of versions randomly."""
  RANDOM
}

"""Entities that can be published."""
type VersionVote implements YesNoPairedVote & Publishable & Vote {
  """The ID of an object"""
  id: ID!

  """The date of the vote."""
  createdAt: DateTime!

  """The author of the contribution."""
  author: User

  """The contribution that was voted."""
  related: Contribution

  """Returns 'vote'."""
  kind: String!

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason
  value: YesNoPairedVoteValue!
}

interface Vote {
  id: ID!

  """The date of the vote."""
  createdAt: DateTime!

  """The author of the contribution."""
  author: User

  """The contribution that was voted."""
  related: Contribution

  """Returns Type of vote"""
  kind: String!
}

"""A connection to a list of items."""
type VoteConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [VoteEdge]
}

"""An edge in a connection."""
type VoteEdge {
  """The item at the end of the edge."""
  node: Vote

  """A cursor for use in pagination."""
  cursor: String!
}

"""A vote"""
input VoteInput {
  """The vote id."""
  id: ID!

  """Update the vote privacy."""
  anonymous: Boolean!
}

"""Ways in which lists of votes can be ordered upon return."""
input VoteOrder {
  """The field to order votes by."""
  field: VoteOrderField! = PUBLISHED_AT

  """The ordering direction."""
  direction: OrderDirection! = DESC
}

"""Ordering options for votes returned from the connection."""
enum VoteOrderField {
  PUBLISHED_AT
  POSITION
}

"""Entities that can be published."""
interface YesNoPairedVote {
  """The ID of an object"""
  id: ID!

  """The date of the vote."""
  createdAt: DateTime!

  """The author of the contribution."""
  author: User

  """The contribution that was voted."""
  related: Contribution

  """Returns Type of vote"""
  kind: String!

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason
  value: YesNoPairedVoteValue!
}

"""A connection to a list of items."""
type YesNoPairedVoteConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [YesNoPairedVoteEdge]
}

"""An edge in a connection."""
type YesNoPairedVoteEdge {
  """The item at the end of the edge."""
  node: YesNoPairedVote

  """A cursor for use in pagination."""
  cursor: String!
}

"""3 possible values"""
enum YesNoPairedVoteValue {
  YES
  NO
  MITIGE
}
