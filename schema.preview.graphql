# A consultation
type Consultation implements Node {
  # The ID of an object
  id: ID!

  # A list of contributor associated with the consultation.
  contributors(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the first `n` elements from the list.
    first: Int = 100

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the last `n` elements from the list.
    last: Int
  ): UserConnection!

  # The title of the consultation.
  title: String!

  # Whether the user has vote for a contribution in this consultation.
  userHasVote(
    # The user's login (for example, an email).
    login: String!
  ): Boolean!

  # The number of votes in this consultation.
  votesCount: Int @deprecated(reason: "Field `votesCount` will be removed. Use `votes.totalCount` instead. In preparation for an upcoming change to the way we expose counters, this field will only be available inside a connection. Removal on 2019-01-01 UTC.")
}

# A string containing a datetime.
scalar DateTime

# An event.
type Event implements Node {
  # The ID of an object
  id: ID!

  # The title of the event.
  title: String!

  # The start of the event.
  startAt: DateTime

  # The end of the event.
  endAt: DateTime

  # Identifies the date and time when the object was last updated.
  updatedAt: DateTime

  # Identifies the date and time when the object was created.
  createdAt: DateTime!

  # Identifies the body of the event.
  body: HTML!

  # Identifies if the event is published.
  enabled: Boolean!
}

# A connection to a list of items.
type EventConnection {
  totalCount: Int!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # Information to aid in pagination.
  edges: [EventEdge]
}

# An edge in a connection.
type EventEdge {
  # The item at the end of the edge.
  node: Event!

  # A cursor for use in pagination.
  cursor: String!
}

# A string containing HTML code.
scalar HTML

# Fetches an object given its ID
interface Node {
  # The ID of an object
  id: ID!
}

# Possible reason that a `Publishable` is not published.
enum NotPublishedReason {
  # Author account isn't confirmed yet.
  WAITING_AUTHOR_CONFIRMATION

  # Author account isn't confirmed and the step has ended.
  AUTHOR_NOT_CONFIRMED

  # Author account was confirmed after the step has ended.
  AUTHOR_CONFIRMED_TOO_LATE
}

# Possible directions in which to order a list of items when provided an orderBy argument.
enum OrderDirection {
  # Specifies an ascending order for a given orderBy argument.
  ASC

  # Specifies a descending order for a given orderBy argument.
  DESC
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

interface PrivatableVote {
  # Anonymous or not.
  private: Boolean
}

# A participatory project.
type Project implements Node & UniformResourceLocatable {
  # The ID of an object
  id: ID!

  # The URL to this resource.
  url: URI!

  # The title of the project.
  title: String!

  # A list of votes associated with the project.
  votes(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the first `n` elements from the list.
    first: Int = 100

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the last `n` elements from the list.
    last: Int
  ): VoteConnection!

  # A list of contributors associated with the project.
  contributors(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the first `n` elements from the list.
    first: Int = 100

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the last `n` elements from the list.
    last: Int
  ): UserConnection!
}

# A connection to a list of items.
type ProjectConnection {
  totalCount: Int!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # Information to aid in pagination.
  edges: [ProjectEdge]
}

# An edge in a connection.
type ProjectEdge {
  # The item at the end of the edge.
  node: Project!

  # A cursor for use in pagination.
  cursor: String!
}

# Ways in which project can be ordered.
input ProjectOrder {
  # The field in which to order nodes by.
  field: ProjectOrderField

  # The direction in which to order nodes.
  direction: OrderDirection
}

# Ordering projects.
enum ProjectOrderField {
  # Allows ordering a list of projects by there number of contributions.
  POPULAR

  # Allows ordering a list of projects by when they were published.
  LATEST
}

# A proposal to a proposal form.
type Proposal implements Node & Publishable & UniformResourceLocatable & Trashable {
  # The ID of an object
  id: ID!

  # `true` if the object is published.
  published: Boolean!

  # Identifies when the entity can no more be published.
  publishableUntil: DateTime

  # Identifies when the entity was published at.
  publishedAt: DateTime

  # Reason that the entity is not published.
  notPublishedReason: NotPublishedReason

  # The URL to this resource.
  url: URI!

  # `true` if the contribution is trashed.
  trashed: Boolean!

  # Identifies the trashed visibility.
  trashedStatus: TrashableStatus

  # Identifies the moment the moderator trashed the contribution.
  trashedAt: DateTime

  # Identifies the reason why the moderator trashed the contribution.
  trashedReason: String

  # Identifies the proposal title.
  title: String!

  # Identifies the body of the proposal.
  body: HTML

  # Identifies the responses of the proposal.
  responses: [Response]!
}

# A vote on a proposal for a given step.
type ProposalVote implements Publishable & Vote & PrivatableVote {
  # The ID of an object
  id: ID!

  # `true` if the object is published.
  published: Boolean!

  # Identifies when the entity can no more be published.
  publishableUntil: DateTime

  # Identifies when the entity was published at.
  publishedAt: DateTime

  # Reason that the entity is not published.
  notPublishedReason: NotPublishedReason

  # Anonymous or not.
  private: Boolean

  # Date of vote.
  createdAt: DateTime!

  # Is the vote anonymous ?
  anonymous: Boolean!
}

# Entities that can be published.
interface Publishable {
  # The ID of an object
  id: ID!

  # `true` if the object is published.
  published: Boolean!

  # Identifies when the entity can no more be published.
  publishableUntil: DateTime

  # Identifies when the entity was published at.
  publishedAt: DateTime

  # Reason that the entity is not published.
  notPublishedReason: NotPublishedReason
}

# Root of the schema.
type Query {
  # The currently authenticated user.
  viewer: User!

  # The ID of an object.
  node(
    # The ID of an object
    id: ID!
  ): Node

  # Lookup nodes by a list of IDs.
  nodes(
    # The list of node IDs.
    ids: [ID!]!
  ): [Node]!

  # Lookup projects.
  projects(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the first `n` elements from the list.
    first: Int = 100

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the last `n` elements from the list.
    last: Int

    # Ordering options for projects returning from the connection.
    orderBy: ProjectOrder = {field: LATEST, direction: DESC}

    # If non-null, projects with the given string to look for.
    term: String

    # If non-null, filter projects by statuses.
    status: ID

    # If non-null, filter projects by themes
    theme: ID

    # If non-null, filter projects by types
    type: ID

    # If non-null, filter projects by author
    author: ID

    # If true, filter projects with events
    withEventOnly: Boolean = false
  ): ProjectConnection!

  # Lookup events.
  events(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the first `n` elements from the list.
    first: Int = 100

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the last `n` elements from the list.
    last: Int

    # If non-null, filters events by comparing the start date with present.
    isFuture: Boolean

    # If non-null, filters events with the given theme.
    theme: ID

    # If non-null, filters events with the given project.
    project: ID

    # If non-null, filters events with the given author.
    author: ID

    # If non-null, filters events with the given author type.
    userType: ID

    # If non-null, filters events with the given string to look for.
    search: String
  ): EventConnection!
}

# A questionnaire is a series of questions that users can answer.
type Questionnaire implements Node {
  # The ID of an object
  id: ID!

  # Identifies the questionnaire title.
  title: String!

  # Whether the user has reply to a questionnaire.
  userHasReply(
    # The user's login (for example, an email).
    login: String!
  ): Boolean!

  # A list of users that have replied to the questionnaire.
  participants(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the first `n` elements from the list.
    first: Int = 100

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the last `n` elements from the list.
    last: Int
  ): UserConnection!
}

# A response to a question.
interface Response {
  # The ID of an object
  id: ID!
}

# A trashable contribution
interface Trashable {
  # `true` if the contribution is trashed.
  trashed: Boolean!

  # Identifies the trashed visibility.
  trashedStatus: TrashableStatus

  # Identifies the moment the moderator trashed the contribution.
  trashedAt: DateTime

  # Identifies the reason why the moderator trashed the contribution.
  trashedReason: String
}

# Different trashable status.
enum TrashableStatus {
  # Content is not visible.
  INVISIBLE

  # Content is visible.
  VISIBLE
}

# An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string.
scalar URI

# Represents a type that can be retrieved by a URL.
interface UniformResourceLocatable {
  # The URL to this resource.
  url: URI!
}

# A user is an individual's account.
type User implements Node & UniformResourceLocatable {
  # The ID of an object
  id: ID!

  # The URL to this resource.
  url: URI!

  # The user's public name.
  username: String

  # Whether or not this user is the authenticated user.
  isViewer: Boolean!
}

# A connection to a list of items.
type UserConnection {
  # Identifies the total count of items in the connection.
  totalCount: Int!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # Information to aid in pagination.
  edges: [UserEdge]
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge.
  node: User!

  # A cursor for use in pagination.
  cursor: String!
}

# A value response.
type ValueResponse implements Response {
  # Nullable ID in case of empty response.
  id: ID

  # The response value which can be a string or a JSON.
  value: String
}

# Fetches an object given its ID
interface Vote {
  # The ID of an object
  id: ID!

  # Date of vote.
  createdAt: DateTime!
}

# A connection to a list of items.
type VoteConnection {
  totalCount: Int!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # Information to aid in pagination.
  edges: [VoteEdge]
}

# An edge in a connection.
type VoteEdge {
  # The item at the end of the edge.
  node: Vote

  # A cursor for use in pagination.
  cursor: String!
}
