settings:
  number_of_shards: 1
  number_of_replicas: 0
  analysis:
    filter:
      french_elision:
        type: elision
        articles: [l, m, t, qu, n, s, j, d, c, jusqu, quoiqu, lorsqu, puisqu]
      french_stop:
        type: stop
        stopwords: _french_
      french_stemmer:
        type: stemmer
        language: light_french
      capco_autocomplete_filter:
        type: edge_ngram
        min_gram: 1
        max_gram: 15
    analyzer:
      capco_autocomplete:
        tokenizer: icu_tokenizer
        filter: ['lowercase', 'icu_folding', 'capco_autocomplete_filter']
        char_filter: ['html_strip']
      capco_sort:
        tokenizer: keyword
        filter: ['truncate', 'icu_collation']
        char_filter: ['html_strip']
      capco_standard:
        tokenizer: icu_tokenizer
        filter: ['lowercase', 'icu_folding']
        char_filter: ['html_strip']
      capco_french:
        tokenizer: icu_tokenizer
        filter: ['lowercase', 'icu_folding', 'french_elision', 'french_stop', 'french_stemmer']
        char_filter: ['html_strip']

# Only map the fields we need to search on.
mappings:
  _default_:
    dynamic: false
    _all:
      enabled: false

  user:
    properties:
      id: { type: keyword }
      slug: { type: keyword }
      createdAt: { type: date }
      #      email: { type: keyword } # enable it for the next migration
      username: &text_analysis_highlighted
        type: text
        analyzer: capco_french
        index_options: offsets
        fields:
          std: { type: text, analyzer: capco_standard }
      biography: *text_analysis_highlighted
      user_type:
        type: object
        properties:
          id:
            type: long
      contributionsCountByProject:
        type: nested
        properties:
          project: &Project
            type: object
            properties:
              id: { type: keyword }
          count:
            type: long
      contributionsCountByStep:
        type: nested
        properties:
          step: &Step
            type: object
            properties:
              id: { type: keyword }
          count:
            type: long
      totalContributionsCount:
        type: nested
        properties:
          contribution:
            type: object
            properties:
              id: { type: keyword }
          count:
            type: long

  argument:
    properties:
      id: { type: keyword }
      body: *text_analysis_highlighted
      createdAt: { type: date }
      updatedAt: { type: date }
      project: *Project
      step: *Step
      Author: &Author
        type: object
        properties:
          id: { type: keyword }
          username: *text_analysis_highlighted
          email: *text_analysis_highlighted
          userType:
            type: object
            properties:
              id: { type: long }
  district:
    properties:
      id: { type: keyword }
      name: { type: keyword }

  project:
    properties:
      id: { type: keyword }
      title: *text_analysis_highlighted
      createdAt: { type: date }
      publishedAt: { type: date }
      authors: *Author
      visibility: { type: long }
      projectType:
        type: object
        properties:
          id: { type: keyword }
          title: { type: keyword }
      projectStatus: { type: string }
      contributionsCount: { type: long }
      themes:
        type: object
        properties:
          id: { type: keyword }
          slug: { type: keyword }
      eventCount: { type: long }
  comment:
    properties:
      id: { type: keyword }
      body: *text_analysis_highlighted
      createdAt: { type: date }
      authorName: *text_analysis_highlighted
      Author: *Author

  event:
    properties:
      id: { type: keyword }
      title: *text_analysis_highlighted
      slug: { type: keyword }
      body: *text_analysis_highlighted
      fullAddress: *text_analysis_highlighted
      createdAt: { type: date }
      updatedAt: { type: date }
      startAt: { type: date }
      endAt: { type: date }
      author: *Author
      isRegistrable: { type: boolean }
      themes:
        type: object
        properties:
          id: { type: keyword }
          slug: { type: keyword }
      projects:
        type: object
        properties:
          id: { type: keyword }
          slug: { type: keyword }

  proposal:
    properties:
      id: { type: keyword }
      title: &text_analysis_highlighted_autocompleted
        type: text
        analyzer: capco_french
        index_options: offsets
        fields:
          std: { type: text, analyzer: capco_standard }
          autocomplete: { type: text, analyzer: capco_autocomplete }
      slug: { type: keyword }
      body: *text_analysis_highlighted_autocompleted
      reference: *text_analysis_highlighted
      author: *Author
      createdAt: { type: date }
      updatedAt: { type: date }
      deletedAt: { type: date }
      trashed: { type: boolean }
      draft: { type: boolean }
      published: { type: boolean }
      commentsCount: { type: long }
      estimation: { type: float }
      district:
        type: object
        properties:
          id: { type: keyword }
      status:
        type: object
        properties:
          id: { type: keyword }
      proposalForm:
        type: object
        properties:
          id: { type: keyword }
      category:
        type: object
        properties:
          id: { type: keyword }
      theme:
        type: object
        properties:
          id: { type: keyword }
      selections:
        type: object
        properties:
          step: *Step
          status:
            type: object
            properties:
              id: { type: keyword }
      votesCount: { type: long }
      votesCountByStep:
        type: nested
        properties:
          step: *Step
          count:
            type: long
      project: *Project
      step: *Step

  opinion:
    properties:
      id: { type: keyword }
      title: *text_analysis_highlighted
      slug: { type: keyword }
      body: *text_analysis_highlighted
      createdAt: { type: date }
      updatedAt: { type: date }
      step: *Step
      project: *Project
      Author: *Author
      type:
        type: object
        properties:
          id: { type: keyword }

  opinionVersion:
    properties:
      id: { type: keyword }
      title: *text_analysis_highlighted
      slug: { type: keyword }
      body: *text_analysis_highlighted
      createdAt: { type: date }
      updatedAt: { type: date }
      Author: *Author
      step: *Step
      project: *Project

  post:
    properties:
      id: { type: keyword }
      title: *text_analysis_highlighted
      abstract: *text_analysis_highlighted
      slug: { type: keyword }
      body: *text_analysis_highlighted
      createdAt: { type: date }
      updatedAt: { type: date }
      publishedAt: { type: date }
      Author: *Author

  source:
    properties:
      id: { type: keyword }
      title: *text_analysis_highlighted
      slug: { type: keyword }
      body: *text_analysis_highlighted
      createdAt: { type: date }
      updatedAt: { type: date }
      Author: *Author

  theme:
    properties:
      id: { type: keyword }
      title: *text_analysis_highlighted
      slug: { type: keyword }
      teaser: *text_analysis_highlighted
      body: *text_analysis_highlighted
      Author: *Author
      createdAt: { type: date }
      updatedAt: { type: date }

  #
  # This allow ous to monitore the usage of our API.
  #
  # This will move later to another index.
  #
  api_analytics:
    properties:
      graphql_type: { type: keyword }
      graphql_field: { type: keyword }
      host: { type: keyword }
      graphql_schema: { type: keyword }
      clientId: { type: keyword }
      createdAt: { type: date }
