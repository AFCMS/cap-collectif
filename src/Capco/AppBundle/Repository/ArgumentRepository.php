<?php

namespace Capco\AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;

/**
 * ArgumentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArgumentRepository extends EntityRepository
{
    public function getEnabledArgumentsByTypeAndOpinion($type, $opinion)
    {
        return $this->getIsEnabledQueryBuilder()
            ->leftJoin('a.opinion', 'o')
            ->addSelect('o')
            ->leftJoin('o.Author', 'aut')
            ->addSelect('aut')
            ->leftJoin('aut.Media', 'm')
            ->addSelect('m')
            ->andWhere('a.isTrashed = :notTrashed')
            ->setParameter('notTrashed', false)
            ->andWhere('a.type = :type')
            ->setParameter('type', $type)
            ->andWhere('a.opinion = :opinion')
            ->setParameter('opinion', $opinion)
            ->getQuery()
            ->getResult();
    }

    public function getEnabledArgumentsByOpinion($opinion)
    {
        return $this->getIsEnabledQueryBuilder()
            ->leftJoin('a.opinion', 'o')
            ->addSelect('o')
            ->leftJoin('o.Author', 'aut')
            ->addSelect('aut')
            ->leftJoin('aut.Media', 'm')
            ->addSelect('m')
            ->andWhere('a.isTrashed = :notTrashed')
            ->setParameter('notTrashed', false)
            ->andWhere('a.opinion = :opinion')
            ->setParameter('opinion', $opinion)
            ->getQuery()
            ->getResult();
    }

    public function getTrashedArgumentsByConsultation($consultation)
    {
        return $this->getIsEnabledQueryBuilder()
            ->andWhere('a.isTrashed = :trashed')
            ->setParameter('trashed', true)
            ->leftJoin('a.opinion', 'o')
            ->addSelect('o')
            ->leftJoin('o.Author', 'aut')
            ->addSelect('aut')
            ->leftJoin('aut.Media', 'm')
            ->addSelect('m')
            ->andWhere('o.Consultation = :consultation')
            ->setParameter('consultation', $consultation)
            ->orderBy('a.trashedAt', 'DESC')
            ->getQuery()
            ->getResult();

    }

    protected function getIsEnabledQueryBuilder()
    {
        return $this->createQueryBuilder('a')
            ->andWhere('a.isEnabled = :isEnabled')
            ->setParameter('isEnabled', true);
    }
}
