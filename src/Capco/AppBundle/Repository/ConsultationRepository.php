<?php

namespace Capco\AppBundle\Repository;

use Capco\AppBundle\Entity\Consultation;
use Capco\AppBundle\Entity\Theme;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ConsultationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ConsultationRepository extends EntityRepository
{
    public function findByTheme($theme)
    {
        $qb = $this->createQueryBuilder('c')
            ->leftJoin('c.Media', 'm')
            ->addSelect('m')
            ->leftJoin('c.Themes' , 't')
            ->addSelect('t')
            ->andWhere(':theme MEMBER OF c.Themes')
            ->setParameter('theme', $theme)
            ->andWhere('c.isEnabled = :isEnabled')
            ->setParameter('isEnabled', true)
            ->orderBy('c.createdAt', 'DESC');

        return $qb
            ->getQuery()
            ->execute();
    }

    protected function getIsEnabledQueryBuilder()
    {
        return $this->createQueryBuilder('c')
            ->andWhere('c.isEnabled = :isEnabled')
            ->setParameter('isEnabled', true);
    }

    public function getLast($limit = 1, $offset = 0)
    {
        $qb = $this->createQueryBuilder('c')
            ->leftJoin('c.Media', 'm')
            ->andWhere('c.isEnabled = :isEnabled')
            ->addOrderBy('c.createdAt', 'DESC')
            ->setParameter('isEnabled', true);

        if ($limit) {
            $qb->setMaxResults($limit);
        }

        if ($offset) {
            $qb->setFirstResult($offset);
        }

        return $qb
            ->getQuery()
            ->execute();
    }

    public function getLastOpen($limit = 1, $offset = 0)
    {
        $qb = $this->createQueryBuilder('c')
            ->leftJoin('c.Media', 'm')
            ->andWhere('c.isEnabled = :isEnabled')
            ->setParameter('isEnabled', true)
            ->addOrderBy('c.createdAt', 'DESC');

        $qb = $this->whereIsOpen($qb);

        if ($limit) {
            $qb->setMaxResults($limit);
        }

        if ($offset) {
            $qb->setFirstResult($offset);
        }

        return $qb
            ->getQuery()
            ->execute();
    }

    public function getSearchResultsWithTheme($nbByPage = 8, $page = 1, $theme = null, $sort = null, $term = null)
    {
        if ((int) $page < 1) {
            throw new \InvalidArgumentException(sprintf(
                    'The argument "page" cannot be lower than 1 (current value: "%s")',
                    $page
                ));
        }

        $qb = $this->getIsEnabledQueryBuilder()
            ->leftJoin('c.Themes', 't')
            ->addSelect('t')
            ->addOrderBy('c.createdAt', 'DESC')
        ;

        if ($theme !== null && $theme !== Theme::FILTER_ALL) {
            $qb->andWhere('t.slug = :theme')
                ->setParameter('theme', $theme)
            ;
        }

        if ($term !== null) {
            $qb->andWhere('c.title LIKE :term')
                ->setParameter('term', '%'.$term.'%')
            ;
        }

        if (isset(Consultation::$sortOrder[$sort]) && Consultation::$sortOrder[$sort] == Consultation::SORT_ORDER_VOTES_COUNT) {
            $qb->orderBy('c.contributionCount', 'DESC');
        } else {
            $qb->orderBy('c.createdAt', 'DESC');
        }

        $query = $qb->getQuery()
            ->setFirstResult(($page - 1) * $nbByPage)
            ->setMaxResults($nbByPage);

        return new Paginator($query);
    }

    public function getFirstResultWithMedia($slug)
    {
        $qb = $this->getIsEnabledQueryBuilder('c')
            ->leftJoin('c.Media', 'm')
            ->addSelect('m')
            ->leftJoin('c.Opinions', 'o')
            ->addSelect('o')
            ->addOrderBy('o.createdAt', 'DESC')
            ->andWhere('c.slug = :slug')
            ->setParameter('slug', $slug);

        return $qb
            ->getQuery()
            ->getOneOrNullResult();
    }

    private function whereIsOpen(QueryBuilder $qb, $consultation = 'c')
    {
        $qb->andWhere(':now BETWEEN c.openedAt AND c.closedAt')
            ->setParameter('now', new \DateTime(date("Y-m-d")));
        return $qb;
    }
}
