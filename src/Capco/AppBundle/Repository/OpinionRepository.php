<?php

namespace Capco\AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * OpinionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OpinionRepository extends EntityRepository
{
    public function getEnabledOpinionsByOpinionTypeAndConsultation($consultation, $opinionType, $nbByPage = 10, $page = 1)
    {
        if ((int) $page < 1) {
            throw new \InvalidArgumentException(sprintf(
                    'The argument "page" cannot be lower than 1 (current value: "%s")',
                    $page
                ));
        }

        $qb = $this->createQueryBuilder('o')
                ->andWhere('o.isEnabled = :enabled')
                ->setParameter('enabled', true)
                ->andWhere('o.isTrashed = :notTrashed')
                ->setParameter('notTrashed', false)
                ->leftJoin('o.OpinionType', 'ot')
                ->addSelect('ot')
                ->leftJoin('o.Consultation', 'c')
                ->addSelect('c')
                ->leftJoin('o.Author', 'aut')
                ->addSelect('aut')
                ->leftJoin('aut.Media', 'm')
                ->addSelect('m')
                ->andWhere('o.Consultation = :consultation')
                ->setParameter('consultation', $consultation)
                ->andWhere('o.OpinionType = :opinionType')
                ->setParameter('opinionType', $opinionType)
                ->orderBy('o.createdAt', 'DESC');

        $query = $qb->getQuery()
            ->setFirstResult(($page - 1) * $nbByPage)
            ->setMaxResults($nbByPage);

        return new Paginator($query);

    }

    public function getTrashedOpinionsByConsultation($consultation)
    {
        $qb = $this->createQueryBuilder('o')
            ->andWhere('o.isEnabled = :enabled')
            ->setParameter('enabled', true)
            ->andWhere('o.isTrashed = :trashed')
            ->setParameter('trashed', true)
            ->leftJoin('o.OpinionType', 'ot')
            ->addSelect('ot')
            ->leftJoin('o.Consultation', 'c')
            ->addSelect('c')
            ->leftJoin('o.Author', 'aut')
            ->addSelect('aut')
            ->leftJoin('aut.Media', 'm')
            ->addSelect('m')
            ->andWhere('o.Consultation = :consultation')
            ->setParameter('consultation', $consultation)
            ->orderBy('o.trashedAt', 'DESC');

        return $qb->getQuery()->getResult();

    }

    public function getOpinionsByUser($user)
    {
        $qb = $this->createQueryBuilder('o')
            ->leftJoin('o.OpinionType', 'ot')
            ->addSelect('ot')
            ->leftJoin('o.Consultation', 'c')
            ->addSelect('c')
            ->leftJoin('o.Author', 'aut')
            ->addSelect('aut')
            ->leftJoin('aut.Media', 'm')
            ->addSelect('m')
            ->andWhere('o.Author = :author')
            ->setParameter('author', $user)
            ->orderBy('o.createdAt', 'DESC');

        return $qb->getQuery()->getResult();

    }

    /**
     * Profil, count all opinions
     * @param $user
     * @return mixed
     */
    public function countOpinionsByUser($user)
    {
        $qb = $this->createQueryBuilder('o')
            ->select('COUNT(o) as totalOpinions')
            ->leftJoin('o.Consultation', 'c')
            ->andWhere('c.isEnabled = :enabledConsul')
            ->setParameter('enabledConsul', true)
            ->andWhere('o.isEnabled = :enabled')
            ->setParameter('enabled', true)
            ->andWhere('o.isTrashed = :notTrashed')
            ->setParameter('notTrashed', false)
            ->andWhere('o.Author = :author')
            ->setParameter('author', $user);

        return $qb
            ->getQuery()
            ->getSingleScalarResult();
    }



    public function getOpinion($consultationSlug, $opinionTypeSlug, $opinionSlug)
    {
        $qb = $this->createQueryBuilder('o')
                ->leftJoin('o.Author', 'a')
                ->addSelect('a')
                ->leftJoin('a.Media', 'm')
                ->addSelect('m')
                ->leftJoin('o.OpinionType', 'ot')
                ->addSelect('ot')
                ->leftJoin('o.Consultation', 'c')
                ->addSelect('c')
                ->andWhere('o.isEnabled = :enabled')
                ->setParameter('enabled', true)
                ->andWhere('o.isTrashed = :notTrashed')
                ->setParameter('notTrashed', false)
                ->andWhere('c.slug = :consultationSlug')
                ->setParameter('consultationSlug', $consultationSlug)
                ->andWhere('ot.slug = :opinionTypeSlug')
                ->setParameter('opinionTypeSlug', $opinionTypeSlug)
                ->andWhere('o.slug = :opinion')
                ->setParameter('opinion', $opinionSlug)
                ->andWhere('c.isEnabled = :enabled')
                ->setParameter('enabled', true)
                ;

        return $qb->getQuery()
            ->getOneOrNullResult();

    }

}
