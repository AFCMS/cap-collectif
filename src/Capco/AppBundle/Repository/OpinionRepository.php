<?php

namespace Capco\AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * OpinionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OpinionRepository extends EntityRepository
{
    /**
     * Get one opinion by slug, opinion type and consultation
     * @param $consultation
     * @param $opinionType
     * @param $opinion
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getOneBySlug($consultation, $opinionType, $opinion)
    {
        $qb = $this->getIsEnabledQueryBuilder()
            ->addSelect('a', 'm', 'ot', 'c')
            ->leftJoin('o.Author', 'a')
            ->leftJoin('a.Media', 'm')
            ->leftJoin('o.OpinionType', 'ot')
            ->leftJoin('o.Consultation', 'c')
            ->andWhere('c.slug = :consultation')
            ->andWhere('o.slug = :opinion')
            ->andWhere('ot.slug = :opinionType')
            ->setParameter('consultation', $consultation)
            ->setParameter('opinion', $opinion)
            ->setParameter('opinionType', $opinionType);

        return $qb->getQuery()
            ->getOneOrNullResult();

    }

    /**
     * Get all trashed opinions
     * @param $consultation
     * @return array
     */
    public function getTrashedByConsultation($consultation)
    {
        $qb = $this->getIsEnabledQueryBuilder()
            ->addSelect('ot', 'c', 'aut', 'm')
            ->leftJoin('o.OpinionType', 'ot')
            ->leftJoin('o.Consultation', 'c')
            ->leftJoin('o.Author', 'aut')
            ->leftJoin('aut.Media', 'm')
            ->andWhere('o.Consultation = :consultation')
            ->andWhere('o.isTrashed = :trashed')
            ->setParameter('consultation', $consultation)
            ->setParameter('trashed', true)
            ->orderBy('o.trashedAt', 'DESC');

        return $qb->getQuery()->getResult();

    }

    /**
     * Get all opinions by user
     * @param $user
     * @return array
     */
    public function getByUser($user)
    {
        $qb = $this->getIsEnabledQueryBuilder()
            ->addSelect('ot', 'c', 'aut', 'm')
            ->leftJoin('o.OpinionType', 'ot')
            ->leftJoin('o.Consultation', 'c')
            ->leftJoin('o.Author', 'aut')
            ->leftJoin('aut.Media', 'm')
            ->andWhere('c.isEnabled = :enabled')
            ->andWhere('o.Author = :author')
            ->setParameter('enabled', true)
            ->setParameter('author', $user)
            ->orderBy('o.createdAt', 'DESC');

        return $qb->getQuery()->getResult();

    }

    /**
     * Count opinions by user
     * @param $user
     * @return mixed
     */
    public function countByUser($user)
    {
        $qb = $this->getIsEnabledQueryBuilder()
            ->select('COUNT(o) as totalOpinions')
            ->leftJoin('o.Consultation', 'c')
            ->andWhere('c.isEnabled = :enabled')
            ->andWhere('o.isEnabled = :enabled')
            ->andWhere('o.Author = :author')
            ->setParameter('enabled', true)
            ->setParameter('author', $user);

        return $qb
            ->getQuery()
            ->getSingleScalarResult();
    }

    /**
     * Get opinions by opinionType and consultation
     * @param $consultation
     * @param $opinionType
     * @param int $nbByPage
     * @param int $page
     * @return Paginator
     * @return mixed
     */
    public function getByOpinionTypeAndConsultationOrdered($consultation, $opinionType, $nbByPage = 10, $page = 1, $opinionsSort = null)
    {
        if ((int) $page < 1) {
            throw new \InvalidArgumentException(sprintf(
                    'The argument "page" cannot be lower than 1 (current value: "%s")',
                    $page
                ));
        }

        $qb = $this->getIsEnabledQueryBuilder()
            ->addSelect('ot', 'c', 'aut', 'm', '(o.voteCountMitige + o.voteCountOk + o.voteCountNok) as HIDDEN vnb')
            ->leftJoin('o.OpinionType', 'ot')
            ->leftJoin('o.Consultation', 'c')
            ->leftJoin('o.Author', 'aut')
            ->leftJoin('aut.Media', 'm')
            ->andWhere('o.Consultation = :consultation')
            ->andWhere('o.OpinionType = :opinionType')
            ->andWhere('o.isTrashed = :notTrashed')
            ->setParameter('consultation', $consultation)
            ->setParameter('opinionType', $opinionType)
            ->setParameter('notTrashed', false);

        if (null != $opinionsSort) {
            if ($opinionsSort == 'date') {
                $qb->orderBy('o.updatedAt', 'DESC');
            } else if ($opinionsSort == 'votes') {
                $qb->orderBy('vnb', 'DESC');
            } else if ($opinionsSort == 'comments') {
                $qb->orderBy('o.argumentsCount', 'DESC');
            }
        }

        $qb->addOrderBy('vnb', 'DESC')
            ->addOrderBy('o.argumentsCount', 'DESC')
            ->addOrderBy('o.updatedAt', 'DESC');


        $query = $qb->getQuery()
            ->setFirstResult(($page - 1) * $nbByPage)
            ->setMaxResults($nbByPage);

        return new Paginator($query);

    }

    protected function getIsEnabledQueryBuilder()
    {
        return $this->createQueryBuilder('o')
            ->andWhere('o.isEnabled = :isEnabled')
            ->setParameter('isEnabled', true);
    }

}
