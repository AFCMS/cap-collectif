<?php

namespace Capco\AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * OpinionTypeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OpinionTypeRepository extends EntityRepository
{
    public function findByType($consultation)
    {
        $qb = $this->createQueryBuilder('ot')
            ->leftJoin('ot.Opinions','o')
            ->addSelect('o')
            ->leftJoin('o.Consultation', 'c')
            ->addSelect('c')
            ->leftJoin('o.Author', 'a')
            ->addSelect('a')
            ->leftJoin('a.Media', 'm')
            ->addSelect('m')
            ->leftJoin('o.arguments', 'arg')
            ->addSelect('arg')
            ->leftJoin('o.Votes', 'v')
            ->addSelect('v')
            ->andWhere('o.Consultation = :consultation')
            ->andWhere('o.isEnabled = :enabled')
            ->setParameter('enabled', true)
            ->andWhere('o.isTrashed = :notTrashed')
            ->setParameter('notTrashed', false)
            ->setParameter('consultation', $consultation)
            ->orderBy('ot.position', 'ASC')
            ->addOrderBy('o.createdAt', 'DESC');

        return $qb
            ->getQuery()
            ->getResult();
    }

    public function findByUser($user)
    {
        $qb = $this->createQueryBuilder('ot')
            ->leftJoin('ot.Opinions','o')
            ->addSelect('o')
            ->leftJoin('o.Consultation', 'c')
            ->addSelect('c')
            ->leftJoin('o.Author', 'a')
            ->addSelect('a')
            ->leftJoin('a.Media', 'm')
            ->addSelect('m')
            ->leftJoin('o.Votes', 'v')
            ->addSelect('v')
            ->andWhere('c.isEnabled = :enabledConsul')
            ->setParameter('enabledConsul', true)
            ->andWhere('o.isEnabled = :enabled')
            ->setParameter('enabled', true)
            ->andWhere('o.isTrashed = :notTrashed')
            ->setParameter('notTrashed', false)
            ->andWhere('o.Author = :author')
            ->setParameter('author', $user)
            ->orderBy('ot.position', 'ASC')
            ->addOrderBy('o.createdAt', 'DESC');

        return $qb
            ->getQuery()
            ->getResult();
    }

    public function countByUser($user)
    {
        $qb = $this->createQueryBuilder('ot')
            ->Join('ot.Opinions','o')
            ->addselect('o')
            ->addGroupBy('ot.id')
//            ->addGroupBy('o.id')
            ->andWhere('o.Author = :author')
            ->andWhere('o.isEnabled = :enabled')
            ->setParameter('enabled', true)
            ->andWhere('o.isTrashed = :notTrashed')
            ->setParameter('notTrashed', false)
            ->setParameter('author', $user)
            ->orderBy('ot.position', 'ASC')
            ->addOrderBy('o.createdAt', 'DESC');

        return $qb
            ->getQuery()
            ->getScalarResult();
    }

    public function findAllByPosition()
    {
        $qb = $this->createQueryBuilder('ot')
            ->orderBy('ot.position', 'ASC');

        return $qb
            ->getQuery()
            ->getResult();
    }

}
