<?php

namespace Capco\AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends EntityRepository
{
    /**
     * Get last ideas
     * @param int $limit
     * @param int $offset
     * @return mixed
     */
    public function getLast($limit = 1, $offset = 0)
    {
        $qb = $this->getPublicQueryBuilder()
            ->select('p, a, m')
            ->leftJoin('p.Authors', 'a')
            ->leftJoin('p.Media', 'm')
            ->addOrderBy('p.publishedAt', 'DESC')
            ->addGroupBy('p.id')
        ;

        if ($limit) {
            $qb->setMaxResults($limit);
        }

        if ($offset) {
            $qb->setFirstResult($offset);
        }

        return $qb
            ->getQuery()
            ->execute();
    }

    public function getRecentPosts($count = 5)
    {
        $qb = $this->createQueryBuilder('p')
            ->leftJoin('p.Authors', 'a')
            ->orderBy('p.createdAt', 'DESC')
            ->addOrderBy('p.publishedAt', 'DESC')
            ->setMaxResults($count);

        return $qb->getQuery()->getResult();
    }

    public function getPublishedBySlug($slug)
    {
        $qb = $this->getPublicQueryBuilder('p')
            ->andWhere('p.slug = :slug')
            ->leftJoin('p.Authors', 'a')
            ->orderBy('p.publishedAt', 'DESC')
            ->setParameter('slug', $slug)
            ->setMaxResults(1);

        return $qb->getQuery()->getSingleResult();
    }

    public function getPublishedPosts($page = 1, $pageSize)
    {
        if ((int) $page < 1) {
            throw new \InvalidArgumentException(sprintf(
                'The argument "page" cannot be lower than 1 (current value: "%s")',
                $page
            ));
        }

        $qb = $this->getPublicQueryBuilder('p')
            ->leftJoin('p.Authors', 'a')
            ->orderBy('p.publishedAt', 'DESC');
        $query = $qb->getQuery();
        $query->setFirstResult(($page - 1) * $pageSize)
            ->setMaxResults($pageSize);

        return new Paginator($query);
    }

    protected function getPublicQueryBuilder($alias = 'p')
    {
        return $this->createQueryBuilder($alias)
            ->andWhere($alias.'.isPublished = :isPublished')
            ->andWhere($alias.'.publishedAt <= :now')
            ->setParameter('isPublished', true)
            ->setParameter('now', new \DateTime());
    }
}
