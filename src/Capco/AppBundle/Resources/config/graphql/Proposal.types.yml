Proposal:
    type: object
    config:
        description: "A budget contribution"
        interfaces: [Node]
        fields:
            show_url:
                type: "URI!"
                description: "The HTTP show url for this contribution."
                resolve: "@=resolver('proposal_show_url', [value])"
            adminUrl:
                type: "URI!"
                description: "The admin url for this contribution."
                resolve: "@=resolver('proposal_admin_url', [value])"
                access: "@=service('security.authorization_checker').isGranted('ROLE_ADMIN')"
            progressSteps:
              type: "[ProgressStep!]!"
            evaluers:
              type: "[Group!]!"
            viewerIsAnEvaluer:
              type: "Boolean!"
              resolve: "@=resolver('proposal_viewer_is_evaluer', [value, user])"
            news:
              type: "[Post!]!"
              resolve: "@=resolver('proposal_news', [value])"
            project:
              type: "Project!"
            status:
              type: "Status"
            selections:
              type: "[Selection!]!"
            likers:
              type: "[User!]!"
            estimation:
                type: "Int"
            responses:
                type: "[Response]!"
            media:
                type: "Media"
            theme:
                type: "Theme"
            category:
                type: "ProposalCategory"
            district:
                type: "District"
            address:
                type: "Address"
            author:
                type: "User!"
                description: "The author of the contribution."
            deletedAt:
                type: "DateTime"
                description: "The delete date."
            updatedAt:
                type: "DateTime"
                description: "The updated date."
            updatedBy:
                type: "User"
                description: "The update user."
                resolve: "@=value.getUpdateAuthor()"
            publicationStatus:
                type: "PublicationStatus!"
                description: "The publication status."
                resolve: "@=resolver('proposal_publicationStatus', [value])"
            trashedReason:
                type: "String"
            trashed:
                type: "Boolean"
            trashedAt:
                type: "DateTime"
            expired:
                type: "Boolean"
            id:
                type: "ID!"
                description: "The id of the contribution."
            reference:
                type: "String!"
                description: "The unique reference of proposal"
                resolve: "@=resolver('proposal_reference', [value])"
            title:
                type: "String!"
                description: "Identifies the contribution title."
            body:
                type: "HTML"
                description: "Identifies the body of the contribution."
            bodyText:
                type: "String!"
                description: "Identifies the body of the contribution rendered to text."
            summary:
                type: "String"
                description: "Identifies the summary of the contribution."
            summaryOrBodyExcerpt:
                type: "String"
                description: "Identifies the preview text of the contribution."
            form:
                type: "ProposalForm!"
                description: "Identifies the form where the contribution was submitted."
            evaluation:
                type: "ProposalEvaluation"
                description: "Identifies the answers to an evaluation form."
                resolve: "@=resolver('proposal_evaluation', [value])"
            draft:
              type: "Boolean!"
              description: "Identifies proposals as draft."
            commentsCount:
              type: "Int!"
              description: "Count number of comments for the proposal."
            comments:
              type: "CommentConnection"
              argsBuilder: "Relay::Connection"
              resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\ProposalCommentsResolver", [value, args])'
            selectionVotes:
              type: "ProposalSelectionVoteConnection"
              argsBuilder: "Relay::Connection"
              resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\ProposalSelectionVotesResolver", [value, args])'
              args:
                orderBy:
                  type: "ProposalVoteOrder"
                  defaultValue: { field: CREATED_AT, direction: DESC }
                first:
                  type: "Int"
                  defaultValue: 30
            collectVotes:
              type: "ProposalCollectVoteConnection"
              argsBuilder: "Relay::Connection"
              resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\ProposalCollectVotesResolver", [value, args])'
              args:
                orderBy:
                  type: "ProposalVoteOrder"
                  defaultValue: { field: CREATED_AT, direction: DESC }
                first:
                  type: "Int"
                  defaultValue: 30
            createdAt:
              type: "DateTime!"
              description: "Identifies the date and time when the object was created."
              resolve: "@=value.getCreatedAt()"
            mergedFrom:
                type: "[Proposal!]!"
                description: "If the proposal is a fusion, contains the list of merged proposals."
                resolve: "@=value.getChildConnections()"
            mergedIn:
                type: "[Proposal!]!"
                description: "If the proposal listed in a fusion, contains the list of fusions."
                resolve: "@=value.getParentConnections()"
            followers:
                type: "UserConnection!"
                args:
                    orderBy:
                      type: "String"
                      description: "Ordering options for followers returning from the connection"
                    after:
                      type: "String"
                      description: "Returns the elements in the list that come after the specified global ID."
                    first:
                      type: "Int"
                      defaultValue: 32
                      description: "Returns the first n elements from the list."
                    before:
                      type: "String"
                      description: "Returns the elements in the list that come before the specified global ID."
                    last:
                      type: "Int"
                      description: "Returns the last n elements from the list."
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\UsersFollowingProposalResolver", [value, args])'
                description: "Array of users following proposal."
            followerConnection:
                type: "FollowerConnection!"
                args:
                    orderBy:
                        type: "String"
                        description: "Ordering options for followers returning from the connection"
                    after:
                      type: "String"
                      description: "Returns the elements in the list that come after the specified global ID."
                    first:
                      type: "Int"
                      defaultValue: 32
                      description: "Returns the first n elements from the list."
                    before:
                      type: "String"
                      description: "Returns the elements in the list that come before the specified global ID."
                    last:
                      type: "Int"
                      description: "Returns the last n elements from the list."
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\ProposalFollowerConnection", [value, args])'
            viewerIsFollowing:
                access: "@=isAuthenticated()"
                type: "Boolean!"
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\ViewerFollowProposalResolver", [value, user])'
                description: "View follow current proposal"
            followerConfiguration:
                access: "@=isAuthenticated()"
                type: "Follower"
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\ViewerFollowerProposalResolver", [value, user])'
                description: "View follow current proposal"
            postsCount:
                type: "Int!"
                resolve: "@=resolver('proposal_posts_count', [value])"
            viewerCanSeeEvaluation:
                type: "Boolean!"
                resolve: "@=resolver('proposal_viewer_can_see_evaluation', [value, user])"
