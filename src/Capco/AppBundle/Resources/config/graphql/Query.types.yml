Query:
    type: object
    config:
        fields:
            viewer:
                access: "@=isAuthenticated()"
                type: "User!"
                description: "The currently authenticated user."
                resolve: "@=user"
            users:
                type: "[User!]!"
                args:
                    superAdmin:
                        type: "Boolean"
                        defaultValue: false
                        description: "Remove super admin from export."
                resolve: "@=resolver('user', [args])"
            consultations:
                type: "[Consultation!]!"
                args:
                    id:
                        description: "If omitted, returns all consultations. If provided, returns the consultation of the particular id."
                        type: "ID"
                resolve: "@=resolver('consultation', [args])"
            groups:
                type: "[Group!]!"
                access: "@=hasRole('ROLE_ADMIN')"
                resolve: "@=resolver('groups')"
            proposalForms:
                type: "[ProposalForm!]!"
                access: "@=hasRole('ROLE_USER')"
                resolve: "@=resolver('proposalForms')"
            availableDistrictsForLocalisation:
                type: "[District!]!"
                description: "Retrieve availables districts for a given address"
                args:
                    proposalFormId:
                        type: "ID!"
                    latitude:
                        type: "Float!"
                    longitude:
                        type: "Float!"
                resolve: "@=resolver('query_available_districts_for_location', [args['proposalFormId'], args['latitude'], args['longitude']])"
            votesByContribution:
                type: "[PropositionVote!]!"
                args:
                    contribution:
                        type: "ID!"
                resolve: "@=resolver('votesByContribution', [args])"
            contributions:
                type: "[Opinion!]!"
                args:
                    consultation:
                        description: "Returns all contributions of the provided consultation."
                        type: "ID!"
                resolve: "@=resolver('contributions', [args])"
            contributionsBySection:
                type: "[Opinion!]!"
                args:
                    sectionId:
                        type: "ID!"
                    limit:
                        description: "Max depth."
                        type: "Int!"
                resolve: "@=resolver('contributionsBySection', [args])"
            question:
                type: "Question!"
                args:
                    id:
                        type: "Int!"
                resolve: "@=resolver('query_question', [args])"
            availableQuestionnaires:
                type: "[Questionnaire!]!"
                resolve: "@=resolver('query_get_available_questionnaires')"
            draftProposalsForUserInStep:
                type: "[Proposal!]!"
                access: "@=hasRole('ROLE_USER')"
                args:
                    stepId:
                        type: "ID!"
                resolve: "@=resolver('query_get_draft_proposals_for_user_in_step', [args['stepId'], user])"
            node:
                builder: "Relay::Node"
                builderConfig:
                    nodeInterfaceType: Node
                    idFetcher: '@=resolver("query_node", [value, user])'
            nodes:
                type: "[Node]!"
                description: "Lookup nodes by a list of IDs."
                args:
                    ids:
                        type: "[ID!]!"
                        description: "The list of node IDs."
                resolve: "@=resolver('query_nodes', [args['ids'], user])"
