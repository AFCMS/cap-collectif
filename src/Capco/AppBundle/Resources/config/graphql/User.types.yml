User:
    type: object
    config:
        description: "A user is an individual's account."
        interfaces: [Node]
        fields:
            id:
                type: "ID!"
                description: "The id of the user."
            vip:
                type: "Boolean!"
            media:
                type: "Media"
                description: "The profile picture of the user."
            email:
                type: "String"
                description: "email."
                resolve: "@=resolver('user_email', [value])"
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(user,value,context)'
            displayName:
                type: "String!"
            username:
                type: "String"
                description: "Username of the user."
            slug:
                type: "String"
                description: "(unique) slug of the user."
            show_url:
                type: "URI"
                description: "URL to user profile, null if the feature profiles is disabled."
                resolve: "@=resolver('user_show_url', [value])"
            createdAt:
                type: "DateTime!"
                description: "Identifies the date and time when the object was created."
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(user,value,context)'
            updatedAt:
                type: "String"
                description: "Updated date of the user."
                resolve: "@=resolver('user_updatedAt', [value])"
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(user,value,context)'
            lastLogin:
                type: "String"
                description: "Last connection of the user."
                resolve: "@=resolver('user_lastLogin', [value])"
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(user,value,context)'
            enabled:
                type: "Boolean!"
                description: "Is user is activated."
            notificationsConfiguration:
                type: "UserNotificationsConfiguration!"
                description: "A user notifications preferences"
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(user,value,context)'
            locked:
                type: "Boolean!"
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(user,value,context)'
            phoneConfirmed:
                type: "Boolean!"
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(user,value,context)'
            expiresAt:
                type: "String"
            phoneConfirmationSentAt:
                type: "String"
                resolve: "@=resolver('user_phoneConfirmationSentAt', [value])"
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(user,value,context)'
            gender:
                type: "GenderValue"
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(user,value,context)'
            firstname:
                type: "String"
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(user,value,context)'
            lastname:
                type: "String"
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(user,value,context)'
            dateOfBirth:
                type: "String"
                resolve: "@=resolver('user_dateOfBirth', [value])"
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(user,value,context)'
            roles:
                type: "[String]"
                description: "Unattended roles as array."
            rolesText:
                type: "String"
                resolve: "@=resolver('user_rolesText', [value])"
                description: "Array of roles converted and translated to string."
            isArchiveDeleted:
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(user,value,context)'
                type: "Boolean!"
                description: "Is the personal archive of the user has been deleted"
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserArchiveDeletedResolver", [user])'
            isArchiveReady:
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(user,value,context)'
                type: "Boolean!"
                description: "Is the personal archive of the user is ready?"
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserArchiveReadyResolver", [user])'
            firstArchive:
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(user,value,context)'
                type: "Boolean!"
                description: "Is the personal archive of the user is being asked for the first time?"
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserArchiveFirstResolver", [user])'
            website:
                type: "String"
            biography:
                type: "String"
            address:
                type: "String"
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(user,value,context)'
            address2:
                type: "String"
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(user,value,context)'
            zipCode:
                type: "String"
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(user,value,context)'
            city:
                type: "String"
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(user,value,context)'
            phone:
                type: "String"
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(user,value,context)'
            googleId:
                type: "String"
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(user,value,context)'
            facebookId:
                type: "String"
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(user,value,context)'
            samlId:
                type: "String"
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(user,value,context)'
            opinionsCount:
                type: "Int!"
            opinionVotesCount:
                type: "Int!"
            opinionVersionsCount:
                type: "Int!"
            argumentsCount:
                type: "Int!"
            argumentVotesCount:
                type: "Int!"
            proposalsCount:
                type: "Int!"
            proposalVotesCount:
                type: "Int!"
            commentVotesCount:
                type: "Int!"
            votesCount:
                type: "Int!"
            contributionsToDeleteCount:
                type: "Int!"
                description: "Previsionnal number of contributions who will be totally deleted if the user chose to delete his account."
                resolve: "@=resolver('user_contributionsToDeleteCount', [value])"
            sourcesCount:
                type: "Int!"
            repliesCount:
                type: "Int!"
            postCommentsCount:
                type: "Int!"
            eventCommentsCount:
                type: "Int!"
            projectsCount:
                type: "Int!"
            userType:
                type: "UserType"
                description: "The type of the person."
            consentExternalCommunication:
                type: "Boolean!"
                description: "Is user accepted the external communication during the registration."
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(user,value,context)'
            followingProposals:
                type: "ProposalConnection!"
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Proposal\\ProposalsFollowedByUserResolver", [value, args])'
                description: "Array of proposals followed by current user."
                args:
                    orderBy:
                      type: "String"
                      description: "Ordering options for followers returning from the connection"
                    after:
                      type: "String"
                      description: "Returns the elements in the list that come after the specified global ID."
                    first:
                      type: "Int"
                      defaultValue: 32
                      description: "Returns the first n elements from the list."
                    before:
                      type: "String"
                      description: "Returns the elements in the list that come before the specified global ID."
                    last:
                      type: "Int"
                      description: "Returns the last n elements from the list."
            contributionsCount:
                type: "Int!"
                description: "Total of contributions count"
            expired:
                type: "Boolean!"
            facebookUrl:
                type: "String"
                description: "Your facebook url"
            twitterUrl:
                type: "String"
                description: "Your twitter url"
            linkedInUrl:
                type: "String"
                description: "Your linkedIn url"
            profilePageIndexed:
                type: "Boolean"
                description: "Is your profile indexed or not"
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(user,value,context)'
            neighborhood:
                type: "String"
                description: "Your localisation"
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(user,value,context)'
            proposalVotes:
              type: "ProposalVoteConnection!"
              argsBuilder: "Relay::Connection"
              resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\User\\ProposalVotesResolver", [value, args, context])'
              args:
                first:
                  type: "Int"
                  defaultValue: 100000
                orderBy:
                  type: "ProposalVotesOrder"
                  defaultValue: { field: CREATED_AT, direction: DESC }
                stepId:
                  type: "ID"
                includeExpired:
                  type: "Boolean"
                  description: "(ROLE_SUPER_ADMIN only) Select also expired votes."
                  defaultValue: false
            deletedAccountAt:
                type: "DateTime"
            medias:
                type: "[Media]!"
                description: "Get all medias the user has published."
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserMediasResolver", [value, args])'
            votes:
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(user,value,context)'
                type: "VoteConnection!"
                argsBuilder: "Relay::Connection"
                description: "Get all votes of the user."
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserVotesResolver", [value, args])'
            groups:
                type: "GroupConnection!"
                argsBuilder: "Relay::Connection"
                description: "Get all groups where the user is."
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserGroupsResolver", [value, args])'
            reports:
                type: "ReportConnection!"
                description: "Get all reports the user has done."
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserReportsResolver", [value, args])'
            events:
                type: "EventConnection!"
                argsBuilder: "Relay::Connection"
                description: "Get all events the user has created."
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserEventsResolver", [value, args])'
            contributions:
                type: "ContributionConnection!"
                args:
                    type:
                      type: "ContributionType"
                      description: "Type of contribustion requested"
                    after:
                     type: "String"
                     description: "Returns the elements in the list that come after the specified global ID."
                    first:
                     type: "Int"
                     defaultValue: 100
                     description: "Returns the first n elements from the list."
                    before:
                     type: "String"
                     description: "Returns the elements in the list that come before the specified global ID."
                    last:
                     type: "Int"
                     description: "Returns the last n elements from the list."
                description: "Return the user's contributions of the type requested."
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserContributionResolver", [value, args])'

            expiredAt:
                type: "DateTime"
            isSubscribedToNewsLetter:
                type: "Boolean"
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserNewsLetterResolver", [value])'
            subscribedToNewsLetterAt:
                type: "DateTime"
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserNewsLetterResolver", [value, "at"])'
            isViewer:
                type: "Boolean!"
                resolve: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isViewer(user, value)'
