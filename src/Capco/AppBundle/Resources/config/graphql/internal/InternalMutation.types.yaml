InternalMutation:
    type: object
    inherits:
        - PreviewMutation
    config:
        name: Mutation
        fields:
            changeMapProviderToken:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: ChangeMapProviderTokenInput
                    payloadType: ChangeMapProviderTokenPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\ChangeMapProviderTokenMutation", [value])'
            changeMapStyle:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: ChangeMapStyleInput
                    payloadType: ChangeMapStylePayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\ChangeMapStyleMutation", [value])'
            removeSiteFavicon:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: InternalRemoveSiteFaviconInput
                    payloadType: InternalRemoveSiteFaviconPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\RemoveSiteFaviconMutation")'
            changeSiteFavicon:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: InternalChangeSiteFaviconInput
                    payloadType: InternalChangeSiteFaviconPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\ChangeSiteFaviconMutation", [value])'
            addEvent:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: InternalAddEventInput
                    payloadType: InternalAddEventPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\AddEventMutation", [value, getUser()])'
            reviewEvent:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: InternalReviewEventInput
                    payloadType: InternalReviewEventPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\ReviewEventMutation", [value, getUser()])'
            deleteEvent:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: PreviewDeleteEventInput
                    payloadType: InternalDeleteEventPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\DeleteEventMutation", [value, getUser()])'
            addEvents:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: InternalAddEventsInput
                    payloadType: InternalAddEventsPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\AddEventsMutation", [value])'
            changeEvent:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: InternalChangeEventInput
                    payloadType: InternalChangeEventPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\ChangeEventMutation", [value, getUser()])'
            addComment:
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: AddCommentInput
                    payloadType: AddCommentPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\AddCommentMutation", [value, getUser(), serv("request_stack")])'
            addSourceVote:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: AddSourceVoteInput
                    payloadType: AddSourceVotePayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\AddSourceVoteMutation", [value, getUser()])'
            addCommentVote:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: AddCommentVoteInput
                    payloadType: AddCommentVotePayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\AddCommentVoteMutation", [value, getUser()])'
            addArgument:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: AddArgumentInput
                    payloadType: AddArgumentPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\AddArgumentMutation", [value, getUser()])'
            addArgumentVote:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: AddArgumentVoteInput
                    payloadType: AddArgumentVotePayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\AddArgumentVoteMutation", [value, getUser()])'
            addSource:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: AddSourceInput
                    payloadType: AddSourcePayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\AddSourceMutation", [value, getUser()])'
            addVersion:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: AddVersionInput
                    payloadType: AddVersionPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\AddVersionMutation", [value, getUser()])'
            changeArgument:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: ChangeArgumentInput
                    payloadType: ChangeArgumentPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\ChangeArgumentMutation", [value, getUser()])'
            changeVersion:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: ChangeVersionInput
                    payloadType: ChangeVersionPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\ChangeVersionMutation", [value, getUser()])'
            changeSource:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: ChangeSourceInput
                    payloadType: ChangeSourcePayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\ChangeSourceMutation", [value, getUser()])'
            deleteArgument:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: DeleteArgumentInput
                    payloadType: DeleteArgumentPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\DeleteArgumentMutation", [value, getUser()])'
            deleteComment:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: DeleteCommentInput
                    payloadType: DeleteCommentPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\DeleteCommentMutation", [value, getUser()])'
            deleteSource:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: DeleteSourceInput
                    payloadType: DeleteSourcePayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\DeleteSourceMutation", [value, getUser()])'
            deleteOpinion:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: DeleteOpinionInput
                    payloadType: DeleteOpinionPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\DeleteOpinionMutation", [value, getUser()])'
            deleteVersion:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: DeleteVersionInput
                    payloadType: DeleteVersionPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\DeleteVersionMutation", [value, getUser()])'
            addReply:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: AddReplyInput
                    payloadType: AddReplyPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\AddReplyMutation", [value, getUser()])'
            updateReply:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: UpdateReplyInput
                    payloadType: UpdateReplyPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\UpdateReplyMutation", [value, getUser()])'
            deleteReply:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: DeleteReplyInput
                    payloadType: DeleteReplyPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\DeleteReplyMutation", [value["id"], getUser()])'
            # User notifications
            changeUserNotificationsConfiguration:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: ChangeUserNotificationsConfigurationInput
                    payloadType: ChangeUserNotificationsConfigurationPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\UserNotificationsConfigurationMutation", [value, getUser()])'
            addOpinionVote:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: AddOpinionVoteInput
                    payloadType: AddOpinionVotePayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\AddOpinionVoteMutation", [value, getUser(), serv("request_stack")])'
            removeOpinionVote:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: RemoveOpinionVoteInput
                    payloadType: RemoveOpinionVotePayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\RemoveOpinionVoteMutation", [value, getUser()])'
            removeArgumentVote:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: RemoveArgumentVoteInput
                    payloadType: RemoveArgumentVotePayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\RemoveArgumentVoteMutation", [value, getUser()])'
            removeCommentVote:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: RemoveCommentVoteInput
                    payloadType: RemoveCommentVotePayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\RemoveCommentVoteMutation", [value, getUser()])'
            removeSourceVote:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: RemoveSourceVoteInput
                    payloadType: RemoveSourceVotePayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\RemoveSourceVoteMutation", [value, getUser()])'
            # Proposal
            addProposalVote:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: AddProposalVoteInput
                    payloadType: AddProposalVotePayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\AddProposalVoteMutation", [value, getUser(), serv("request_stack")])'
            removeProposalVote:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: RemoveProposalVoteInput
                    payloadType: RemoveProposalVotePayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\RemoveProposalVoteMutation", [value, getUser()])'
            updateProposalVotes:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: UpdateProposalVotesInput
                    payloadType: UpdateProposalVotesPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\UpdateProposalVotesMutation", [value, getUser()])'
            changeProposalAssessment:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: ChangeProposalAssessmentInput
                    payloadType: ChangeProposalAssessmentPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\ChangeProposalAssessmentMutation", [value, getUser()])'
            evaluateProposalAssessment:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: EvaluateProposalAssessmentInput
                    payloadType: EvaluateProposalAssessmentPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\EvaluateProposalAssessmentMutation", [value, getUser()])'
            changeProposalDecision:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: ChangeProposalDecisionInput
                    payloadType: ChangeProposalDecisionPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\ChangeProposalDecisionMutation", [value, getUser()])'
            changeProposalAnalysis:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: ChangeProposalAnalysisInput
                    payloadType: ChangeProposalAnalysisPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\ChangeProposalAnalysisMutation", [value, getUser()])'
            analyseProposalAnalysis:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: AnalyseProposalAnalysisInput
                    payloadType: AnalyseProposalAnalysisPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\AnalyseProposalAnalysisMutation", [value, getUser()])'
            # User
            requestUserArchive:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: RequestUserArchiveInput
                    payloadType: RequestUserArchivePayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\RequestUserArchiveMutation", [value, getUser()])'
            # Proposal
            changeProposalPublicationStatus:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: ChangeProposalPublicationStatusInput
                    payloadType: ChangeProposalPublicationStatusPayload
                    mutateAndGetPayload: "@=mutation('changeProposalPublicationStatus', [value, getUser()])"
            changeProposalContent:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: ChangeProposalContentInput
                    payloadType: ChangeProposalContentPayload
                    mutateAndGetPayload: "@=mutation('changeProposalContent', [value, getUser()])"
            createProposal:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: CreateProposalInput
                    payloadType: CreateProposalPayload
                    mutateAndGetPayload: "@=mutation('createProposal', [value, getUser()])"
            createProposalFusion:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: CreateProposalFusionInput
                    payloadType: CreateProposalFusionPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\CreateProposalFusionMutation", [value, getUser()])'
            updateProposalFusion:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: UpdateProposalFusionInput
                    payloadType: UpdateProposalFusionPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\UpdateProposalFusionMutation", [value , getUser()])'
            changeProposalNotation:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: ChangeProposalNotationInput
                    payloadType: ChangeProposalNotationPayload
                    mutateAndGetPayload: "@=mutation('changeProposalNotation', [value, getUser()])"
            changeProposalEvaluers:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: ChangeProposalEvaluersInput
                    payloadType: ChangeProposalEvaluersPayload
                    mutateAndGetPayload: "@=mutation('changeProposalEvaluers', [value,getUser()])"
            followProposal:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: FollowProposalInput
                    payloadType: FollowProposalPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\FollowProposalMutation", [value["proposalId"], value["notifiedOf"], getUser()])'
            followOpinion:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: FollowOpinionInput
                    payloadType: FollowOpinionPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\FollowOpinionMutation", [value["opinionId"], value["notifiedOf"], getUser()])'
            updateFollowProposal:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: UpdateFollowProposalInput
                    payloadType: UpdateFollowProposalPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\UpdateFollowProposalMutation", [value["proposalId"], value["notifiedOf"], getUser()])'
            updateFollowOpinion:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: UpdateFollowOpinionInput
                    payloadType: UpdateFollowOpinionPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\UpdateFollowOpinionMutation", [value["opinionId"], value["notifiedOf"], getUser()])'
            unfollowProposal:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: UnfollowProposalInput
                    payloadType: UnfollowProposalPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\UnfollowProposalMutation", [value, getUser()])'
            unfollowOpinion:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: UnfollowOpinionInput
                    payloadType: UnfollowOpinionPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\UnfollowOpinionMutation", [value, getUser()])'
            selectProposal:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: SelectProposalInput
                    payloadType: SelectProposalPayload
                    mutateAndGetPayload: "@=mutation('selectProposal', [value['proposalId'], value['stepId'], getUser(), value['statusId']])"
            unselectProposal:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: UnselectProposalInput
                    payloadType: UnselectProposalPayload
                    mutateAndGetPayload: "@=mutation('unselectProposal', [value['proposalId'], value['stepId'], getUser()])"
            changeSelectionStatus:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: ChangeSelectionStatusInput
                    payloadType: ChangeSelectionStatusPayload
                    mutateAndGetPayload: "@=mutation('changeSelectionStatus', [ value['proposalId'], value['stepId'], getUser(), value['statusId'] ])"
            changeCollectStatus:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: ChangeCollectStatusInput
                    payloadType: ChangeCollectStatusPayload
                    mutateAndGetPayload: "@=mutation('changeCollectStatus', [value['proposalId'], getUser(), value['statusId'] ])"
            changeProposalProgressSteps:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: ChangeProposalProgressStepsInput
                    payloadType: ChangeProposalProgressStepsPayload
                    mutateAndGetPayload: "@=mutation('changeProgressSteps', [value, getUser()])"
            addProposalsToSteps:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: AddProposalsToStepsInput
                    payloadType: AddProposalsToStepsPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\AddProposalsToStepsMutation", [value, getUser()])'
            deleteProposal:
                access: '@=hasRole("ROLE_SUPER_ADMIN") or (hasRole("ROLE_USER") and service("Capco\\AppBundle\\Helper\\ProposalHelper").isAuthor(args["input"]["proposalId"], getUser()))'
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: DeleteProposalInput
                    payloadType: DeleteProposalPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\DeleteProposalMutation", [value["proposalId"], getUser()])'
            updateRegistrationForm:
                access: "@=hasRole('ROLE_SUPER_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: UpdateRegistrationFormQuestionsInput
                    payloadType: UpdateRegistrationFormQuestionsPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\UpdateRegistrationFormQuestionsMutation", [value])'
            updateRegistrationFormCommunication:
                access: "@=hasRole('ROLE_SUPER_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: UpdateRegistrationFormCommunicationInput
                    payloadType: UpdateRegistrationFormCommunicationPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\UpdateRegistrationFormCommunicationMutation", [value])'
            contactProposalAuthor:
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: ContactProposalAuthorInput
                    payloadType: ContactProposalAuthorPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\ContactProposalAuthorMutation", [value, serv("request_stack")])'
            # Proposal Form
            createProposalForm:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: CreateProposalFormInput
                    payloadType: CreateProposalFormPayload
                    mutateAndGetPayload: "@=mutation('createProposalForm', [value])"
            changeDistrict:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: ChangeDistrictInput
                    payloadType: ChangeDistrictPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\DistrictMutation", [value])'
            updateProposalForm:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: UpdateProposalFormInput
                    payloadType: UpdateProposalFormPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\UpdateProposalFormMutation", [value])'
            updateProposalFormNotificationsConfiguration:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: UpdateProposalFormNotificationsConfigurationInput
                    payloadType: UpdateProposalFormNotificationsConfigurationPayload
                    mutateAndGetPayload: "@=mutation('updateProposalFormNotificationsConfiguration', [value])"
            setEvaluationFormInProposalForm:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: SetEvaluationFormInProposalFormInput
                    payloadType: SetEvaluationFormInProposalFormPayload
                    mutateAndGetPayload: "@=mutation('setEvaluationFormInProposalForm', [value])"
            # Proposal Evaluation
            changeProposalEvaluation:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: ChangeProposalEvaluationInput
                    payloadType: ChangeProposalEvaluationPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\ProposalEvaluationMutation",[value, getUser()])'
            # Contact From
            updateContactPage:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: InternalUpdateContactPageInput
                    payloadType: InternalUpdateContactPagePayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\UpdateContactPageMutation", [value])'

            updateRegistrationPage:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: InternalUpdateRegistrationPageInput
                    payloadType: InternalUpdateRegistrationPagePayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\UpdateRegistrationPageMutation", [value])'

            sendContactForm:
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: SendContactFormInput
                    payloadType: SendContactFormPayload
                    mutateAndGetPayload: "@=mutation('sendContactForm', [value, getUser()])"
            addContactForm:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: AddContactFormInput
                    payloadType: AddContactFormPayload
                    mutateAndGetPayload: "@=mutation('addContactForm', [value])"
            removeContactForm:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: RemoveContactFormInput
                    payloadType: RemoveContactFormPayload
                    mutateAndGetPayload: "@=mutation('removeContactForm', [value, getUser()])"
            updateContactForm:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: UpdateContactFormInput
                    payloadType: UpdateContactFormPayload
                    mutateAndGetPayload: "@=mutation('updateContactForm', [value, getUser()])"
            # Groups
            createGroup:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: CreateGroupInput
                    payloadType: CreateGroupPayload
                    mutateAndGetPayload: "@=mutation('createGroup', [value])"
            updateGroup:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: UpdateGroupInput
                    payloadType: UpdateGroupPayload
                    mutateAndGetPayload: "@=mutation('updateGroup', [value])"
            deleteGroup:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: DeleteGroupInput
                    payloadType: DeleteGroupPayload
                    mutateAndGetPayload: "@=mutation('deleteGroup', [value['groupId']])"
            deleteUserInGroup:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: DeleteUserInGroupInput
                    payloadType: DeleteUserInGroupPayload
                    mutateAndGetPayload: "@=mutation('deleteUserInGroup', [value['userId'], value['groupId']])"
            addUsersInGroup:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: AddUsersInGroupInput
                    payloadType: AddUsersInGroupPayload
                    mutateAndGetPayload: "@=mutation('addUsersInGroup', [value['users'], value['groupId']])"
            updateProfile:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: UpdateProfileInput
                    payloadType: UpdateProfilePayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\UpdateProfileMutation", [value, getUser()])'
            updateProfilePassword:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: UpdateProfilePasswordInput
                    payloadType: UpdateProfilePasswordPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\UpdateProfilePasswordMutation", [value, getUser()])'
            updateProfilePersonalData:
                access: '@=hasRole("ROLE_USER")'
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: UpdateProfilePersonalDataInput
                    payloadType: UpdateProfilePersonalDataPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\UpdateProfilePersonalDataMutation", [value, getUser()])'
            updateProfilePublicData:
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(), value, context, ["ROLE_SUPER_ADMIN"])'
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: UpdateProfilePublicDataInput
                    payloadType: UpdateProfilePublicDataPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\UpdateProfilePublicDataMutation", [value, getUser()])'
            # Contributions
            deleteAccount:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: DeleteAccountInput
                    payloadType: DeleteAccountPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\DeleteAccountMutation", [value, getUser()])'
            updateRequirement:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: UpdateRequirementInput
                    payloadType: UpdateRequirementPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\UpdateRequirementMutation", [value, getUser()])'
            createUser:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: CreateUserInput
                    payloadType: CreateUserPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\CreateUserMutation", [value])'
            updateUserAccount:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: UpdateUserAccountInput
                    payloadType: UpdateUserAccountPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\UpdateUserAccountMutation", [value, getUser()])'
            addUsersToGroupFromEmail:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: AddUsersToGroupFromEmailInput
                    payloadType: AddUsersToGroupFromEmailPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\AddUsersToGroupFromEmailMutation", [value["emails"], value["dryRun"], value["groupId"]])'
            # Questionnaire
            createQuestionnaire:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: CreateQuestionnaireInput
                    payloadType: CreateQuestionnairePayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\CreateQuestionnaireMutation", [value])'
            updateQuestionnaireParameters:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: UpdateQuestionnaireParametersInput
                    payloadType: UpdateQuestionnaireParametersPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\UpdateQuestionnaireParametersMutation", [value])'
            updateQuestionnaireConfiguration:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: UpdateQuestionnaireConfigurationInput
                    payloadType: UpdateQuestionnaireConfigurationPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\UpdateQuestionnaireConfigurationMutation", [value])'
            # Project
            createProject:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: CreateProjectInput
                    payloadType: CreateProjectPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\CreateProjectMutation", [value])'
            # TODO: When the frontend is fully migrated from Sonata, we can delete the above `createProject` and rename `createAlphaProject` to `createProject`
            # and all related Inputs/Payloads/Mutation
            createAlphaProject:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: CreateAlphaProjectInput
                    payloadType: CreateAlphaProjectPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\CreateAlphaProjectMutation", [value])'
            updateAlphaProject:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: UpdateAlphaProjectInput
                    payloadType: UpdateAlphaProjectPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\UpdateAlphaProjectMutation", [value])'

            updateProject:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: UpdateProjectInput
                    payloadType: UpdateProjectPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\UpdateProjectMutation", [value])'
            # Project District
            createProjectDistrict:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: CreateProjectDistrictInput
                    payloadType: CreateProjectDistrictPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\District\\CreateProjectDistrictMutation", [value])'
            deleteProjectDistrict:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: DeleteProjectDistrictInput
                    payloadType: DeleteProjectDistrictPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\District\\DeleteProjectDistrictMutation", [value])'
            updateProjectDistrict:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: UpdateProjectDistrictInput
                    payloadType: CreateProjectDistrictPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\District\\UpdateProjectDistrictMutation", [value])'

            # Shield admin form
            updateShieldAdminForm:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: InternalUpdateShieldAdminFormInput
                    payloadType: InternalUpdateShieldAdminFormPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\UpdateShieldAdminFormMutation", [value])'

            # SSO Configuration
            createOauth2SSOConfiguration:
                access: "@=hasRole('ROLE_SUPER_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: InternalCreateOauth2SSOConfigurationInput
                    payloadType: InternalCreateOauth2SSOConfigurationPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\CreateOauth2SSOConfigurationMutation", [value])'
            updateOauth2SSOConfiguration:
                access: "@=hasRole('ROLE_SUPER_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: InternalUpdateOauth2SSOConfigurationInput
                    payloadType: InternalUpdateOauth2SSOConfigurationPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\UpdateOauth2SSOConfigurationMutation", [value])'
            deleteSSOConfiguration:
                access: "@=hasRole('ROLE_SUPER_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: InternalDeleteSSOConfigurationInput
                    payloadType: InternalDeleteSSOConfigurationPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\DeleteSSOConfigurationMutation", [value])'
            toggleSSOConfigurationStatus:
                access: "@=hasRole('ROLE_SUPER_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: InternalToggleSSOConfigurationStatusInput
                    payloadType: InternalToggleSSOConfigurationStatusPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\ToggleSSOConfigurationStatusMutation", [value])'

            # France Connect
            updateFranceConnectSSOConfiguration:
                access: "@=hasRole('ROLE_SUPER_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: InternalUpdateFranceConnectSSOConfigurationInput
                    payloadType: InternalUpdateFranceConnectSSOConfigurationPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\UpdateFranceConnectSSOConfigurationMutation", [value])'

            # Locale
            updateLocaleStatus:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: UpdateLocaleStatusInput
                    payloadType: UpdateLocaleStatusPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\Locale\\UpdateLocaleStatusMutation", [value])'
            setDefaultLocale:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: SetDefaultLocaleInput
                    payloadType: SetDefaultLocalePayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\Locale\\SetDefaultLocaleMutation", [value])'

            setUserDefaultLocale:
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: SetUserDefaultLocaleInput
                    payloadType: SetUserDefaultLocalePayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\Locale\\SetUserDefaultLocaleMutation", [value, getUser()])'
            # Media
            cropMedia:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: CropMediaInput
                    payloadType: CropMediaPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\CropMediaMutation", [value])'

            # Fonts
            changeFont:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: InternalChangeFontInput
                    payloadType: InternalChangeFontPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\Font\\ChangeFontMutation", [value])'
            deleteFont:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: InternalDeleteFontInput
                    payloadType: InternalDeleteFontPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\DeleteFontMutation", [value])'
            assignSupervisorToProposals:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: AssignSupervisorToProposalsInput
                    payloadType: AssignSupervisorToProposalsPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\AssignSupervisorToProposalsMutation", [value, getUser()])'
            assignDecisionMakerToProposals:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: AssignDecisionMakerToProposalsInput
                    payloadType: AssignDecisionMakerToProposalsPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\AssignDecisionMakerToProposalsMutation", [value, getUser()])'

            # AnalysisConfiguration
            configureAnalysis:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: ConfigureAnalysisInput
                    payloadType: ConfigureAnalysisPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\ConfigureAnalysisMutation", [value, getUser()])'

            updateRedirectIOKey:
                access: "@=hasRole('ROLE_ADMIN')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: InternalUpdateRedirectIOProjectIdInput
                    payloadType: InternalUpdateRedirectIOProjectIdPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\UpdateRedirectIOProjectIdMutation", [value])'
            revokeAnalystsToProposals:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: InternalRevokeAnalystsToProposalsInput
                    payloadType: InternalRevokeAnalystsToProposalsPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\RevokeAnalystsToProposalsMutation", [value, getUser()])'
            assignAnalystsToProposals:
                access: "@=hasRole('ROLE_USER')"
                builder: 'Relay::Mutation'
                builderConfig:
                    inputType: InternalAssignAnalystsToProposalsInput
                    payloadType: InternalAssignAnalystsToProposalsPayload
                    mutateAndGetPayload: '@=mutation("Capco\\AppBundle\\GraphQL\\Mutation\\AssignAnalystsToProposalsMutation", [value, getUser()])'
