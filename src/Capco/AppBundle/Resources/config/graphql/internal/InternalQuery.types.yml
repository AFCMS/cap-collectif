InternalQuery:
  type: object
  inherits:
    - PublicQuery
  config:
    name: Query
    description: 'Root of the schema.'
    fields:
      viewer:
        type: 'InternalUser!'
      users:
        type: 'InternalUserConnection!'
        argsBuilder: 'Relay::Connection'
        args:
          superAdmin:
            type: 'Boolean'
            defaultValue: false
            description: 'Remove super admin from export.'
        resolve:
          '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\UserQueryResolver", [args])'
      consultations:
        type: '[InternalConsultation!]!'
        args:
          id:
            description:
              'If omitted, returns all consultations. If provided, returns the consultation of the particular id.'
            type: 'ID'
        resolve: "@=resolver('consultation', [args])"
      groups:
        description: 'Lookup groups.'
        type: '[Group!]!'
        access: "@=hasRole('ROLE_ADMIN')"
        resolve: "@=resolver('groups')"
      events:
        type: 'EventConnection'
        argsBuilder: 'Relay::Connection'
        description: 'The list of events'
        args:
          time:
            type: 'EventTime'
            description: 'PASSED for old, FUTURE for current and next'
          theme:
            type: 'ID'
            description: 'If non-null, filters events with the given theme.'
          project:
            type: 'ID'
            description: 'If non-null, filters events with the given project.'
          author:
            type: 'ID'
            description: 'If non-null, filters events with the given author.'
          term:
            type: 'String'
            description: 'If non-null, filters events with the given string to look for.'
        resolve:
          '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Event\\EventsResolver", [args, serv("request_stack")])'
      proposalForms:
        description: 'Lookup forms.'
        type: '[ProposalForm]!'
        resolve:
          '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\QueryProposalFormResolver")'
      availableDistrictsForLocalisation:
        type: '[District!]!'
        description: 'Lookup availables districts on a proposalForm for a given address.'
        args:
          proposalFormId:
            type: 'ID!'
          latitude:
            type: 'Float!'
          longitude:
            type: 'Float!'
        resolve:
          "@=resolver('query_available_districts_for_location', [args['proposalFormId'], args['latitude'], args['longitude']])"
      votesByContribution:
        type: '[ProposalVote!]!'
        description: 'TO BE REMOVED'
        args:
          contribution:
            type: 'ID!'
        resolve: "@=resolver('votesByContribution', [args])"
      contributions:
        type: '[Opinion!]!'
        description: 'TO BE REMOVED'
        args:
          consultation:
            description: 'Returns all contributions of the provided consultation.'
            type: 'ID!'
        resolve: "@=resolver('contributions', [args])"
      contributionsBySection:
        type: '[Opinion!]!'
        description: 'TO BE REMOVED'
        args:
          sectionId:
            type: 'ID!'
          limit:
            description: 'Max depth.'
            type: 'Int!'
        resolve: "@=resolver('contributionsBySection', [args])"
      question:
        type: 'Question!'
        description: 'TO BE REMOVED'
        args:
          id:
            type: 'Int!'
        resolve: "@=resolver('query_question', [args])"
      availableQuestionnaires:
        type: '[InternalQuestionnaire!]!'
        resolve: "@=resolver('query_get_available_questionnaires')"
