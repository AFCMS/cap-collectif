InternalUser:
  type: object
  inherits:
    - PreviewUser
    - InternalPrimaryKey
    - UniformResourceLocatable
  config:
    description: "A user is an individual's account."
    interfaces: [Node, UniformResourceLocatable]
    name: User
    fields:
      media:
        type: 'InternalMedia'
        description: "The user's public avatar file."
      # TODO rename this to `name`
      displayName:
        type: 'String!'
        description: "The user's public profile name."
      # TODO rename this to `isVip`
      vip:
        type: 'Boolean!'
        description: 'Whether or not this user is a VIP.'
      slug:
        type: 'String!'
        description: "The user's slug (unique)."
      # TODO rename this to `lastLoginAt`
      lastLogin:
        type: 'DateTime'
        description: 'Last connection of the user.'
        access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
      notificationsConfiguration:
        type: 'UserNotificationsConfiguration!'
        description: 'A user notifications preferences'
        access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
      # TODO rename this to `isLocked`
      locked:
        type: 'Boolean!'
        access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
      phoneConfirmed:
        type: 'Boolean!'
        access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
      phoneConfirmationSentAt:
        type: 'DateTime'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserPhoneConfirmationSentAtResolver", [value])'
        access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
      gender:
        type: 'GenderValue'
        access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
      firstname:
        type: 'String'
        access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
      lastname:
        type: 'String'
        access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
      dateOfBirth:
        type: 'DateTime'
        access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
      roles:
        type: '[UserRole!]!'
        access: "@=hasRole('ROLE_USER')"
        description: 'Unattended roles as array.'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserRolesResolver", [value, getUser()])'
      rolesText:
        type: 'String'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserRolesTextResolver", [value, getUser(),context])'
        description: 'Array of roles converted and translated to string.'
      isArchiveDeleted:
        access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
        type: 'Boolean!'
        description: 'Is the personal archive of the user has been deleted'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserArchiveDeletedResolver", [getUser()])'
      isArchiveReady:
        access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
        type: 'Boolean!'
        description: 'Is the personal archive of the user is ready?'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserArchiveReadyResolver", [getUser()])'
      firstArchive:
        access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
        type: 'Boolean!'
        description: 'Is the personal archive of the user is being asked for the first time?'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserArchiveFirstResolver", [getUser()])'
      address:
        type: 'String'
        access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
      address2:
        type: 'String'
        access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
      zipCode:
        type: 'String'
        access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
      city:
        type: 'String'
        access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
      phone:
        type: 'String'
        access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
      googleId:
        type: 'String'
        access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
      facebookId:
        type: 'String'
        access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
      samlId:
        type: 'String'
        access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
      opinionsCount:
        type: 'Int!'
      opinionVotesCount:
        type: 'Int!'
      opinionVersionsCount:
        type: 'Int!'
      argumentsCount:
        type: 'Int!'
      argumentVotesCount:
        type: 'Int!'
      proposalsCount:
        type: 'Int!'
      proposalVotesCount:
        type: 'Int!'
      commentVotes:
        type: 'CommentVoteConnection!'
        argsBuilder: 'Relay::Connection'
        description: 'Get all comment votes of the user.'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserCommentVotesResolver", [value, args])'
        args:
          first:
            type: 'Int'
            description: 'Returns the first n elements from the list.'
            defaultValue: 100
      contributionsToDeleteCount:
        type: 'Int!'
        description: 'Provisional number of contributions who will be totally deleted if the user chose to delete his account.'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserContributionsToDeleteCount", [value])'
      sourcesCount:
        type: 'Int!'
      replies:
        type: 'InternalReplyConnection!'
        argsBuilder: 'Relay::Connection'
        description: 'A list of replies associated to the user.'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserRepliesResolver", [value])'
      postCommentsCount:
        type: 'Int!'
      eventCommentsCount:
        type: 'Int!'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserEventCommentsCountResolver", [value])'
      consentExternalCommunication:
        type: 'Boolean!'
        description: 'Whether or not this user consent external communication.'
        access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
      followingProposals:
        type: 'InternalProposalConnection!'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Proposal\\ProposalsFollowedByUserResolver", [value, args])'
        description: 'Array of proposals followed by current user.'
        args:
          orderBy:
            type: 'String'
            description: 'Ordering options for followers returning from the connection'
          after:
            type: 'String'
            description: 'Returns the elements in the list that come after the specified global ID.'
          first:
            type: 'Int'
            defaultValue: 32
            description: 'Returns the first n elements from the list.'
          before:
            type: 'String'
            description: 'Returns the elements in the list that come before the specified global ID.'
          last:
            type: 'Int'
            description: 'Returns the last n elements from the list.'
      followingOpinions:
        type: 'OpinionConnection!'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Opinion\\OpinionsFollowedByUserResolver", [value, args])'
        description: 'Array of opinions followed by current user.'
        argsBuilder: 'Relay::Connection'
        args:
          orderBy:
            type: 'String'
            description: 'Ordering options for followers returning from the connection'
      contributionsCount:
        type: 'Int!'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserContributionsCountResolver", [value])'
        description: 'Total of contributions count'
      profilePageIndexed:
        type: 'Boolean'
        description: 'Whether or not this user profile page is indexed.'
        access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
      neighborhood:
        type: 'String'
        description: 'Your localisation'
        access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
      proposalVotes:
        type: 'ProposalVoteConnection!'
        argsBuilder: 'Relay::Connection'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\User\\ViewerProposalVotesResolver", [value, args, context, getUser()])'
        args:
          first:
            type: 'Int'
            defaultValue: 100
          orderBy:
            type: 'ProposalVotesOrder'
            defaultValue: { field: PUBLISHED_AT, direction: DESC }
          stepId:
            type: 'ID'
          includeUnpublished:
            type: 'Boolean'
            description: '(ROLE_SUPER_ADMIN only) Select also unpublished votes.'
            defaultValue: false
      medias:
        type: '[InternalMedia]!'
        description: 'Get all medias the user has published.'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserMediasResolver", [value, args])'
      votes:
        type: 'InternalVoteConnection!'
        argsBuilder: 'Relay::Connection'
        description: 'Get all votes of the user.'
        args:
          first:
            type: 'Int'
            defaultValue: 100
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserVotesResolver", [value, args])'
      groups:
        type: 'GroupConnection!'
        argsBuilder: 'Relay::Connection'
        description: 'Get all groups where the user is.'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserGroupsResolver", [value, args])'
      reports:
        type: 'ReportConnection!'
        argsBuilder: 'Relay::Connection'
        description: 'Get all reports the user has done.'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserReportsResolver", [value, args])'
      events:
        type: 'InternalEventConnection!'
        argsBuilder: 'Relay::Connection'
        description: 'Get all events the user has created.'
        args:
          orderBy:
            type: 'EventsOrder'
            defaultValue: { field: START_AT, direction: DESC }
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserEventsResolver", [value, args])'
      contributions:
        type: 'ContributionConnection!'
        args:
          type:
            type: 'ContributionType'
            description: 'Type of contribustion requested'
          after:
            type: 'String'
            description: 'Returns the elements in the list that come after the specified global ID.'
          first:
            type: 'Int'
            defaultValue: 100
            description: 'Returns the first n elements from the list.'
          before:
            type: 'String'
            description: 'Returns the elements in the list that come before the specified global ID.'
          last:
            type: 'Int'
            description: 'Returns the last n elements from the list.'
        description: "Return the user's contributions of the type requested."
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserContributionResolver", [value, args])'
      isSubscribedToNewsLetter:
        type: 'Boolean!'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserIsSubscribedToNewsLetterResolver", [value])'
        description: 'Is user subscribed to the newsletter ?'
      subscribedToNewsLetterAt:
        type: 'DateTime'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserSubscribedToNewsLetterAtResolver", [value])'
        description: 'When the user subscribed to the newsletter.'
      isEmailConfirmed:
        type: 'Boolean'
        description: 'Has the user confirmed his email address ?'
      emailConfirmationSentAt:
        type: 'DateTime'
        description: 'When the user email confirmation was sent.'
      arguments:
        type: 'ArgumentConnection!'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Argument\\ArgumentByUserResolver", [value, args])'
        description: 'The arguments created by user.'
        argsBuilder: 'Relay::Connection'
      responses:
        type: 'InternalResponseConnection!'
      url:
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserUrlResolver", [value])'
      projects:
        type: 'InternalProjectConnection!'
        description: 'Get all projects the user has created.'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserProjectsResolver", [value, args])'
        argsBuilder: 'Relay::Connection'