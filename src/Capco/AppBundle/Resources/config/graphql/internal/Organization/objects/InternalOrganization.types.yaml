InternalOrganization:
    type: object
    inherits:
        - Node
        - Author
        - InternalPostOwner
        - InternalEventOwner
        - InternalProjectOwner
    config:
        description: 'An organization.'
        name: Organization
        interfaces:
            - Node
            - Author
            - InternalPostOwner
            - InternalEventOwner
            - InternalProjectOwner
        fields:
            id:
                description: 'The ID of an object.'
                builder: 'Relay::GlobalId'
                builderConfig:
                    typeName: Organization
            media:
                type: 'InternalMedia'
                description: "The organization's logo file"
                resolve: '@=value.getLogo()'
            logo:
                type: 'InternalMedia'
                description: "The organization's logo file"
            banner:
                type: 'InternalMedia'
                description: "The organization's banner file"
            body:
                type: 'String'
                argsBuilder: 'Translatable::Field'
                resolve: '@=value.getBody(args["locale"], true)'
            biography:
                type: 'String'
                argsBuilder: 'Translatable::Field'
                resolve: '@=value.getBody(args["locale"], true)'
            title:
                type: 'String!'
                argsBuilder: 'Translatable::Field'
                resolve: '@=value.getTitle(args["locale"], true)'
            slug:
                type: 'String!'
                argsBuilder: 'Translatable::Field'
                resolve: '@=value.getSlug(args["locale"], true)'
            username:
                type: 'String!'
                description: "The organization's public name."
                resolve: '@=value.getTitle(args["locale"], true)'
            isViewer:
                type: 'Boolean!'
                access: "@=hasRole('ROLE_USER')"
                resolve: '@=value.isViewer(getUser())'
                description: 'Whether or not this user is the authenticated user.'
            displayName:
                type: 'String!'
                argsBuilder: 'Translatable::Field'
                resolve: '@=value.getTitle(args["locale"], true)'
            url:
                type: 'URI!'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\User\\OrganizationUrlResolver", [value])'
            members:
                type: 'InternalOrganizationMemberConnection'
                argsBuilder: 'Relay::ForwardConnection'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Organization\\OrganizationMembersResolver", [value, getUser(), args])'
            socialNetworks:
                type: 'InternalOrganizationSocialNetworks'
                resolve: '@=value.getOrganizationSocialNetworks()'
            pendingOrganizationInvitations:
                access: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Organization\\OrganizationAdminAccessResolver", [value, getUser()])'
                type: 'PendingOrganizationInvitationConnection'
                description: 'Get all pending invitations.'
                argsBuilder: 'Relay::ForwardConnection'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Organization\\PendingOrganizationInvitationsResolver", [value, args])'
            deletedAt:
                type: 'DateTime'
                description: 'The date when the organization was deleted.'
            projects:
                type: 'InternalProjectConnection!'
                description: 'Get all projects that the organization owns.'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Project\\OwnerProjectsResolver", [value, args, getUser()])'
                argsBuilder: 'Relay::ForwardConnection'
            events:
                type: 'InternalEventConnection!'
                description: 'Get all events that the organization owns.'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Event\\OwnerEventsResolver", [value, args])'
                argsBuilder: 'Relay::ForwardConnection'
