InternalProject:
  type: object
  inherits:
    - PreviewProject
    - UniformResourceAdminLocatable
    - InternalPrimaryKey
  config:
    name: Project
    interfaces:
      - UniformResourceAdminLocatable
    description: 'A participatory project.'
    fields:
      # Override PublicProject or PreviewProject fields
      contributors:
        type: 'InternalUserConnection!'
      votes:
        type: 'InternalVoteConnection!'
      steps:
        type: '[InternalStep!]!'
      cover:
        type: 'InternalMedia'
      authors:
        type: '[InternalUser!]!'
      type:
        type: 'InternalProjectType'
      # Internal fields
      slug:
        type: 'String!'
        description: 'Slug of a project'
      video:
        type: 'String'
      hasParticipativeStep:
        type: Boolean!
        resolve: '@=value.hasParticipativeStep(args["exceptStepId"])'
        args:
          exceptStepId:
            type: 'ID'
            description: 'If specified, get if the project is participative while excluding the specified step. It allows to know if a particular step is the only participative step in project.'
            defaultValue: null
      themes:
        type: '[Theme!]'
      votableSteps:
        type: '[ProposalStep!]!'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Project\\ProjectVotableStepsResolver", [value])'
      visibility:
        type: 'ProjectVisibility!'
        description: 'The visibility of the project.'
      adminUrl:
        type: 'URI!'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Project\\ProjectAdminUrlResolver", [value])'
      opinionCanBeFollowed:
        type: 'Boolean!'
        description: 'State of activation of Opinion subscription.'
      restrictedViewers:
        type: 'GroupConnection'
        argsBuilder: 'Relay::Connection'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Project\\ProjectAllowedGroupsResolver", [value, args])'
        description: 'Viewers that can access the project, null otherwise.'
      districts:
        type: '[ProjectDistrict!]!'
        description: 'The districts related to the project.'
      comments:
        description: 'The comments related to the project.'
        type: 'CommentConnection!'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Project\\ProjectCommentsResolver", [value, args])'
        argsBuilder: 'Relay::Connection'
        args:
          onlyTrashed:
            type: 'Boolean'
            description: 'The connection will return only the trashed results.'
            defaultValue: false
          orderBy:
            type: 'CommentOrder'
            defaultValue: { field: PUBLISHED_AT, direction: DESC }
      isVotesCounterDisplayable:
        type: 'Boolean!'
      isContributionsCounterDisplayable:
        type: 'Boolean!'
      isParticipantsCounterDisplayable:
        type: 'Boolean!'
      isExternal:
        type: 'Boolean!'
        description: "Whether it's an external project or not."
      externalLink:
        type: 'URI'
        description: 'URL of the external project.'
      opinionTerm:
        type: 'Int!'
        description: 'Opinion term of the project.'
      proposals:
        type: 'InternalProposalConnection'
        argsBuilder: 'Relay::Connection'
        args:
          orderBy:
            # TODO we can change to an array to allow multiple orderBy (first by comment, then by votes if equal)
            # but this is not a BC thanks to the GraphQL spec
            type: 'PreviewProposalOrder'
            description: 'Ordering options for proposals returned from the connection.'
            defaultValue: { field: 'PUBLISHED_AT', direction: 'ASC' }
          trashedStatus:
            type: 'ProposalTrashedStatus'
            description: 'If non-null, filters proposals with the given trashed status (eg: visible, not visible).'
            defaultValue: 'NOT_TRASHED'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Project\\ProjectProposalsResolver", [value, args])'
        description: 'Vergrregrergr'
