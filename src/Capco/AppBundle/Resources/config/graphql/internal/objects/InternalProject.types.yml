InternalProject:
  type: object
  inherits:
    - PreviewProject
    - UniformResourceAdminLocatable
  config:
    name: Project
    interfaces:
      - UniformResourceLocatable
      - UniformResourceAdminLocatable
      - Node
    description: 'A participatory project.'
    fields:
      contributors:
        type: 'InternalUserConnection!'
      votes:
        type: 'InternalVoteConnection!'
      steps:
        type: '[Step!]!'
        resolve: '@=value.getRealSteps()'
      author:
        type: 'InternalUser!'
      video:
        type: 'String'
      cover:
        type: 'Media'
        resolve: '@=value.getCover()'
      contributionsCount:
        type: 'Int!'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Project\\ProjectContributionResolver", [value])'
      hasParticipativeStep:
        type: Boolean!
        resolve: '@=value.hasParticipativeStep()'
      links:
        type: 'ProjectLinks!'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Project\\ProjectLinksResolver", [value])'
      type:
        type: 'ProjectType'
        resolve: '@=value.getProjectType()'
      themes:
        type: '[Theme!]'
      url:
        type: 'URI!'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Project\\ProjectUrlResolver", [value])'
      votableSteps:
        type: '[ProposalStep!]!'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Project\\ProjectVotableStepsResolver", [value])'
      visibility:
        type: 'ProjectVisibility!'
        description: 'The visibility of project'
      adminUrl:
        type: 'URI!'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Project\\ProjectAdminUrlResolver", [value])'
      opinionCanBeFollowed:
        type: 'Boolean!'
        description: 'State of activation of Opinion subscription.'
      restrictedViewers:
        type: 'GroupConnection'
        argsBuilder: 'Relay::Connection'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Project\\ProjectAllowedGroupsResolver", [value, args])'
      districts:
        type: '[ProjectDistrict]'
        description: 'The district of the project'
      comments:
        description: 'The comments related to the project.'
        type: 'CommentConnection!'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Project\\ProjectCommentsResolver", [value, args])'
        argsBuilder: 'Relay::Connection'
        args:
          onlyTrashed:
            type: 'Boolean'
            description: 'The connection will return only the trashed results.'
            defaultValue: false
