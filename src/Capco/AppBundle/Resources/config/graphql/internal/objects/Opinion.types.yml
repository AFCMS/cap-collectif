Opinion:
  type: object
  inherits:
    [
      Node,
      PublicPublishable,
      Argumentable,
      Sourceable,
      Reportable,
      Contribution,
      Trashable,
      ContributionWithAuthor,
      EditableContribution,
      WithFollowers,
    ]
  config:
    description: 'A contribution'
    interfaces:
      [
        Node,
        PublicPublishable,
        Argumentable,
        Sourceable,
        Reportable,
        Contribution,
        Trashable,
        ContributionWithAuthor,
        EditableContribution,
      ]
    fields:
      createdAt:
        type: 'DateTime!'
        description: 'Identifies the date and time when the object was created.'
      url:
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Opinion\\OpinionUrlResolver", [value])'
      pinned:
        type: 'Boolean!'
        description: 'true if the contribution is pinned.'
      viewerHasReport:
        resolve: '@=value.userHasReport(getUser())'
      step:
        type: 'InternalConsultation!'
      viewerVote:
        type: 'OpinionVote'
        description: 'The viewer vote.'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Opinion\\OpinionViewerVoteResolver", [value, getUser()])'
      votes:
        type: 'YesNoPairedVoteConnection!'
        argsBuilder: 'Relay::Connection'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Opinion\\OpinionVotesResolver", [value, args])'
        args:
          orderBy:
            type: 'ProposalVotesOrder'
            defaultValue: { field: PUBLISHED_AT, direction: DESC }
          value:
            type: 'YesNoPairedVoteValue'
            description: 'Filters vote by value'
      title:
        type: 'String!'
        description: 'Identifies the contribution title.'
      body:
        type: 'HTML!'
        description: 'Identifies the body of the contribution.'
      bodyText:
        type: 'String!'
        description: 'Identifies the body of the contribution rendered to text.'
      versions:
        type: 'VersionConnection!'
        argsBuilder: 'Relay::Connection'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Opinion\\OpinionVersionsResolver", [value, args])'
        description: 'The versions related to the contribution.'
        args:
          orderBy:
            type: 'VersionOrder'
            defaultValue: { field: PUBLISHED_AT, direction: DESC }
      viewerVersionsUnpublished:
        access: '@=hasRole("ROLE_USER")'
        type: 'VersionConnection!'
        argsBuilder: 'Relay::Connection'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Opinion\\OpinionViewerVersionsUnpublishedResolver", [value, args, getUser()])'
        description: 'The viewer versions related to the contribution.'
        args:
          orderBy:
            type: 'VersionOrder'
            defaultValue: { field: PUBLISHED_AT, direction: DESC }
      section:
        type: 'Section!'
        description: 'Where the proposition has been placed.'
        resolve: "@=resolver('proposition_section', [value])"
      contribuable:
        resolve: '@=value.canContribute()'
      answer:
        type: 'Answer'
        resolve: '@=value.getAnswer()'
      ranking:
        type: 'Int'
      modals:
        type: '[OpinionModal]'
      appendices:
        type: '[Appendix]'
      followers:
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Opinion\\OpinionFollowersConnection", [value, args])'
        argsBuilder: 'Relay::Connection'
        args:
          orderBy:
            type: 'FollowerOrder'
            defaultValue: { field: FOLLOWED_AT, direction: DESC }
      viewerFollowingConfiguration:
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\ViewerFollowingConfigurationOpinionResolver", [value, getUser()])'
      viewerIsFollowing:
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\ViewerFollowOpinionResolver", [value, getUser()])'
      project:
        type: 'InternalProject'
        description: 'The related project.'
