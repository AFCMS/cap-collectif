Proposal:
  type: object
  inherits:
    [
      Node,
      Contribution,
      Commentable,
      Publishable,
      Draftable,
      Reportable,
      Trashable,
      WithFollowers,
      UniformResourceLocatable,
      UniformResourceAdminLocatable,
    ]
  config:
    description: 'A budget contribution'
    interfaces:
      [
        Node,
        Contribution,
        Commentable,
        Publishable,
        Draftable,
        Reportable,
        Trashable,
        UniformResourceLocatable,
        UniformResourceAdminLocatable,
      ]
    fields:
      url:
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Proposal\\ProposalUrlResolver", [value])'
      adminUrl:
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Proposal\\ProposalAdminUrlResolver", [value])'
        access: "@=service('security.authorization_checker').isGranted('ROLE_ADMIN')"
      progressSteps:
        type: '[ProgressStep!]!'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Proposal\\ProposalProgressStepsResolver", [value])'
      evaluers:
        type: '[Group!]!'
      currentVotableStep:
        type: 'ProposalStep'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Proposal\\ProposalCurrentVotableStepResolver", [value])'
      viewerIsAnEvaluer:
        type: 'Boolean!'
        resolve: "@=resolver('proposal_viewer_is_evaluer', [value, getUser()])"
      news:
        type: 'NewsConnection!'
        argsBuilder: 'Relay::Connection'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Proposal\\ProposalNewsResolver", [value, args])'
        args:
          first:
            type: 'Int'
            defaultValue: 30
          orderBy:
            type: 'ProposalOrder'
            defaultValue: { field: PUBLISHED_AT, direction: DESC }
      reportings:
        type: 'ReportingConnection!'
        argsBuilder: 'Relay::Connection'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Proposal\\ProposalReportingsResolver", [value, args])'
        args:
          first:
            type: 'Int'
            defaultValue: 30
          orderBy:
            type: 'ReportingOrder'
            defaultValue: { field: CREATED_AT, direction: DESC }
      project:
        type: 'Project!'
        description: 'The related project.'
      status:
        type: 'Status'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Proposal\\ProposalStatusResolver", [value, args])'
        args:
          step:
            type: 'ID'
            description: 'Used to get the status on a selection step.'
      selections:
        type: '[Selection!]!'
      likers:
        type: '[InternalUser!]!'
      estimation:
        type: 'Int'
      responses:
        type: '[Response]!'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Proposal\\ProposalResponsesResolver", [value, getUser(), context])'
      media:
        type: 'Media'
      theme:
        type: 'Theme'
        resolve: '@=value.getTheme()'
      category:
        type: 'ProposalCategory'
      district:
        type: 'ProposalDistrict'
      address:
        type: 'Address'
      formattedAddress:
        type: 'String'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Type\\FormattedAddressTypeResolver", [value])'
      author:
        type: 'InternalUser!'
        description: 'The author of the contribution.'
      deletedAt:
        type: 'DateTime'
        description: 'The delete date.'
      updatedAt:
        type: 'DateTime'
        description: 'The updated date.'
      updatedBy:
        type: 'InternalUser'
        description: 'The update user.'
        resolve: '@=value.getUpdateAuthor()'
      publicationStatus:
        type: 'ProposalPublicationStatus!'
        description: 'The publication status for this proposal.'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Proposal\\ProposalPublicationStatusResolver", [value])'
      reference:
        type: 'String!'
        description: 'The unique reference of proposal'
        resolve: "@=resolver('proposal_reference', [value])"
      title:
        type: 'String!'
        description: 'Identifies the contribution title.'
      body:
        type: 'HTML'
        description: 'Identifies the body of the contribution.'
      bodyText:
        type: 'String!'
        description: 'Identifies the body of the contribution rendered to text.'
      summary:
        type: 'String'
        description: 'Identifies the summary of the contribution.'
      summaryOrBodyExcerpt:
        type: 'String'
        description: 'Identifies the preview text of the contribution.'
      form:
        type: 'ProposalForm!'
        description: 'Identifies the form where the contribution was submitted.'
      evaluation:
        type: 'ProposalEvaluation'
        description: 'Identifies the answers to an evaluation form.'
        resolve: "@=resolver('proposal_evaluation', [value])"
      draft:
        type: 'Boolean!'
        description: 'Identifies proposals as draft.'
      # TODO remove this counter
      commentsCount:
        type: 'Int!'
        description: 'Count number of comments for the proposal.'
      votes:
        type: 'ProposalVoteConnection!'
        argsBuilder: 'Relay::Connection'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Proposal\\ProposalVotesResolver", [value, args, context])'
        args:
          first:
            type: 'Int'
            defaultValue: 30
          orderBy:
            type: 'ProposalVotesOrder'
            defaultValue: { field: PUBLISHED_AT, direction: DESC }
          stepId:
            type: 'ID'
            description: 'If provided, retrieve only in this step.'
          includeUnpublished:
            type: 'Boolean'
            description: '(ROLE_SUPER_ADMIN only) Select also unpublished votes.'
            defaultValue: false
      createdAt:
        type: 'DateTime!'
        description: 'Identifies the date and time when the object was created.'
      mergedFrom:
        type: '[Proposal!]!'
        description: 'If the proposal is a fusion, contains the list of merged proposals.'
        resolve: '@=value.getChildConnections()'
      mergedIn:
        type: '[Proposal!]!'
        description: 'If the proposal listed in a fusion, contains the list of fusions.'
        resolve: '@=value.getParentConnections()'
      followers:
        type: 'InternalUserConnection!'
        args:
          orderBy:
            type: 'FollowerOrder'
            defaultValue: { field: FOLLOWED_AT, direction: DESC }
            description: 'Ordering options for followers returning from the connection'
          after:
            type: 'String'
            description: 'Returns the elements in the list that come after the specified global ID.'
          first:
            type: 'Int'
            defaultValue: 32
            description: 'Returns the first n elements from the list.'
          before:
            type: 'String'
            description: 'Returns the elements in the list that come before the specified global ID.'
          last:
            type: 'Int'
            description: 'Returns the last n elements from the list.'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Proposal\\ProposalFollowerConnection", [value, args])'
      viewerIsFollowing:
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\ViewerFollowProposalResolver", [value, getUser()])'
        description: 'View follow current proposal'
      viewerFollowingConfiguration:
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\ViewerFollowingConfigurationProposalResolver", [value, getUser()])'
      postsCount:
        type: 'Int!'
        resolve: "@=resolver('proposal_posts_count', [value])"
      viewerCanSeeEvaluation:
        type: 'Boolean!'
        resolve: "@=resolver('proposal_viewer_can_see_evaluation', [value, getUser()])"
      viewerHasVote:
        access: "@=hasRole('ROLE_USER')"
        type: 'Boolean!'
        args:
          step:
            type: 'ID!'
            description: 'The concerned step.'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Proposal\\ProposalViewerHasVoteResolver", [value, args, getUser()])'
      viewerVote:
        access: "@=hasRole('ROLE_USER')"
        type: 'ProposalVote'
        args:
          step:
            type: 'ID!'
            description: 'The concerned step.'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Proposal\\ProposalViewerVoteResolver", [value, args, getUser()])'
      viewerHasReport:
        resolve: '@=value.userHasReport(getUser())'
      votableSteps:
        type: '[ProposalStep!]!'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Proposal\\ProposalVotableStepsResolver", [value])'
