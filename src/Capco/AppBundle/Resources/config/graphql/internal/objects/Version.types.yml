Version:
  type: object
  inherits:
    [
      Contribution,
      Sourceable,
      Reportable,
      Argumentable,
      Trashable,
      PublicPublishable,
      ContributionWithAuthor,
      EditableContribution,
      UniformResourceLocatable,
      WithFollowers,
    ]
  config:
    description: 'A version of contribution'
    interfaces:
      [
        Node,
        Contribution,
        Sourceable,
        Reportable,
        PublicPublishable,
        Argumentable,
        Trashable,
        ContributionWithAuthor,
        EditableContribution,
        UniformResourceLocatable,
      ]
    fields:
      createdAt:
        type: 'DateTime!'
        description: 'Identifies the date and time when the object was created.'
      url:
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\OpinionVersion\\OpinionVersionUrlResolver", [value])'
      viewerHasReport:
        resolve: '@=value.userHasReport(getUser())'
      comment:
        type: 'String'
        description: 'Explenation.'
      step:
        type: 'InternalConsultationStep!'
      votes:
        type: 'YesNoPairedVoteConnection!'
        argsBuilder: 'Relay::Connection'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Opinion\\OpinionVotesResolver", [value, args])'
        args:
          orderBy:
            type: 'ProposalVotesOrder'
            defaultValue: { field: PUBLISHED_AT, direction: DESC }
          value:
            type: 'YesNoPairedVoteValue'
            description: 'Filters vote by value'
      kind:
        resolve: 'version'
      title:
        type: 'String!'
        description: 'The title of the contribution.'
      body:
        type: 'HTML!'
        description: 'The content of the contribution.'
      bodyText:
        type: 'HTML!'
        description: 'The content of the contribution.'
      section:
        type: 'Section!'
        description: 'The section of the parent opinion.'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Opinion\\OpinionSectionResolver", [value])'
      answer:
        type: 'Answer'
        resolve: '@=value.getAnswer()'
      contribuable:
        resolve: '@=value.canContribute(getUser())'
      parent:
        type: 'Opinion!'
      viewerVote:
        type: 'OpinionVote'
        access: "@=hasRole('ROLE_USER')"
        description: 'The viewer vote.'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Opinion\\OpinionViewerVoteResolver", [value, getUser()])'
      diff:
        type: 'HTML'
      project:
        type: 'InternalProject'
        description: 'The related project.'
      viewerFollowingConfiguration:
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\ViewerFollowingConfigurationOpinionVersionResolver", [value, getUser()])'
      viewerIsFollowing:
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\ViewerFollowOpinionVersionResolver", [value, getUser()])'
      followers:
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\OpinionVersion\\OpinionVersionFollowersConnection", [value, args])'
        args:
          orderBy:
            type: 'FollowerOrder'
            defaultValue: { field: FOLLOWED_AT, direction: DESC }
