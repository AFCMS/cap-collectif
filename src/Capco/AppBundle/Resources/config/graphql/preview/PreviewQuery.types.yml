PreviewQuery:
  type: object
  inherits:
    - PublicQuery
  config:
    name: Query
    description: 'Root of the schema.'
    fields:
      projects:
        description: 'Lookup projects.'
        argsBuilder: 'Relay::Connection'
        args:
          orderBy:
            type: 'ProjectOrder'
            defaultValue: { field: LATEST, direction: DESC }
          term:
            type: 'String'
            description: 'If non-null, projects with the given string to look for.'
          status:
            type: 'ID'
            description: 'If non-null, filter projects by statuses.'
          theme:
            type: 'ID'
            description: 'If non-null, filter projects by themes'
          type:
            type: 'ID'
            description: 'If non-null, filter projects by types'
          author:
            type: 'ID'
            description: 'If non-null, filter projects by author'
          withEventOnly:
            type: 'Boolean'
            description: 'If non-null, filter projects with events'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Project\\ProjectsResolver", [args, getUser()])'
      events:
        type: 'PreviewEventConnection!'
        argsBuilder: 'Relay::Connection'
        description: 'Lookup events.'
        args:
          isFuture:
            type: 'Boolean'
            description: 'If non-null, filters events by comparing the start date with present.'
          theme:
            type: 'ID'
            description: 'If non-null, filters events with the given theme.'
          project:
            type: 'ID'
            description: 'If non-null, filters events with the given project.'
          author:
            type: 'ID'
            description: 'If non-null, filters events with the given author.'
          userType:
            type: 'ID'
            description: 'If non-null, filters events with the given author type.'
          search:
            type: 'String'
            description: 'If non-null, filters events with the given string to look for.'
        resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\QueryEventsResolver", [args])'
