PreviewProposal:
    type: object
    inherits:
        - Node
        - PublicPublishable
        - UniformResourceLocatable
        - Trashable
        - Timestampable
        - Draftable
    config:
        name: Proposal
        description: "Represents a user's contribution to a collect step."
        interfaces:
            - Node
            - PublicPublishable
            - UniformResourceLocatable
            - Trashable
            - Draftable
        fields:
            id:
                description: 'The ID of an object.'
                builder: 'Relay::GlobalId'
                builderConfig:
                    typeName: Proposal
            url:
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Proposal\\ProposalUrlResolver", [value, serv("request_stack")])'
            title:
                type: 'String!'
                description: 'Identifies the proposal title.'
            author:
                type: 'PreviewUser!'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Proposal\\ProposalAuthorResolver", [value])'
                description: 'Identifies the author of the contribution.'
            body:
                type: 'HTML'
                description: 'Identifies the body of the proposal.'
            responses:
                type: '[PreviewResponse]!'
                description: 'Identifies the responses of the proposal.'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Proposal\\ProposalResponsesResolver", [value, getUser(), context])'
            reference:
                type: 'String!'
                description: 'Identifies the unique reference of the proposal.'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Proposal\\ProposalReferenceResolver", [value])'
            analyses:
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\ViewerCanSeeProposalAnalysisResolver").isGranted(getUser(), value, context)'
                type: '[PreviewProposalAnalysis!]'
                description: "Analysts's analysis of the proposal."
            decision:
                description: 'The decision of the decision-maker on the analysis of the proposal.'
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\ViewerCanSeeProposalDecisionResolver").isGranted(getUser(), value, context)'
                type: 'PreviewProposalDecision'
            assessment:
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\ViewerCanSeeProposalAssessmentResolver").isGranted(getUser(), value, context)'
                type: 'PreviewProposalAssessment'
                description: "The supervisor's assessment on the analysis of the proposal."
            votes:
                type: 'PreviewProposalVoteConnection!'
                argsBuilder: 'Relay::Connection'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Proposal\\ProposalVotesResolver", [value, args, context, getUser()])'
                args:
                    orderBy:
                        type: 'PreviewProposalVoteOrder'
                        defaultValue: { field: PUBLISHED_AT, direction: DESC }
                        description: 'The ordering options for votes.'
            selections:
                type: '[PreviewProposalSelection!]!'
                description: 'List of selections (step an status) of the proposal.'
