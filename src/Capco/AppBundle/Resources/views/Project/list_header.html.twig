{% set color = opinionType is defined ? opinionType.color : 'default' %}
{% set buttonLabel = (opinionTerm is defined and opinionTerm == 0) ? 'opinion.create.button' : 'opinion.create.article_button'  %}
{% set label = areVersions is defined and areVersions ? 'project.show.versions' : (opinionTerm is defined and opinionTerm == 0) ? 'project.show.opinions' : 'project.show.articles' %}
{% set items = (opinions is defined) ? opinions : proposals %}
<div class="opinion  opinion--{{ color }} opinion--default">
    <div class="opinion__header  opinion__header--mobile-centered">
        <div class="pull-left opinion__header__title">
            {{ label | transchoice(items | length, {}, 'CapcoAppBundle')  }}
        </div>
        {% if filter is not defined or filter == true %}
            <div class="pull-right  opinion__header__filter">
                {% if opinions_count > 1 %}
                    {%  set filterId = 'filter_' ~ opinionType.slug %}
                    <select id="{{ filterId }}" class="form-control" style="margin-left: 15px;" onchange="{{ "window.location.href = document.getElementById('" ~ filterId ~ "')[document.getElementById('" ~ filterId ~ "').selectedIndex].dataset.url;" }}">
                        <option>
                            {% if opinionsSort is defined %}
                                {{ 'opinion.sort.sorted_by' | trans({'%sortOrder%': ('opinion.sort.' ~ opinionsSort) | trans({}, 'CapcoAppBundle')}, 'CapcoAppBundle') }}
                            {% else %}
                                {{ 'opinion.sort.label' | trans({}, 'CapcoAppBundle') }}
                            {% endif %}
                        </option>
                        {% for opinionSortOrderKey, opinionSortOrder in opinionSortOrders %}
                            <option data-url="{{ path('app_consultation_show_opinions_sorted', {projectSlug: project.slug, stepSlug: currentStep.slug, opinionTypeSlug: opinionType.slug, opinionsSort: opinionSortOrderKey}) }}">
                                {{ opinionSortOrder | trans({}, 'CapcoAppBundle') }}
                            </option>
                        {% endfor %}
                    </select>
                {% endif %}
                {% if opinionType is defined and opinionType.isEnabled and currentStep.canContribute and currentStep.canContribute %}
                  {% set appendixTypes = [] %}
                  {% for appendix in opinionType.getAppendixTypes() %}
                  {% set appendixTypes = appendixTypes|merge([{
                    'id': appendix.getAppendixTypeId(),
                    'title': appendix.getAppendixTypeTitle(),
                    'position': appendix.position,
                  }]) %}
                  {% endfor %}
                  {{ react_render_component('NewOpinionApp', {
                    'props': {
                      'opinionType': {
                        'id': opinionType.id,
                        'slug': opinionType.slug,
                        'appendixTypes': appendixTypes
                      },
                      'projectId': project.id,
                      'stepId': currentStep.id,
                      'label': buttonLabel | trans({}, 'CapcoAppBundle')
                    },
                    })
                   }}
                {% endif %}
            </div>
        {% endif %}
    </div>
</div>
