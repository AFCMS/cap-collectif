<?php

/**
 * This file is part of the <name> project.
 *
 * (c) <yourname> <youremail>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Capco\UserBundle\Entity;

use Capco\AppBundle\Entity\Synthesis\SynthesisUserInterface;
use Sonata\UserBundle\Entity\BaseUser as BaseUser;
use Sonata\UserBundle\Model\UserInterface;
use Symfony\Component\Security\Core\Encoder\EncoderAwareInterface;
use Doctrine\Common\Collections\ArrayCollection;

/**
 * This file has been generated by the Sonata EasyExtends bundle ( http://sonata-project.org/bundles/easy-extends ).
 *
 * References :
 *   working with object : http://www.doctrine-project.org/projects/orm/2.0/docs/reference/working-with-objects/en
 *
 * @author <yourname> <youremail>
 */
class User extends BaseUser implements EncoderAwareInterface, SynthesisUserInterface
{
    const SORT_ORDER_CREATED_AT = 0;
    const SORT_ORDER_CONTRIBUTIONS_COUNT = 1;

    public static $sortOrder = [
        'activity' => self::SORT_ORDER_CONTRIBUTIONS_COUNT,
        'date' => self::SORT_ORDER_CREATED_AT,
    ];
    public static $sortOrderLabels = [
        'activity' => 'user.index.sort.activity',
        'date' => 'user.index.sort.date',
    ];

    /**
     * @var int
     */
    protected $id;

    /**
     * @var string
     */
    private $slug;

    /**
     * @var int
     */
    protected $facebook_id;

    /**
     * @var int
     */
    protected $facebook_access_token;

    /**
     * @var int
     */
    protected $facebook_url;

    /**
     * @var int
     */
    protected $google_id;

    /**
     * @var int
     */
    protected $google_access_token;

    /**
     * @var int
     */
    protected $google_url;

    /**
     * @var string
     */
    protected $twitter_id;

    /**
     * @var string
     */
    protected $twitter_access_token;

    /**
     * @var string
     */
    protected $twitter_url;

    /**
     * @var
     */
    protected $Media;

    /**
     * @var bool
     */
    protected $isTermsAccepted = false;

    /**
     * @var string
     */
    protected $address;

    /**
     * @var string
     */
    protected $address2;

    /**
     * @var int
     */
    protected $zipCode;

    /**
     * @var string
     */
    protected $neighborhood;

    /**
     * @var string
     */
    protected $city;

    /**
     * @var string
     */
    protected $encoder;

    protected $opinions;

    protected $opinionVersions;

    protected $ideas;

    protected $comments;

    protected $arguments;

    protected $votes;

    protected $sources;

    /**
     * @var int
     */
    protected $sourcesCount = 0;

    /**
     * @var int
     */
    protected $argumentsCount = 0;

    /**
     * @var int
     */
    protected $ideasCount = 0;

    /**
     * @var int
     */
    protected $opinionsCount = 0;

    // Comments

    /**
     * @var int
     */
    protected $ideaCommentsCount = 0;

    /**
     * @var int
     */
    protected $postCommentsCount = 0;

    /**
     * @var int
     */
    protected $eventCommentsCount = 0;

    // Votes

    /**
     * @var int
     */
    protected $ideaVotesCount = 0;

    /**
     * @var int
     */
    protected $argumentVotesCount = 0;

    /**
     * @var int
     */
    protected $commentVotesCount = 0;

    /**
     * @var int
     */
    protected $opinionVotesCount = 0;

    /**
     * @var int
     */
    protected $sourceVotesCount = 0;

    protected $userType;

    public function __construct($encoder = null)
    {
        parent::__construct();

        $this->encoder = $encoder;
        $this->roles = array('ROLE_USER');
        $this->opinions = new ArrayCollection();
        $this->opinionVersions = new ArrayCollection();
        $this->ideas = new ArrayCollection();
        $this->comments = new ArrayCollection();
        $this->arguments = new ArrayCollection();
        $this->votes = new ArrayCollection();
        $this->sources = new ArrayCollection();
    }

    // for EncoderAwareInterface
    public function getEncoderName()
    {
        return $this->encoder;
    }

    // for serialization
    public function getEncoder()
    {
        return $this->encoder;
    }

    /**
     * Get id.
     *
     * @return int $id
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * @return mixed
     */
    public function getSlug()
    {
        return $this->slug;
    }

    /**
     * @param mixed $slug
     */
    public function setSlug($slug)
    {
        $this->slug = $slug;
    }

    /**
     * @return int
     */
    public function getGoogleId()
    {
        return $this->google_id;
    }

    /**
     * @param int $google_id
     */
    public function setGoogleId($google_id)
    {
        $this->google_id = $google_id;
    }

    /**
     * @return int
     */
    public function getFacebookAccessToken()
    {
        return $this->facebook_access_token;
    }

    /**
     * @param int $facebook_access_token
     */
    public function setFacebookAccessToken($facebook_access_token)
    {
        $this->facebook_access_token = $facebook_access_token;
    }

    /**
     * @return int
     */
    public function getFacebookId()
    {
        return $this->facebook_id;
    }

    /**
     * @param int $facebook_id
     */
    public function setFacebookId($facebook_id)
    {
        $this->facebook_id = $facebook_id;
    }

    /**
     * @return int
     */
    public function getGoogleAccessToken()
    {
        return $this->google_access_token;
    }

    /**
     * @param int $google_access_token
     */
    public function setGoogleAccessToken($google_access_token)
    {
        $this->google_access_token = $google_access_token;
    }

    public function setTwitterId($twitter_id)
    {
        $this->twitter_id = $twitter_id;

        return $this;
    }

    public function getTwitterId()
    {
        return $this->twitter_id;
    }

    public function setTwitterAccessToken($twitter_access_token)
    {
        $this->twitter_access_token = $twitter_access_token;
    }

    public function getTwitterAccessToken()
    {
        return $this->twitter_access_token;
    }

    /**
     * @return int
     */
    public function getFacebookUrl()
    {
        return $this->facebook_url;
    }

    /**
     * @param int $facebook_url
     */
    public function setFacebookUrl($facebook_url)
    {
        $this->facebook_url = $facebook_url;
    }

    /**
     * @return int
     */
    public function getGoogleUrl()
    {
        return $this->google_url;
    }

    /**
     * @param int $google_url
     */
    public function setGoogleUrl($google_url)
    {
        $this->google_url = $google_url;
    }

    /**
     * @return string
     */
    public function getTwitterUrl()
    {
        return $this->twitter_url;
    }

    /**
     * @param string $twitter_url
     */
    public function setTwitterUrl($twitter_url)
    {
        $this->twitter_url = $twitter_url;
    }

    /**
     * Set media.
     *
     * @param \Capco\MediaBundle\Entity\Media $media
     *
     * @return User
     */
    public function setMedia(\Capco\MediaBundle\Entity\Media $media = null)
    {
        $this->Media = $media;

        return $this;
    }

    /**
     * Get media.
     *
     * @return \Capco\MediaBundle\Entity\Media
     */
    public function getMedia()
    {
        return $this->Media;
    }

    /**
     * @return bool
     */
    public function getIsTermsAccepted()
    {
        return $this->isTermsAccepted;
    }

    /**
     * @param bool $is_terms_accepted
     */
    public function setIsTermsAccepted($isTermsAccepted)
    {
        $this->isTermsAccepted = $isTermsAccepted;
    }

    /**
     * @return string
     */
    public function getAddress()
    {
        return $this->address;
    }

    /**
     * @param string $address
     */
    public function setAddress($address)
    {
        $this->address = $address;
    }

    /**
     * @return string
     */
    public function getAddress2()
    {
        return $this->address2;
    }

    /**
     * @param string $address2
     */
    public function setAddress2($address2)
    {
        $this->address2 = $address2;
    }

    /**
     * @return int
     */
    public function getZipCode()
    {
        return $this->zipCode;
    }

    /**
     * @param int $zipCode
     */
    public function setZipCode($zipCode)
    {
        $this->zipCode = $zipCode;
    }

    /**
     * @return string
     */
    public function getCity()
    {
        return $this->city;
    }

    /**
     * @param string $city
     */
    public function setCity($city)
    {
        $this->city = $city;
    }

    /**
     * @return string
     */
    public function getNeighborhood()
    {
        return $this->neighborhood;
    }

    /**
     * @param string $neighborhood
     */
    public function setNeighborhood($neighborhood)
    {
        $this->neighborhood = $neighborhood;
    }

    public function getOpinions()
    {
        return $this->opinions;
    }

    public function getOpinionVersions()
    {
        return $this->opinionVersions;
    }

    public function getIdeas()
    {
        return $this->ideas;
    }

    public function getComments()
    {
        return $this->comments;
    }

    public function getArguments()
    {
        return $this->arguments;
    }

    public function getVotes()
    {
        return $this->votes;
    }

    public function getSources()
    {
        return $this->sources;
    }

    /**
     * Gets the value of sourcesCount.
     *
     * @return int
     */
    public function getSourcesCount()
    {
        return $this->sourcesCount;
    }

    /**
     * Gets the value of argumentsCount.
     *
     * @return int
     */
    public function getArgumentsCount()
    {
        return $this->argumentsCount;
    }

    /**
     * Gets the value of ideasCount.
     *
     * @return int
     */
    public function getIdeasCount()
    {
        return $this->ideasCount;
    }

    /**
     * Gets the value of opinionsCount.
     *
     * @return int
     */
    public function getOpinionsCount()
    {
        return $this->opinionsCount;
    }

    /**
     * Sets the value of opinionsCount.
     *
     * @param int $opinionsCount the opinions count
     *
     * @return self
     */
    public function setOpinionsCount($opinionsCount)
    {
        $this->opinionsCount = $opinionsCount;

        return $this;
    }

    /**
     * Sets the value of ideasCount.
     *
     * @param int $ideasCount the ideas count
     *
     * @return self
     */
    public function setIdeasCount($ideasCount)
    {
        $this->ideasCount = $ideasCount;

        return $this;
    }

    /**
     * Sets the value of argumentsCount.
     *
     * @param int $argumentsCount the arguments count
     *
     * @return self
     */
    public function setArgumentsCount($argumentsCount)
    {
        $this->argumentsCount = $argumentsCount;

        return $this;
    }

    /**
     * Sets the value of sourcesCount.
     *
     * @param int $sourcesCount the sources count
     *
     * @return self
     */
    public function setSourcesCount($sourcesCount)
    {
        $this->sourcesCount = $sourcesCount;

        return $this;
    }

    /**
     * @return int
     */
    public function getIdeaCommentsCount()
    {
        return $this->ideaCommentsCount;
    }

    /**
     * @param int $ideaCommentsCount
     */
    public function setIdeaCommentsCount($ideaCommentsCount)
    {
        $this->ideaCommentsCount = $ideaCommentsCount;
    }

    /**
     * @return int
     */
    public function getPostCommentsCount()
    {
        return $this->postCommentsCount;
    }

    /**
     * @param int $postCommentsCount
     */
    public function setPostCommentsCount($postCommentsCount)
    {
        $this->postCommentsCount = $postCommentsCount;
    }

    /**
     * @return int
     */
    public function getIdeaVotesCount()
    {
        return $this->ideaVotesCount;
    }

    /**
     * @param int $ideaVotesCount
     */
    public function setIdeaVotesCount($ideaVotesCount)
    {
        $this->ideaVotesCount = $ideaVotesCount;
    }

    /**
     * @return int
     */
    public function getOpinionVotesCount()
    {
        return $this->opinionVotesCount;
    }

    /**
     * @param int $opinionVotesCount
     */
    public function setOpinionVotesCount($opinionVotesCount)
    {
        $this->opinionVotesCount = $opinionVotesCount;
    }

    /**
     * @return int
     */
    public function getSourceVotesCount()
    {
        return $this->sourceVotesCount;
    }

    /**
     * @param int $sourceVotesCount
     */
    public function setSourceVotesCount($sourceVotesCount)
    {
        $this->sourceVotesCount = $sourceVotesCount;
    }

    /**
     * @return int
     */
    public function getEventCommentsCount()
    {
        return $this->eventCommentsCount;
    }

    /**
     * @param int $eventCommentsCount
     */
    public function setEventCommentsCount($eventCommentsCount)
    {
        $this->eventCommentsCount = $eventCommentsCount;
    }

    /**
     * @return int
     */
    public function getCommentVotesCount()
    {
        return $this->commentVotesCount;
    }

    /**
     * @param int $commentVotesCount
     */
    public function setCommentVotesCount($commentVotesCount)
    {
        $this->commentVotesCount = $commentVotesCount;
    }

    /**
     * @return int
     */
    public function getArgumentVotesCount()
    {
        return $this->argumentVotesCount;
    }

    /**
     * @param int $argumentVotesCount
     */
    public function setArgumentVotesCount($argumentVotesCount)
    {
        $this->argumentVotesCount = $argumentVotesCount;
    }

    /**
     * Sets the value of votes.
     *
     * @param mixed $votes the votes
     *
     * @return self
     */
    public function setVotes($votes)
    {
        $this->votes = $votes;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getUserType()
    {
        return $this->userType;
    }

    /**
     * @param mixed $userType
     */
    public function setUserType($userType)
    {
        $this->userType = $userType;
    }

    // ************************* Custom methods *********************************

    public function getFullname()
    {
        return sprintf(
            '%s %s',
            $this->getFirstname(),
            $this->getLastname()
        );
    }

    public static function getGenderList()
    {
        return array(
            UserInterface::GENDER_UNKNOWN => 'gender.unknown',
            UserInterface::GENDER_FEMALE => 'gender.female',
            UserInterface::GENDER_MALE => 'gender.male',
        );
    }

    public function getContributionsCount()
    {
        return $this->sourcesCount + $this->ideasCount + $this->argumentsCount + $this->opinionsCount + $this->getCommentsCount();
    }

    public function getVotesCount()
    {
        return $this->ideaVotesCount + $this->commentVotesCount + $this->opinionVotesCount + $this->argumentVotesCount + $this->sourceVotesCount;
    }

    public function getCommentsCount()
    {
        return $this->ideaCommentsCount + $this->postCommentsCount + $this->eventCommentsCount;
    }

    // ********************* Methods for synthesis tool **************************

    /**
     * Get unique identifier.
     *
     * @return int
     */
    public function getUniqueIdentifier()
    {
        return $this->slug;
    }

    /**
     * Get display name.
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->username;
    }

    /**
     * Tell if user has role admin or super admin.
     *
     * @return boolean
     */
    public function isAdmin()
    {
        return $this->hasRole('ROLE_ADMIN') || $this->hasRole('ROLE_SUPER_ADMIN');
    }
}
