services:
    # Redeclare Sonata services
  sonata.user.admin.group:
    abstract: false
    public: true
  sonata.user.orm.group_manager:
    abstract: false
    public: true

  capco.paris.opem_am_client:
    class: Capco\UserBundle\MonCompteParis\OpenAmClient
    arguments: ["@httplug.client.default", "@logger"]

  capco.oauth.provider:
    class: Capco\UserBundle\Security\Core\User\OauthUserProvider
    arguments: ["@fos_user.user_manager" ,{facebook: facebook_id, google: google_id}]

  capco.simple_preauth.provider:
    class: Capco\UserBundle\Security\Core\User\SimplePreAuthenticatorUserProvider
    arguments: ["@capco.toggle.manager", "@capco.saml.provider", "@capco.paris.provider"]

  capco.saml.provider:
    class: Capco\UserBundle\Security\Core\User\SamlUserProvider
    arguments: ["@fos_user.user_manager", "%simplesamlphp.sp%"]

  capco.paris.provider:
    class: Capco\UserBundle\Security\Core\User\MonCompteParisUserProvider
    arguments: ["@fos_user.user_manager", "@capco.paris.opem_am_client"]

  capco_user.registration.form.type:
    class: Capco\UserBundle\Form\Type\ApiRegistrationFormType
    arguments: ["@capco.toggle.manager"]
    tags:
      - { name: form.type, alias: capco_user_registration }

  capco_user.profile.form.type:
    class: Capco\UserBundle\Form\Type\ProfileFormType
    arguments: ["@capco.toggle.manager"]
    tags:
      - { name: form.type }

  capco_user_notifications.listener:
    class: Capco\UserBundle\Listener\UserNotificationsListener
    tags:
        - { name: doctrine.orm.entity_listener, event: prePersist }
    arguments: ['@fos_user.util.token_generator']

  capco_user.user_provider.email:
    class: Capco\UserBundle\Security\Core\User\UserEmailProvider
    arguments: ["@fos_user.user_manager", {}]

  drupal.encoder:
    class: Capco\UserBundle\Security\DrupalEncoder

  capco_user.change_password.form.type:
      class: Capco\UserBundle\Form\Type\ChangePasswordFormType
      tags:
          - { name: form.type }

  # Saml
  capco.logout_handler:
      class: Capco\UserBundle\Security\Http\Logout\LogoutSuccessHandler
      arguments: ["@simplesamlphp.auth", "@router", "@capco.toggle.manager", "@capco.paris.opem_am_client"]

  # Custom authentications
  capco.simple_preauth.authenticator:
      class: Capco\UserBundle\Authenticator\SimplePreAuthenticator
      arguments: ["@capco.toggle.manager", "@capco.saml.authenticator", "@capco.paris.authenticator"]

  capco.paris.authenticator:
      class: Capco\UserBundle\Authenticator\MonCompteParisAuthenticator
      arguments: ["@security.http_utils", "@logger", "@capco.paris.opem_am_client"]

  capco.saml.authenticator:
      class: Capco\UserBundle\Authenticator\SamlAuthenticator
      arguments: ["@simplesamlphp.auth", "%simplesamlphp.sp%", "@security.http_utils", "@logger"]

  # We override default security services:
  security.authentication.success_handler:
      class:  Capco\UserBundle\Handler\AuthenticationSuccessHandler
      arguments:  ["@security.http_utils", {}]
      tags:
          - { name: 'monolog.logger', channel: 'security' }
  security.authentication.failure_handler:
      class:  Capco\UserBundle\Handler\AuthenticationFailureHandler
      arguments:  ["@http_kernel", "@security.http_utils", {}, "@logger"]
      tags:
          - { name: 'monolog.logger', channel: 'security' }
