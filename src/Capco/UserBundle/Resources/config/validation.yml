Capco\UserBundle\Entity\User:
  constraints:
    - Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity: { fields: email, message: already_used_email, groups: [registration, profile] }
    - Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity: { fields: phone, message: already_used_phone, groups: [registration, profile] }
  properties:
    username:
      - NotBlank: { message: username.blank, groups: [registration, registrationAdmin, profile] }
      - Length: { min: 2, max: 128, minMessage: username.minMessage, groups: [registration, profile] }
    biography:
      - Length: { max: 1000, groups: [profile] }
    plainPassword:
      - NotBlank: { message: password.blank, groups: [registration] }
      - Length: { min: 8, max: 72, minMessage: password.minMessage, groups: [registration] }
    email:
      - NotBlank: { message: email.blank, groups: [registration, registrationAdmin, profile] }
      - Email: { message: email.invalid, groups: [registration, registrationAdmin, profile] }
      - EmailChecker\Constraints\NotThrowawayEmail: { message: email.throwable, groups: [registration, profile] }
    twitterUrl:
      - Url: { groups: [profile] }
      - Capco\AppBundle\Validator\Constraints\IsSocialNetworkUrl: { social_network: twitter, groups: [profile] }
    facebookUrl:
      - Url: { groups: [profile] }
      - Capco\AppBundle\Validator\Constraints\IsSocialNetworkUrl: { social_network: facebook, groups: [profile] }
    googleUrl:
      - Url: { groups: [profile] }
      - Capco\AppBundle\Validator\Constraints\IsSocialNetworkUrl: { social_network: gplus, groups: [profile] }
    Media:
      - Valid: ~
    website:
      - Url: { groups: [profile] }
    zipCode:
      - Length: { min: 0, max: 10, minMessage: user.register.invalid_zip_code, maxMessage: user.register.invalid_zip_code, groups: [profile] }
    phone:
      - Misd\PhoneNumberBundle\Validator\Constraints\PhoneNumber: { groups: [registration, profile] }

Capco\UserBundle\Entity\UserType:
  constraints:
    - Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity:
        fields: [name]
        message: usertype.name.already_exists
  properties:
    name:
      - NotBlank: ~
      - Length:
          min: 2
          max: 128

FOS\UserBundle\Form\Model\ChangePassword:
  properties:
    new:
      - NotBlank: { message: fos_user.new_password.blank, groups: [ChangePassword, ResetPassword]}
      - Length: { min: 8, max: 128, minMessage: fos_user.new_password.short, groups: [ChangePassword, ResetPassword]}
